{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ashut\\\\Desktop\\\\feedback_portal - Copy\\\\reactapp\\\\src\\\\Dashboard.js\",\n  _s = $RefreshSig$();\n// import { useState } from \"react\";\n\n// const Dashboard = () => {\n//   const [activeTab, setActiveTab] = useState(\"create\");\n//   const [rules, setRules] = useState([]);\n//   const [selectedRules, setSelectedRules] = useState([]);\n//   const [rule, setRule] = useState(\"\");\n//   const [error, setError] = useState(\"\");\n\n//   const fetchRules = () => {\n//     fetch(\"http://localhost:5556/getRules\")\n//       .then((response) => response.json())\n//       .then((rulesArray) => {\n//         setRules(rulesArray);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error fetching rules:\", error);\n//       });\n//   };\n\n//   const handleRuleSelection = (rule) => {\n//     if (selectedRules.includes(rule)) {\n//       setSelectedRules(selectedRules.filter((r) => r !== rule));\n//     } else {\n//       setSelectedRules([...selectedRules, rule]);\n//     }\n//   };\n\n//   const handleCombineRules = () => {\n//     console.log(\"Combining rules:\", selectedRules);\n//     alert(\"Rules combined successfully!\");\n//   };\n\n//   const validateRule = () => {\n//     let valid = true;\n//     let errorMessage = \"\";\n\n//     if (rule.trim() === \"\") {\n//       valid = false;\n//       errorMessage = \"Rule cannot be empty.\";\n//     } else if (rule.length < 50) {\n//       valid = false;\n//       errorMessage = \"Rule must be at least 50 characters long.\";\n//     } else if (!/AND|OR/.test(rule)) {\n//       valid = false;\n//       errorMessage = \"Rule must contain at least one 'AND' or 'OR' operator.\";\n//     }\n\n//     if (!valid) {\n//       setError(errorMessage);\n//     } else {\n//       setError(\"\");\n//       submitRule();\n//     }\n//   };\n\n//   const submitRule = () => {\n//     const url = \"http://localhost:5556/submitRule\";\n//     const newRule = {\n//       rule: rule,\n//     };\n\n//     const postdata = {\n//       headers: { \"Content-type\": \"application/json\" },\n//       method: \"POST\",\n//       body: JSON.stringify(newRule),\n//     };\n\n//     fetch(url, postdata)\n//       .then((response) => response.json())\n//       .then((data) => {\n//         alert(\"Rule Added Successfully!\");\n//         setRule(\"\");\n//       })\n//       .catch((error) => {\n//         console.error(\"Error submitting rule:\", error);\n//       });\n//   };\n\n//   return (\n//     <section>\n//       <div className=\"container\">\n//         <div className=\"row mt-5\">\n//           <div className=\"col-lg-12 text-center fs-1 fw-bold text-dark\">\n//             Rules & Eligibility\n//           </div>\n//         </div>\n//         <div className=\"row\">\n//           <div className=\"col-lg-12 p-5 text-center\">\n//             <div className=\"btn-group\">\n//               <button\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"create\" ? \"active\" : \"\"}`}\n//                 onClick={() => setActiveTab(\"create\")}\n//               >\n//                 Create Rule\n//               </button>\n//               <button\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"combine\" ? \"active\" : \"\"}`}\n//                 onClick={() => {\n//                   setActiveTab(\"combine\");\n//                   fetchRules();\n//                 }}\n//               >\n//                 Combine Rules\n//               </button>\n//               <button\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"evaluate\" ? \"active\" : \"\"}`}\n//                 onClick={() => setActiveTab(\"evaluate\")}\n//               >\n//                 Evaluate Rules\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//         <div className=\"row mb-5\">\n//           <div className=\"container p-5 feedback-box\">\n//             <div className=\"row\">\n//               <h3 className=\"text-center\">\n//                 {activeTab === \"create\" && \"Create Rule\"}\n//                 {activeTab === \"combine\" && \"Combine Rules\"}\n//                 {activeTab === \"evaluate\" && \"Evaluate Rules\"}\n//               </h3>\n//             </div>\n\n//             <div className=\"row\">\n//               <div className=\"col-lg-3\"></div>\n//               <div className=\"col-lg-6\">\n//                 {activeTab === \"create\" && (\n//                   <form>\n//                     <textarea\n//                       className={`form-control  ${error ? \"is-invalid\" : \"\"}`}\n//                       placeholder=\"Enter Rule\"\n//                       value={rule}\n//                       onChange={(e) => setRule(e.target.value)}\n//                       style={{ borderColor: error ? \"red\" : \"\" }}\n//                     ></textarea>\n//                     {error && <small className=\"text-danger fst-italic bg-3\"><i>{error}</i></small>}\n//                     <div className='text-center'>\n//                     <button\n//                       type=\"button\"\n//                       className=\"btn btn-primary mt-3 bg-dark\"\n//                       onClick={validateRule}\n//                     >\n//                       Create Rule\n//                     </button>\n//                     </div>\n//                   </form>\n//                 )}\n\n//                 {activeTab === \"combine\" && (\n//                   <div>\n//                     {rules.length > 0 ? (\n//                       <form>\n//                         {rules.map((rule, index) => (\n//                           <div key={index} className=\"form-check\">\n//                             <input\n//                               className=\"form-check-input\"\n//                               type=\"checkbox\"\n//                               value={rule}\n//                               onChange={() => handleRuleSelection(rule)}\n//                             />\n//                             <label className=\"form-check-label\">\n//                               {rule}\n//                             </label>\n//                           </div>\n//                         ))}\n//                         <button\n//                           type=\"button\"\n//                           className=\"btn btn-primary mt-3\"\n//                           onClick={handleCombineRules}\n//                         >\n//                           Combine Selected Rules\n//                         </button>\n//                       </form>\n//                     ) : (\n//                       <p>No rules available. Click the button to fetch rules.</p>\n//                     )}\n//                   </div>\n//                 )}\n\n//                 {activeTab === \"evaluate\" && (\n//                   <form>\n//                     <textarea className=\"form-control mb-3\" placeholder=\"Enter Data to Evaluate\"></textarea>\n//                     <button type=\"submit\" className=\"btn btn-primary\">Evaluate Rule</button>\n//                   </form>\n//                 )}\n//               </div>\n//               <div className=\"col-lg-3\"></div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     </section>\n//   );\n// };\n\n// export default Dashboard;\n\n// import { useState, useEffect } from \"react\";\n\n// const Dashboard = () => {\n//   const [activeTab, setActiveTab] = useState(\"create\");\n//   const [rules, setRules] = useState([]);\n//   const [selectedRules, setSelectedRules] = useState([]);\n//   const [selectedRule, setSelectedRule] = useState(\"\");\n//   const [rule, setRule] = useState(\"\");\n//   const [age, setAge] = useState(\"\");\n//   const [department, setDepartment] = useState(\"\");\n//   const [salary, setSalary] = useState(\"\");\n//   const [experience, setExperience] = useState(\"\");\n//   const [error, setError] = useState(\"\");\n//   const [output, setOutput] = useState(\"\");\n\n//   const fetchRules = () => {\n//     fetch(\"http://localhost:5556/getRules\")\n//       .then((response) => response.json())\n//       .then((rulesArray) => {\n//         setRules(rulesArray);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error fetching rules:\", error);\n//       });\n//   };\n\n//   const handleRuleSelection = (rule) => {\n//     if (selectedRules.includes(rule)) {\n//       setSelectedRules(selectedRules.filter((r) => r !== rule));\n//     } else {\n//       setSelectedRules([...selectedRules, rule]);\n//     }\n//   };\n\n//   const handleCombineRules = () => {\n//     console.log(\"Combining rules:\", selectedRules);\n//     alert(\"Rules combined successfully!\");\n//   };\n\n//   const validateRule = () => {\n//     let valid = true;\n//     let errorMessage = \"\";\n\n//     if (rule.trim() === \"\") {\n//       valid = false;\n//       errorMessage = \"Rule cannot be empty.\";\n//     } else if (rule.length < 50) {\n//       valid = false;\n//       errorMessage = \"Rule must be at least 50 characters long.\";\n//     } else if (!/AND|OR/.test(rule)) {\n//       valid = false;\n//       errorMessage = \"Rule must contain at least one 'AND' or 'OR' operator.\";\n//     }\n\n//     if (!valid) {\n//       setError(errorMessage);\n//     } else {\n//       setError(\"\");\n//       submitRule();\n//     }\n//   };\n\n//   const submitRule = () => {\n//     const url = \"http://localhost:5556/submitRule\";\n//     const newRule = { rule };\n\n//     const postdata = {\n//       headers: { \"Content-type\": \"application/json\" },\n//       method: \"POST\",\n//       body: JSON.stringify(newRule),\n//     };\n\n//     fetch(url, postdata)\n//       .then((response) => response.json())\n//       .then((data) => {\n//         alert(\"Rule Added Successfully!\");\n//         setRule(\"\");\n//       })\n//       .catch((error) => {\n//         console.error(\"Error submitting rule:\", error);\n//       });\n//   };\n\n//   const handleEvaluate = () => {\n//     let hasError = false;\n\n//     if (!age || isNaN(age)) {\n//       setError(\"Age must be a valid number.\");\n//       hasError = true;\n//     } else if (!department) {\n//       setError(\"Department is required.\");\n//       hasError = true;\n//     } else if (!salary || isNaN(salary)) {\n//       setError(\"Salary must be a valid number.\");\n//       hasError = true;\n//     } else if (!experience || isNaN(experience)) {\n//       setError(\"Experience must be a valid number.\");\n//       hasError = true;\n//     } else if (!selectedRule) {\n//       setError(\"Please select a rule to evaluate.\");\n//       hasError = true;\n//     } else {\n//       setError(\"\");\n//     }\n\n//     if (!hasError) {\n//       const data = { age, department, salary, experience, rule: selectedRule };\n//       fetch(\"http://localhost:5556/evaluateRule\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify(data),\n//       })\n//         .then((response) => response.json())\n//         .then((result) => {\n//           setOutput(result.isEligible ? \"True (User is eligible)\" : \"False (User is not eligible)\");\n//         })\n//         .catch((error) => {\n//           console.error(\"Error evaluating rule:\", error);\n//           setOutput(\"Error evaluating rule.\");\n//         });\n//     }\n//   };\n\n//   useEffect(() => {\n//     if (activeTab === \"evaluate\") {\n//       fetchRules();\n//     }\n//   }, [activeTab]);\n\n//   return (\n//     <section>\n//       <div className=\"container\">\n//         <div className=\"row mt-5\">\n//           <div className=\"col-lg-12 text-center fs-1 fw-bold text-dark\">\n//             Rules & Eligibility\n//           </div>\n//         </div>\n//         <div className=\"row\">\n//           <div className=\"col-lg-12 p-5 text-center\">\n//             <div className=\"btn-group\">\n//               <button\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"create\" ? \"active\" : \"\"}`}\n//                 onClick={() => setActiveTab(\"create\")}\n//               >\n//                 Create Rule\n//               </button>\n//               <button\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"combine\" ? \"active\" : \"\"}`}\n//                 onClick={() => {\n//                   setActiveTab(\"combine\");\n//                   fetchRules();\n//                 }}\n//               >\n//                 Combine Rules\n//               </button>\n//               <button\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"evaluate\" ? \"active\" : \"\"}`}\n//                 onClick={() => {\n//                   setActiveTab(\"evaluate\");\n//                   fetchRules();\n//                 }}\n//               >\n//                 Evaluate Rules\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//         <div className=\"row mb-5\">\n//           <div className=\"container p-5 feedback-box\">\n//             <div className=\"row\">\n//               <h3 className=\"text-center\">\n//                 {activeTab === \"create\" && \"Create Rule\"}\n//                 {activeTab === \"combine\" && \"Combine Rules\"}\n//                 {activeTab === \"evaluate\" && \"Evaluate Rules\"}\n//               </h3>\n//             </div>\n\n//             <div className=\"row\">\n//               <div className=\"col-lg-3\"></div>\n//               <div className=\"col-lg-6\">\n//                 {activeTab === \"create\" && (\n//                   <form>\n//                     <textarea\n//                       className={`form-control  ${error ? \"is-invalid\" : \"\"}`}\n//                       placeholder=\"Enter Rule\"\n//                       value={rule}\n//                       onChange={(e) => setRule(e.target.value)}\n//                       style={{ borderColor: error ? \"red\" : \"\" }}\n//                     ></textarea>\n//                     {error && <small className=\"text-danger fst-italic bg-3\"><i>{error}</i></small>}\n//                     <div className='text-center'>\n//                       <button\n//                         type=\"button\"\n//                         className=\"btn btn-primary mt-3 bg-dark\"\n//                         onClick={validateRule}\n//                       >\n//                         Create Rule\n//                       </button>\n//                     </div>\n//                   </form>\n//                 )}\n\n//                 {activeTab === \"combine\" && (\n//                   <div>\n//                     {rules.length > 0 ? (\n//                       <form>\n//                         {rules.map((rule, index) => (\n//                           <div key={index} className=\"form-check\">\n//                             <input\n//                               className=\"form-check-input\"\n//                               type=\"checkbox\"\n//                               value={rule}\n//                               onChange={() => handleRuleSelection(rule)}\n//                             />\n//                             <label className=\"form-check-label\">\n//                               {rule}\n//                             </label>\n//                           </div>\n//                         ))}\n//                         <button\n//                           type=\"button\"\n//                           className=\"btn btn-primary mt-3\"\n//                           onClick={handleCombineRules}\n//                         >\n//                           Combine Selected Rules\n//                         </button>\n//                       </form>\n//                     ) : (\n//                       <p>No rules available. Click the button to fetch rules.</p>\n//                     )}\n//                   </div>\n//                 )}\n\n//                 {activeTab === \"evaluate\" && (\n//                   <form>\n//                     {rules.length > 0 ? (\n//                       <div>\n//                         {rules.map((rule, index) => (\n//                           <div key={index} className=\"form-check\">\n//                             <input\n//                               className=\"form-check-input\"\n//                               type=\"radio\"\n//                               name=\"rule\"\n//                               value={rule}\n//                               onChange={() => setSelectedRule(rule)}\n//                             />\n//                             <label className=\"form-check-label\">\n//                               {rule}\n//                             </label>\n//                           </div>\n//                         ))}\n//                       </div>\n//                     ) : (\n//                       <p>No rules available. Click the button to fetch rules.</p>\n//                     )}\n\n//                     <div className=\"form-group mb-3\">\n//                       <label>Age:</label>\n//                       <input\n//                         type=\"number\"\n//                         className=\"form-control\"\n//                         value={age}\n//                         onChange={(e) => setAge(e.target.value)}\n//                         style={{ borderColor: error && !age ? \"red\" : \"\" }}\n//                       />\n//                     </div>\n//                     <div className=\"form-group mb-3\">\n//                       <label>Department:</label>\n//                       <input\n//                         type=\"text\"\n//                         className=\"form-control\"\n//                         value={department}\n//                         onChange={(e) => setDepartment(e.target.value)}\n//                         style={{ borderColor: error && !department ? \"red\" : \"\" }}\n//                       />\n//                     </div>\n//                     <div className=\"form-group mb-3\">\n//                       <label>Salary:</label>\n//                       <input\n//                         type=\"number\"\n//                         className=\"form-control\"\n//                         value={salary}\n//                         onChange={(e) => setSalary(e.target.value)}\n//                         style={{ borderColor: error && !salary ? \"red\" : \"\" }}\n//                       />\n//                     </div>\n//                     <div className=\"form-group mb-3\">\n//                       <label>Experience (Years):</label>\n//                       <input\n//                         type=\"number\"\n//                         className=\"form-control\"\n//                         value={experience}\n//                         onChange={(e) => setExperience(e.target.value)}\n//                         style={{ borderColor: error && !experience ? \"red\" : \"\" }}\n//                       />\n//                     </div>\n\n//                     {error && <small className=\"text-danger fst-italic\"><i>{error}</i></small>}\n\n//                     <div className=\"text-center\">\n//                       <button\n//                         type=\"button\"\n//                         className=\"btn btn-primary mt-3 bg-dark\"\n//                         onClick={handleEvaluate}\n//                       >\n//                         Evaluate Rule\n//                       </button>\n//                     </div>\n\n//                     {output && (\n//                       <div className=\"alert alert-info mt-3\" role=\"alert\">\n//                         <strong>Evaluation Result:</strong> {output}\n//                       </div>\n//                     )}\n//                   </form>\n//                 )}\n//               </div>\n//               <div className=\"col-lg-3\"></div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     </section>\n//   );\n// };\n\n// export default Dashboard;\n\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [activeTab, setActiveTab] = useState(\"create\");\n  const [rules, setRules] = useState([]);\n  const [selectedRules, setSelectedRules] = useState([]);\n  const [rule, setRule] = useState(\"\");\n  const [age, setAge] = useState(\"\");\n  const [department, setDepartment] = useState(\"\");\n  const [salary, setSalary] = useState(\"\");\n  const [experience, setExperience] = useState(\"\");\n  const [errors, setErrors] = useState({\n    rule: \"\",\n    age: \"\",\n    department: \"\",\n    salary: \"\",\n    experience: \"\",\n    selectedRule: \"\"\n  });\n  const [selectedRule, setSelectedRule] = useState(\"\");\n  useEffect(() => {\n    if (activeTab === \"evaluate\") {\n      fetchRules();\n    }\n  }, [activeTab]);\n  const fetchRules = () => {\n    fetch(\"http://localhost:5556/rules\").then(response => response.json()).then(rulesArray => {\n      setRules(rulesArray);\n    }).catch(error => {\n      console.error(\"Error fetching rules:\", error);\n    });\n  };\n  const handleRuleSelection = rule => {\n    setSelectedRule(rule);\n  };\n  const handleCombineRules = () => {\n    console.log(\"Combining rules:\", selectedRules);\n    alert(\"Rules combined successfully!\");\n  };\n  const validateRule = () => {\n    let valid = true;\n    let newErrors = {\n      ...errors\n    };\n    if (rule.trim() === \"\") {\n      valid = false;\n      newErrors.rule = \"Rule cannot be empty.\";\n    } else if (rule.length < 50) {\n      valid = false;\n      newErrors.rule = \"Rule must be at least 50 characters long.\";\n    } else if (!/AND|OR/.test(rule)) {\n      valid = false;\n      newErrors.rule = \"Rule must contain at least one 'AND' or 'OR' operator.\";\n    } else {\n      newErrors.rule = \"\";\n    }\n    setErrors(newErrors);\n    if (valid) {\n      submitRule();\n    }\n  };\n  const submitRule = () => {\n    const url = \"http://localhost:5556/rules\";\n    const newRule = {\n      rule: rule\n    };\n    const postdata = {\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      method: \"POST\",\n      body: JSON.stringify(newRule)\n    };\n    fetch(url, postdata).then(response => response.json()).then(data => {\n      alert(\"Rule Added Successfully!\");\n      setRule(\"\");\n    }).catch(error => {\n      console.error(\"Error submitting rule:\", error);\n    });\n  };\n  const validateEvaluation = () => {\n    let valid = true;\n    let newErrors = {\n      ...errors\n    };\n    if (age.trim() === \"\" || isNaN(age)) {\n      valid = false;\n      newErrors.age = \"Age must be a number and cannot be empty.\";\n    } else {\n      newErrors.age = \"\";\n    }\n    if (department.trim() === \"\") {\n      valid = false;\n      newErrors.department = \"Department cannot be empty.\";\n    } else {\n      newErrors.department = \"\";\n    }\n    if (salary.trim() === \"\" || isNaN(salary)) {\n      valid = false;\n      newErrors.salary = \"Salary must be a number and cannot be empty.\";\n    } else {\n      newErrors.salary = \"\";\n    }\n    if (experience.trim() === \"\" || isNaN(experience)) {\n      valid = false;\n      newErrors.experience = \"Experience must be a number and cannot be empty.\";\n    } else {\n      newErrors.experience = \"\";\n    }\n    if (!selectedRule) {\n      valid = false;\n      newErrors.selectedRule = \"Please select a rule.\";\n    } else {\n      newErrors.selectedRule = \"\";\n    }\n    setErrors(newErrors);\n    if (valid) {\n      submitEvaluation();\n    }\n  };\n  const submitEvaluation = () => {\n    const url = \"http://localhost:5556/evaluateRule\";\n    const evaluationData = {\n      age,\n      department,\n      salary,\n      experience,\n      rule: selectedRule\n    };\n    const postdata = {\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      method: \"POST\",\n      body: JSON.stringify(evaluationData)\n    };\n    fetch(url, postdata).then(response => response.json()).then(data => {\n      alert(`Evaluation Result: ${data.result ? \"True\" : \"False\"}`);\n    }).catch(error => {\n      console.error(\"Error evaluating rule:\", error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row mt-5\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-lg-12 text-center fs-1 fw-bold text-dark\",\n          children: \"Rules & Eligibility\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 700,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 699,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-lg-12 p-5 text-center\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"btn-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: `btn btn-outline-dark fw-bold ${activeTab === \"create\" ? \"active\" : \"\"}`,\n              onClick: () => setActiveTab(\"create\"),\n              children: \"Create Rule\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 707,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `btn btn-outline-dark fw-bold ${activeTab === \"combine\" ? \"active\" : \"\"}`,\n              onClick: () => {\n                setActiveTab(\"combine\");\n                fetchRules();\n              },\n              children: \"Combine Rules\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 713,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `btn btn-outline-dark fw-bold ${activeTab === \"evaluate\" ? \"active\" : \"\"}`,\n              onClick: () => setActiveTab(\"evaluate\"),\n              children: \"Evaluate Rules\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 722,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 706,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 705,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 704,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row mb-5\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container p-5 feedback-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"text-center\",\n              children: [activeTab === \"create\" && \"Create Rule\", activeTab === \"combine\" && \"Combine Rules\", activeTab === \"evaluate\" && \"Evaluate Rules\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 734,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 733,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-lg-3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 742,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-lg-6\",\n              children: [activeTab === \"create\" && /*#__PURE__*/_jsxDEV(\"form\", {\n                children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n                  className: `form-control mb-3 ${errors.rule ? \"is-invalid\" : \"\"}`,\n                  placeholder: \"Enter Rule\",\n                  value: rule,\n                  onChange: e => setRule(e.target.value),\n                  rows: 8,\n                  style: {\n                    borderColor: errors.rule ? \"red\" : \"\"\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 746,\n                  columnNumber: 21\n                }, this), errors.rule && /*#__PURE__*/_jsxDEV(\"small\", {\n                  className: \"text-danger fst-italic\",\n                  children: /*#__PURE__*/_jsxDEV(\"i\", {\n                    children: errors.rule\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 754,\n                    columnNumber: 79\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 754,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text-center\",\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    className: \"btn btn-primary mt-3 bg-dark\",\n                    onClick: validateRule,\n                    children: \"Create Rule\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 756,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 755,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 745,\n                columnNumber: 19\n              }, this), activeTab === \"combine\" && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: rules.length > 0 ? /*#__PURE__*/_jsxDEV(\"form\", {\n                  children: [rules.map((rule, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"form-check\",\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      className: \"form-check-input\",\n                      type: \"checkbox\",\n                      value: rule._id,\n                      onChange: () => handleRuleSelection(rule.rule)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 773,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"form-check-label\",\n                      children: rule.rule\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 779,\n                      columnNumber: 27\n                    }, this)]\n                  }, index, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 772,\n                    columnNumber: 25\n                  }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"text-center\",\n                    children: /*#__PURE__*/_jsxDEV(\"button\", {\n                      type: \"button\",\n                      className: \"btn btn-primary mt-3\",\n                      onClick: handleCombineRules,\n                      children: \"Combine Selected Rules\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 786,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 785,\n                    columnNumber: 24\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 770,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"No rules available. Click the button to fetch rules.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 796,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 768,\n                columnNumber: 19\n              }, this), activeTab === \"evaluate\" && /*#__PURE__*/_jsxDEV(\"form\", {\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mb-3\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"form-label\",\n                    children: \"Age\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 804,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"number\",\n                    className: `form-control ${errors.age ? \"is-invalid\" : \"\"}`,\n                    value: age,\n                    onChange: e => setAge(e.target.value),\n                    style: {\n                      borderColor: errors.age ? \"red\" : \"\"\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 805,\n                    columnNumber: 23\n                  }, this), errors.age && /*#__PURE__*/_jsxDEV(\"small\", {\n                    className: \"text-danger fst-italic\",\n                    children: /*#__PURE__*/_jsxDEV(\"i\", {\n                      children: errors.age\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 812,\n                      columnNumber: 80\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 812,\n                    columnNumber: 38\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 803,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mb-3\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"form-label\",\n                    children: \"Department\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 815,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"text\",\n                    className: `form-control ${errors.department ? \"is-invalid\" : \"\"}`,\n                    value: department,\n                    onChange: e => setDepartment(e.target.value),\n                    style: {\n                      borderColor: errors.department ? \"red\" : \"\"\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 816,\n                    columnNumber: 23\n                  }, this), errors.department && /*#__PURE__*/_jsxDEV(\"small\", {\n                    className: \"text-danger fst-italic\",\n                    children: /*#__PURE__*/_jsxDEV(\"i\", {\n                      children: errors.department\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 823,\n                      columnNumber: 87\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 823,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 814,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mb-3\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"form-label\",\n                    children: \"Salary\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 826,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"number\",\n                    className: `form-control ${errors.salary ? \"is-invalid\" : \"\"}`,\n                    value: salary,\n                    onChange: e => setSalary(e.target.value),\n                    style: {\n                      borderColor: errors.salary ? \"red\" : \"\"\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 827,\n                    columnNumber: 23\n                  }, this), errors.salary && /*#__PURE__*/_jsxDEV(\"small\", {\n                    className: \"text-danger fst-italic\",\n                    children: /*#__PURE__*/_jsxDEV(\"i\", {\n                      children: errors.salary\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 834,\n                      columnNumber: 83\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 834,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 825,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mb-3\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"form-label\",\n                    children: \"Experience\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 837,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"number\",\n                    className: `form-control ${errors.experience ? \"is-invalid\" : \"\"}`,\n                    value: experience,\n                    onChange: e => setExperience(e.target.value),\n                    style: {\n                      borderColor: errors.experience ? \"red\" : \"\"\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 838,\n                    columnNumber: 23\n                  }, this), errors.experience && /*#__PURE__*/_jsxDEV(\"small\", {\n                    className: \"text-danger fst-italic\",\n                    children: /*#__PURE__*/_jsxDEV(\"i\", {\n                      children: errors.experience\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 845,\n                      columnNumber: 87\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 845,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 836,\n                  columnNumber: 21\n                }, this), errors.selectedRule && /*#__PURE__*/_jsxDEV(\"small\", {\n                  className: \"text-danger fst-italic\",\n                  children: /*#__PURE__*/_jsxDEV(\"i\", {\n                    children: errors.selectedRule\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 847,\n                    columnNumber: 87\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 847,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text-center\",\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    className: \"btn btn-primary mt-3 bg-dark\",\n                    onClick: validateEvaluation,\n                    children: \"Evaluate\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 849,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 848,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 802,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 743,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-lg-3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 860,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 741,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 732,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 731,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 698,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 697,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"5k2qTmworkTW5AZBayX0y0pdkGY=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","Dashboard","_s","activeTab","setActiveTab","rules","setRules","selectedRules","setSelectedRules","rule","setRule","age","setAge","department","setDepartment","salary","setSalary","experience","setExperience","errors","setErrors","selectedRule","setSelectedRule","fetchRules","fetch","then","response","json","rulesArray","catch","error","console","handleRuleSelection","handleCombineRules","log","alert","validateRule","valid","newErrors","trim","length","test","submitRule","url","newRule","postdata","headers","method","body","JSON","stringify","data","validateEvaluation","isNaN","submitEvaluation","evaluationData","result","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","placeholder","value","onChange","e","target","rows","style","borderColor","type","map","index","_id","_c","$RefreshReg$"],"sources":["C:/Users/ashut/Desktop/feedback_portal - Copy/reactapp/src/Dashboard.js"],"sourcesContent":["\r\n// import { useState } from \"react\";\r\n\r\n// const Dashboard = () => {\r\n//   const [activeTab, setActiveTab] = useState(\"create\");\r\n//   const [rules, setRules] = useState([]);\r\n//   const [selectedRules, setSelectedRules] = useState([]);\r\n//   const [rule, setRule] = useState(\"\");\r\n//   const [error, setError] = useState(\"\");\r\n\r\n//   const fetchRules = () => {\r\n//     fetch(\"http://localhost:5556/getRules\")\r\n//       .then((response) => response.json())\r\n//       .then((rulesArray) => {\r\n//         setRules(rulesArray);\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(\"Error fetching rules:\", error);\r\n//       });\r\n//   };\r\n\r\n//   const handleRuleSelection = (rule) => {\r\n//     if (selectedRules.includes(rule)) {\r\n//       setSelectedRules(selectedRules.filter((r) => r !== rule));\r\n//     } else {\r\n//       setSelectedRules([...selectedRules, rule]);\r\n//     }\r\n//   };\r\n\r\n//   const handleCombineRules = () => {\r\n//     console.log(\"Combining rules:\", selectedRules);\r\n//     alert(\"Rules combined successfully!\");\r\n//   };\r\n\r\n//   const validateRule = () => {\r\n//     let valid = true;\r\n//     let errorMessage = \"\";\r\n\r\n//     if (rule.trim() === \"\") {\r\n//       valid = false;\r\n//       errorMessage = \"Rule cannot be empty.\";\r\n//     } else if (rule.length < 50) {\r\n//       valid = false;\r\n//       errorMessage = \"Rule must be at least 50 characters long.\";\r\n//     } else if (!/AND|OR/.test(rule)) {\r\n//       valid = false;\r\n//       errorMessage = \"Rule must contain at least one 'AND' or 'OR' operator.\";\r\n//     }\r\n\r\n//     if (!valid) {\r\n//       setError(errorMessage);\r\n//     } else {\r\n//       setError(\"\");\r\n//       submitRule();\r\n//     }\r\n//   };\r\n\r\n//   const submitRule = () => {\r\n//     const url = \"http://localhost:5556/submitRule\";\r\n//     const newRule = {\r\n//       rule: rule,\r\n//     };\r\n\r\n//     const postdata = {\r\n//       headers: { \"Content-type\": \"application/json\" },\r\n//       method: \"POST\",\r\n//       body: JSON.stringify(newRule),\r\n//     };\r\n\r\n//     fetch(url, postdata)\r\n//       .then((response) => response.json())\r\n//       .then((data) => {\r\n//         alert(\"Rule Added Successfully!\");\r\n//         setRule(\"\");\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(\"Error submitting rule:\", error);\r\n//       });\r\n//   };\r\n\r\n//   return (\r\n//     <section>\r\n//       <div className=\"container\">\r\n//         <div className=\"row mt-5\">\r\n//           <div className=\"col-lg-12 text-center fs-1 fw-bold text-dark\">\r\n//             Rules & Eligibility\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"row\">\r\n//           <div className=\"col-lg-12 p-5 text-center\">\r\n//             <div className=\"btn-group\">\r\n//               <button\r\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"create\" ? \"active\" : \"\"}`}\r\n//                 onClick={() => setActiveTab(\"create\")}\r\n//               >\r\n//                 Create Rule\r\n//               </button>\r\n//               <button\r\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"combine\" ? \"active\" : \"\"}`}\r\n//                 onClick={() => {\r\n//                   setActiveTab(\"combine\");\r\n//                   fetchRules();\r\n//                 }}\r\n//               >\r\n//                 Combine Rules\r\n//               </button>\r\n//               <button\r\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"evaluate\" ? \"active\" : \"\"}`}\r\n//                 onClick={() => setActiveTab(\"evaluate\")}\r\n//               >\r\n//                 Evaluate Rules\r\n//               </button>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"row mb-5\">\r\n//           <div className=\"container p-5 feedback-box\">\r\n//             <div className=\"row\">\r\n//               <h3 className=\"text-center\">\r\n//                 {activeTab === \"create\" && \"Create Rule\"}\r\n//                 {activeTab === \"combine\" && \"Combine Rules\"}\r\n//                 {activeTab === \"evaluate\" && \"Evaluate Rules\"}\r\n//               </h3>\r\n//             </div>\r\n\r\n//             <div className=\"row\">\r\n//               <div className=\"col-lg-3\"></div>\r\n//               <div className=\"col-lg-6\">\r\n//                 {activeTab === \"create\" && (\r\n//                   <form>\r\n//                     <textarea\r\n//                       className={`form-control  ${error ? \"is-invalid\" : \"\"}`}\r\n//                       placeholder=\"Enter Rule\"\r\n//                       value={rule}\r\n//                       onChange={(e) => setRule(e.target.value)}\r\n//                       style={{ borderColor: error ? \"red\" : \"\" }}\r\n//                     ></textarea>\r\n//                     {error && <small className=\"text-danger fst-italic bg-3\"><i>{error}</i></small>}\r\n//                     <div className='text-center'>\r\n//                     <button\r\n//                       type=\"button\"\r\n//                       className=\"btn btn-primary mt-3 bg-dark\"\r\n//                       onClick={validateRule}\r\n//                     >\r\n//                       Create Rule\r\n//                     </button>\r\n//                     </div>\r\n//                   </form>\r\n//                 )}\r\n\r\n//                 {activeTab === \"combine\" && (\r\n//                   <div>\r\n//                     {rules.length > 0 ? (\r\n//                       <form>\r\n//                         {rules.map((rule, index) => (\r\n//                           <div key={index} className=\"form-check\">\r\n//                             <input\r\n//                               className=\"form-check-input\"\r\n//                               type=\"checkbox\"\r\n//                               value={rule}\r\n//                               onChange={() => handleRuleSelection(rule)}\r\n//                             />\r\n//                             <label className=\"form-check-label\">\r\n//                               {rule}\r\n//                             </label>\r\n//                           </div>\r\n//                         ))}\r\n//                         <button\r\n//                           type=\"button\"\r\n//                           className=\"btn btn-primary mt-3\"\r\n//                           onClick={handleCombineRules}\r\n//                         >\r\n//                           Combine Selected Rules\r\n//                         </button>\r\n//                       </form>\r\n//                     ) : (\r\n//                       <p>No rules available. Click the button to fetch rules.</p>\r\n//                     )}\r\n//                   </div>\r\n//                 )}\r\n\r\n//                 {activeTab === \"evaluate\" && (\r\n//                   <form>\r\n//                     <textarea className=\"form-control mb-3\" placeholder=\"Enter Data to Evaluate\"></textarea>\r\n//                     <button type=\"submit\" className=\"btn btn-primary\">Evaluate Rule</button>\r\n//                   </form>\r\n//                 )}\r\n//               </div>\r\n//               <div className=\"col-lg-3\"></div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </section>\r\n//   );\r\n// };\r\n\r\n// export default Dashboard;\r\n\r\n\r\n// import { useState, useEffect } from \"react\";\r\n\r\n// const Dashboard = () => {\r\n//   const [activeTab, setActiveTab] = useState(\"create\");\r\n//   const [rules, setRules] = useState([]);\r\n//   const [selectedRules, setSelectedRules] = useState([]);\r\n//   const [selectedRule, setSelectedRule] = useState(\"\");\r\n//   const [rule, setRule] = useState(\"\");\r\n//   const [age, setAge] = useState(\"\");\r\n//   const [department, setDepartment] = useState(\"\");\r\n//   const [salary, setSalary] = useState(\"\");\r\n//   const [experience, setExperience] = useState(\"\");\r\n//   const [error, setError] = useState(\"\");\r\n//   const [output, setOutput] = useState(\"\");\r\n\r\n//   const fetchRules = () => {\r\n//     fetch(\"http://localhost:5556/getRules\")\r\n//       .then((response) => response.json())\r\n//       .then((rulesArray) => {\r\n//         setRules(rulesArray);\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(\"Error fetching rules:\", error);\r\n//       });\r\n//   };\r\n\r\n//   const handleRuleSelection = (rule) => {\r\n//     if (selectedRules.includes(rule)) {\r\n//       setSelectedRules(selectedRules.filter((r) => r !== rule));\r\n//     } else {\r\n//       setSelectedRules([...selectedRules, rule]);\r\n//     }\r\n//   };\r\n\r\n//   const handleCombineRules = () => {\r\n//     console.log(\"Combining rules:\", selectedRules);\r\n//     alert(\"Rules combined successfully!\");\r\n//   };\r\n\r\n//   const validateRule = () => {\r\n//     let valid = true;\r\n//     let errorMessage = \"\";\r\n\r\n//     if (rule.trim() === \"\") {\r\n//       valid = false;\r\n//       errorMessage = \"Rule cannot be empty.\";\r\n//     } else if (rule.length < 50) {\r\n//       valid = false;\r\n//       errorMessage = \"Rule must be at least 50 characters long.\";\r\n//     } else if (!/AND|OR/.test(rule)) {\r\n//       valid = false;\r\n//       errorMessage = \"Rule must contain at least one 'AND' or 'OR' operator.\";\r\n//     }\r\n\r\n//     if (!valid) {\r\n//       setError(errorMessage);\r\n//     } else {\r\n//       setError(\"\");\r\n//       submitRule();\r\n//     }\r\n//   };\r\n\r\n//   const submitRule = () => {\r\n//     const url = \"http://localhost:5556/submitRule\";\r\n//     const newRule = { rule };\r\n\r\n//     const postdata = {\r\n//       headers: { \"Content-type\": \"application/json\" },\r\n//       method: \"POST\",\r\n//       body: JSON.stringify(newRule),\r\n//     };\r\n\r\n//     fetch(url, postdata)\r\n//       .then((response) => response.json())\r\n//       .then((data) => {\r\n//         alert(\"Rule Added Successfully!\");\r\n//         setRule(\"\");\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(\"Error submitting rule:\", error);\r\n//       });\r\n//   };\r\n\r\n//   const handleEvaluate = () => {\r\n//     let hasError = false;\r\n\r\n//     if (!age || isNaN(age)) {\r\n//       setError(\"Age must be a valid number.\");\r\n//       hasError = true;\r\n//     } else if (!department) {\r\n//       setError(\"Department is required.\");\r\n//       hasError = true;\r\n//     } else if (!salary || isNaN(salary)) {\r\n//       setError(\"Salary must be a valid number.\");\r\n//       hasError = true;\r\n//     } else if (!experience || isNaN(experience)) {\r\n//       setError(\"Experience must be a valid number.\");\r\n//       hasError = true;\r\n//     } else if (!selectedRule) {\r\n//       setError(\"Please select a rule to evaluate.\");\r\n//       hasError = true;\r\n//     } else {\r\n//       setError(\"\");\r\n//     }\r\n\r\n//     if (!hasError) {\r\n//       const data = { age, department, salary, experience, rule: selectedRule };\r\n//       fetch(\"http://localhost:5556/evaluateRule\", {\r\n//         method: \"POST\",\r\n//         headers: { \"Content-Type\": \"application/json\" },\r\n//         body: JSON.stringify(data),\r\n//       })\r\n//         .then((response) => response.json())\r\n//         .then((result) => {\r\n//           setOutput(result.isEligible ? \"True (User is eligible)\" : \"False (User is not eligible)\");\r\n//         })\r\n//         .catch((error) => {\r\n//           console.error(\"Error evaluating rule:\", error);\r\n//           setOutput(\"Error evaluating rule.\");\r\n//         });\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     if (activeTab === \"evaluate\") {\r\n//       fetchRules();\r\n//     }\r\n//   }, [activeTab]);\r\n\r\n//   return (\r\n//     <section>\r\n//       <div className=\"container\">\r\n//         <div className=\"row mt-5\">\r\n//           <div className=\"col-lg-12 text-center fs-1 fw-bold text-dark\">\r\n//             Rules & Eligibility\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"row\">\r\n//           <div className=\"col-lg-12 p-5 text-center\">\r\n//             <div className=\"btn-group\">\r\n//               <button\r\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"create\" ? \"active\" : \"\"}`}\r\n//                 onClick={() => setActiveTab(\"create\")}\r\n//               >\r\n//                 Create Rule\r\n//               </button>\r\n//               <button\r\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"combine\" ? \"active\" : \"\"}`}\r\n//                 onClick={() => {\r\n//                   setActiveTab(\"combine\");\r\n//                   fetchRules();\r\n//                 }}\r\n//               >\r\n//                 Combine Rules\r\n//               </button>\r\n//               <button\r\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"evaluate\" ? \"active\" : \"\"}`}\r\n//                 onClick={() => {\r\n//                   setActiveTab(\"evaluate\");\r\n//                   fetchRules();\r\n//                 }}\r\n//               >\r\n//                 Evaluate Rules\r\n//               </button>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"row mb-5\">\r\n//           <div className=\"container p-5 feedback-box\">\r\n//             <div className=\"row\">\r\n//               <h3 className=\"text-center\">\r\n//                 {activeTab === \"create\" && \"Create Rule\"}\r\n//                 {activeTab === \"combine\" && \"Combine Rules\"}\r\n//                 {activeTab === \"evaluate\" && \"Evaluate Rules\"}\r\n//               </h3>\r\n//             </div>\r\n\r\n//             <div className=\"row\">\r\n//               <div className=\"col-lg-3\"></div>\r\n//               <div className=\"col-lg-6\">\r\n//                 {activeTab === \"create\" && (\r\n//                   <form>\r\n//                     <textarea\r\n//                       className={`form-control  ${error ? \"is-invalid\" : \"\"}`}\r\n//                       placeholder=\"Enter Rule\"\r\n//                       value={rule}\r\n//                       onChange={(e) => setRule(e.target.value)}\r\n//                       style={{ borderColor: error ? \"red\" : \"\" }}\r\n//                     ></textarea>\r\n//                     {error && <small className=\"text-danger fst-italic bg-3\"><i>{error}</i></small>}\r\n//                     <div className='text-center'>\r\n//                       <button\r\n//                         type=\"button\"\r\n//                         className=\"btn btn-primary mt-3 bg-dark\"\r\n//                         onClick={validateRule}\r\n//                       >\r\n//                         Create Rule\r\n//                       </button>\r\n//                     </div>\r\n//                   </form>\r\n//                 )}\r\n\r\n//                 {activeTab === \"combine\" && (\r\n//                   <div>\r\n//                     {rules.length > 0 ? (\r\n//                       <form>\r\n//                         {rules.map((rule, index) => (\r\n//                           <div key={index} className=\"form-check\">\r\n//                             <input\r\n//                               className=\"form-check-input\"\r\n//                               type=\"checkbox\"\r\n//                               value={rule}\r\n//                               onChange={() => handleRuleSelection(rule)}\r\n//                             />\r\n//                             <label className=\"form-check-label\">\r\n//                               {rule}\r\n//                             </label>\r\n//                           </div>\r\n//                         ))}\r\n//                         <button\r\n//                           type=\"button\"\r\n//                           className=\"btn btn-primary mt-3\"\r\n//                           onClick={handleCombineRules}\r\n//                         >\r\n//                           Combine Selected Rules\r\n//                         </button>\r\n//                       </form>\r\n//                     ) : (\r\n//                       <p>No rules available. Click the button to fetch rules.</p>\r\n//                     )}\r\n//                   </div>\r\n//                 )}\r\n\r\n//                 {activeTab === \"evaluate\" && (\r\n//                   <form>\r\n//                     {rules.length > 0 ? (\r\n//                       <div>\r\n//                         {rules.map((rule, index) => (\r\n//                           <div key={index} className=\"form-check\">\r\n//                             <input\r\n//                               className=\"form-check-input\"\r\n//                               type=\"radio\"\r\n//                               name=\"rule\"\r\n//                               value={rule}\r\n//                               onChange={() => setSelectedRule(rule)}\r\n//                             />\r\n//                             <label className=\"form-check-label\">\r\n//                               {rule}\r\n//                             </label>\r\n//                           </div>\r\n//                         ))}\r\n//                       </div>\r\n//                     ) : (\r\n//                       <p>No rules available. Click the button to fetch rules.</p>\r\n//                     )}\r\n\r\n//                     <div className=\"form-group mb-3\">\r\n//                       <label>Age:</label>\r\n//                       <input\r\n//                         type=\"number\"\r\n//                         className=\"form-control\"\r\n//                         value={age}\r\n//                         onChange={(e) => setAge(e.target.value)}\r\n//                         style={{ borderColor: error && !age ? \"red\" : \"\" }}\r\n//                       />\r\n//                     </div>\r\n//                     <div className=\"form-group mb-3\">\r\n//                       <label>Department:</label>\r\n//                       <input\r\n//                         type=\"text\"\r\n//                         className=\"form-control\"\r\n//                         value={department}\r\n//                         onChange={(e) => setDepartment(e.target.value)}\r\n//                         style={{ borderColor: error && !department ? \"red\" : \"\" }}\r\n//                       />\r\n//                     </div>\r\n//                     <div className=\"form-group mb-3\">\r\n//                       <label>Salary:</label>\r\n//                       <input\r\n//                         type=\"number\"\r\n//                         className=\"form-control\"\r\n//                         value={salary}\r\n//                         onChange={(e) => setSalary(e.target.value)}\r\n//                         style={{ borderColor: error && !salary ? \"red\" : \"\" }}\r\n//                       />\r\n//                     </div>\r\n//                     <div className=\"form-group mb-3\">\r\n//                       <label>Experience (Years):</label>\r\n//                       <input\r\n//                         type=\"number\"\r\n//                         className=\"form-control\"\r\n//                         value={experience}\r\n//                         onChange={(e) => setExperience(e.target.value)}\r\n//                         style={{ borderColor: error && !experience ? \"red\" : \"\" }}\r\n//                       />\r\n//                     </div>\r\n\r\n//                     {error && <small className=\"text-danger fst-italic\"><i>{error}</i></small>}\r\n\r\n//                     <div className=\"text-center\">\r\n//                       <button\r\n//                         type=\"button\"\r\n//                         className=\"btn btn-primary mt-3 bg-dark\"\r\n//                         onClick={handleEvaluate}\r\n//                       >\r\n//                         Evaluate Rule\r\n//                       </button>\r\n//                     </div>\r\n\r\n//                     {output && (\r\n//                       <div className=\"alert alert-info mt-3\" role=\"alert\">\r\n//                         <strong>Evaluation Result:</strong> {output}\r\n//                       </div>\r\n//                     )}\r\n//                   </form>\r\n//                 )}\r\n//               </div>\r\n//               <div className=\"col-lg-3\"></div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </section>\r\n//   );\r\n// };\r\n\r\n// export default Dashboard;\r\n\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\nconst Dashboard = () => {\r\n  const [activeTab, setActiveTab] = useState(\"create\");\r\n  const [rules, setRules] = useState([]);\r\n  const [selectedRules, setSelectedRules] = useState([]);\r\n  const [rule, setRule] = useState(\"\");\r\n  const [age, setAge] = useState(\"\");\r\n  const [department, setDepartment] = useState(\"\");\r\n  const [salary, setSalary] = useState(\"\");\r\n  const [experience, setExperience] = useState(\"\");\r\n  const [errors, setErrors] = useState({\r\n    rule: \"\",\r\n    age: \"\",\r\n    department: \"\",\r\n    salary: \"\",\r\n    experience: \"\",\r\n    selectedRule: \"\",\r\n  });\r\n  const [selectedRule, setSelectedRule] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (activeTab === \"evaluate\") {\r\n      fetchRules();\r\n    }\r\n  }, [activeTab]);\r\n\r\n  const fetchRules = () => {\r\n    fetch(\"http://localhost:5556/rules\")\r\n      .then((response) => response.json())\r\n      .then((rulesArray) => {\r\n        setRules(rulesArray);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching rules:\", error);\r\n      });\r\n  };\r\n\r\n  const handleRuleSelection = (rule) => {\r\n    setSelectedRule(rule);\r\n  };\r\n\r\n  const handleCombineRules = () => {\r\n    console.log(\"Combining rules:\", selectedRules);\r\n    alert(\"Rules combined successfully!\");\r\n  };\r\n\r\n  const validateRule = () => {\r\n    let valid = true;\r\n    let newErrors = { ...errors };\r\n\r\n    if (rule.trim() === \"\") {\r\n      valid = false;\r\n      newErrors.rule = \"Rule cannot be empty.\";\r\n    } else if (rule.length < 50) {\r\n      valid = false;\r\n      newErrors.rule = \"Rule must be at least 50 characters long.\";\r\n    } else if (!/AND|OR/.test(rule)) {\r\n      valid = false;\r\n      newErrors.rule = \"Rule must contain at least one 'AND' or 'OR' operator.\";\r\n    } else {\r\n      newErrors.rule = \"\";\r\n    }\r\n\r\n    setErrors(newErrors);\r\n\r\n    if (valid) {\r\n      submitRule();\r\n    }\r\n  };\r\n\r\n  const submitRule = () => {\r\n    const url = \"http://localhost:5556/rules\";\r\n    const newRule = {\r\n      rule: rule,\r\n    };\r\n\r\n    const postdata = {\r\n      headers: { \"Content-type\": \"application/json\" },\r\n      method: \"POST\",\r\n      body: JSON.stringify(newRule),\r\n    };\r\n\r\n    fetch(url, postdata)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        alert(\"Rule Added Successfully!\");\r\n        setRule(\"\");\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error submitting rule:\", error);\r\n      });\r\n  };\r\n\r\n  const validateEvaluation = () => {\r\n    let valid = true;\r\n    let newErrors = { ...errors };\r\n\r\n    if (age.trim() === \"\" || isNaN(age)) {\r\n      valid = false;\r\n      newErrors.age = \"Age must be a number and cannot be empty.\";\r\n    } else {\r\n      newErrors.age = \"\";\r\n    }\r\n\r\n    if (department.trim() === \"\") {\r\n      valid = false;\r\n      newErrors.department = \"Department cannot be empty.\";\r\n    } else {\r\n      newErrors.department = \"\";\r\n    }\r\n\r\n    if (salary.trim() === \"\" || isNaN(salary)) {\r\n      valid = false;\r\n      newErrors.salary = \"Salary must be a number and cannot be empty.\";\r\n    } else {\r\n      newErrors.salary = \"\";\r\n    }\r\n\r\n    if (experience.trim() === \"\" || isNaN(experience)) {\r\n      valid = false;\r\n      newErrors.experience = \"Experience must be a number and cannot be empty.\";\r\n    } else {\r\n      newErrors.experience = \"\";\r\n    }\r\n\r\n    if (!selectedRule) {\r\n      valid = false;\r\n      newErrors.selectedRule = \"Please select a rule.\";\r\n    } else {\r\n      newErrors.selectedRule = \"\";\r\n    }\r\n\r\n    setErrors(newErrors);\r\n\r\n    if (valid) {\r\n      submitEvaluation();\r\n    }\r\n  };\r\n\r\n  const submitEvaluation = () => {\r\n    const url = \"http://localhost:5556/evaluateRule\";\r\n    const evaluationData = {\r\n      age,\r\n      department,\r\n      salary,\r\n      experience,\r\n      rule: selectedRule,\r\n    };\r\n\r\n    const postdata = {\r\n      headers: { \"Content-type\": \"application/json\" },\r\n      method: \"POST\",\r\n      body: JSON.stringify(evaluationData),\r\n    };\r\n\r\n    fetch(url, postdata)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        alert(`Evaluation Result: ${data.result ? \"True\" : \"False\"}`);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error evaluating rule:\", error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <section>\r\n      <div className=\"container\">\r\n        <div className=\"row mt-5\">\r\n          <div className=\"col-lg-12 text-center fs-1 fw-bold text-dark\">\r\n            Rules & Eligibility\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col-lg-12 p-5 text-center\">\r\n            <div className=\"btn-group\">\r\n              <button\r\n                className={`btn btn-outline-dark fw-bold ${activeTab === \"create\" ? \"active\" : \"\"}`}\r\n                onClick={() => setActiveTab(\"create\")}\r\n              >\r\n                Create Rule\r\n              </button>\r\n              <button\r\n                className={`btn btn-outline-dark fw-bold ${activeTab === \"combine\" ? \"active\" : \"\"}`}\r\n                onClick={() => {\r\n                  setActiveTab(\"combine\");\r\n                  fetchRules();\r\n                }}\r\n              >\r\n                Combine Rules\r\n              </button>\r\n              <button\r\n                className={`btn btn-outline-dark fw-bold ${activeTab === \"evaluate\" ? \"active\" : \"\"}`}\r\n                onClick={() => setActiveTab(\"evaluate\")}\r\n              >\r\n                Evaluate Rules\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"row mb-5\">\r\n          <div className=\"container p-5 feedback-box\">\r\n            <div className=\"row\">\r\n              <h3 className=\"text-center\">\r\n                {activeTab === \"create\" && \"Create Rule\"}\r\n                {activeTab === \"combine\" && \"Combine Rules\"}\r\n                {activeTab === \"evaluate\" && \"Evaluate Rules\"}\r\n              </h3>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n              <div className=\"col-lg-3\"></div>\r\n              <div className=\"col-lg-6\">\r\n                {activeTab === \"create\" && (\r\n                  <form>\r\n                    <textarea\r\n                      className={`form-control mb-3 ${errors.rule ? \"is-invalid\" : \"\"}`}\r\n                      placeholder=\"Enter Rule\"\r\n                      value={rule}\r\n                      onChange={(e) => setRule(e.target.value)}\r\n                      rows={8}\r\n                      style={{ borderColor: errors.rule ? \"red\" : \"\" }}\r\n                    ></textarea>\r\n                    {errors.rule && <small className=\"text-danger fst-italic\"><i>{errors.rule}</i></small>}\r\n                    <div className='text-center'>\r\n                      <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-primary mt-3 bg-dark\"\r\n                        onClick={validateRule}\r\n                      >\r\n                        Create Rule\r\n                      </button>\r\n                    </div>\r\n                  </form>\r\n                )}\r\n\r\n                {activeTab === \"combine\" && (\r\n                  <div>\r\n                    {rules.length > 0 ? (\r\n                      <form>\r\n                        {rules.map((rule, index) => (\r\n                        <div key={index} className=\"form-check\">\r\n                          <input\r\n                            className=\"form-check-input\"\r\n                            type=\"checkbox\"\r\n                            value={rule._id}\r\n                            onChange={() => handleRuleSelection(rule.rule)}\r\n                          />\r\n                          <label className=\"form-check-label\">\r\n                            {rule.rule}\r\n                          </label>\r\n                        </div>\r\n                      ))}\r\n\r\n                       <div className='text-center'>\r\n                        <button\r\n                          type=\"button\"\r\n                          className=\"btn btn-primary mt-3\"\r\n                          onClick={handleCombineRules}\r\n                        >\r\n                          Combine Selected Rules\r\n                        </button>\r\n                        </div>\r\n                      </form>\r\n                    ) : (\r\n                      <p>No rules available. Click the button to fetch rules.</p>\r\n                    )}\r\n                  </div>\r\n                )}\r\n\r\n                {activeTab === \"evaluate\" && (\r\n                  <form>\r\n                    <div className=\"mb-3\">\r\n                      <label className=\"form-label\">Age</label>\r\n                      <input\r\n                        type=\"number\"\r\n                        className={`form-control ${errors.age ? \"is-invalid\" : \"\"}`}\r\n                        value={age}\r\n                        onChange={(e) => setAge(e.target.value)}\r\n                        style={{ borderColor: errors.age ? \"red\" : \"\" }}\r\n                      />\r\n                      {errors.age && <small className=\"text-danger fst-italic\"><i>{errors.age}</i></small>}\r\n                    </div>\r\n                    <div className=\"mb-3\">\r\n                      <label className=\"form-label\">Department</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className={`form-control ${errors.department ? \"is-invalid\" : \"\"}`}\r\n                        value={department}\r\n                        onChange={(e) => setDepartment(e.target.value)}\r\n                        style={{ borderColor: errors.department ? \"red\" : \"\" }}\r\n                      />\r\n                      {errors.department && <small className=\"text-danger fst-italic\"><i>{errors.department}</i></small>}\r\n                    </div>\r\n                    <div className=\"mb-3\">\r\n                      <label className=\"form-label\">Salary</label>\r\n                      <input\r\n                        type=\"number\"\r\n                        className={`form-control ${errors.salary ? \"is-invalid\" : \"\"}`}\r\n                        value={salary}\r\n                        onChange={(e) => setSalary(e.target.value)}\r\n                        style={{ borderColor: errors.salary ? \"red\" : \"\" }}\r\n                      />\r\n                      {errors.salary && <small className=\"text-danger fst-italic\"><i>{errors.salary}</i></small>}\r\n                    </div>\r\n                    <div className=\"mb-3\">\r\n                      <label className=\"form-label\">Experience</label>\r\n                      <input\r\n                        type=\"number\"\r\n                        className={`form-control ${errors.experience ? \"is-invalid\" : \"\"}`}\r\n                        value={experience}\r\n                        onChange={(e) => setExperience(e.target.value)}\r\n                        style={{ borderColor: errors.experience ? \"red\" : \"\" }}\r\n                      />\r\n                      {errors.experience && <small className=\"text-danger fst-italic\"><i>{errors.experience}</i></small>}\r\n                    </div>\r\n                    {errors.selectedRule && <small className=\"text-danger fst-italic\"><i>{errors.selectedRule}</i></small>}\r\n                    <div className='text-center'>\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn btn-primary mt-3 bg-dark\"\r\n                      onClick={validateEvaluation}\r\n                    >\r\n                      Evaluate\r\n                    </button>\r\n                    </div>\r\n                  </form>\r\n                )}\r\n              </div>\r\n              <div className=\"col-lg-3\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}