{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ashut\\\\Desktop\\\\feedback_portal - Copy\\\\reactapp\\\\src\\\\Dashboard.js\",\n  _s = $RefreshSig$();\n// import { useState, useEffect } from \"react\";\n\n// const Dashboard = () => {\n//   const [activeTab, setActiveTab] = useState(\"create\");\n//   const [rules, setRules] = useState([]);\n//   const [selectedRules, setSelectedRules] = useState([]);\n//   const [rule, setRule] = useState(\"\");\n//   const [age, setAge] = useState(\"\");\n//   const [department, setDepartment] = useState(\"\");\n//   const [salary, setSalary] = useState(\"\");\n//   const [experience, setExperience] = useState(\"\");\n//   const [errors, setErrors] = useState({\n//     rule: \"\",\n//     age: \"\",\n//     department: \"\",\n//     salary: \"\",\n//     experience: \"\",\n//     selectedRule: \"\",\n//   });\n//   const [selectedRule, setSelectedRule] = useState(\"\");\n\n//   useEffect(() => {\n//     if (activeTab === \"evaluate\") {\n//       fetchRules();\n//     }\n//   }, [activeTab]);\n\n//   const fetchRules = () => {\n//     fetch(\"http://localhost:5556/rules\")\n//       .then((response) => response.json())\n//       .then((rulesArray) => {\n//         setRules(rulesArray);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error fetching rules:\", error);\n//       });\n//   };\n\n//   const handleRuleSelection = (rule) => {\n//     setSelectedRule(rule);\n//   };\n\n//   const handleCombineRules = () => {\n//     console.log(\"Combining rules:\", selectedRules);\n//     alert(\"Rules combined successfully!\");\n//   };\n\n//   const validateRule = () => {\n//     let valid = true;\n//     let newErrors = { ...errors };\n\n//     if (rule.trim() === \"\") {\n//       valid = false;\n//       newErrors.rule = \"Rule cannot be empty.\";\n//     } else if (rule.length < 50) {\n//       valid = false;\n//       newErrors.rule = \"Rule must be at least 50 characters long.\";\n//     } else if (!/AND|OR/.test(rule)) {\n//       valid = false;\n//       newErrors.rule = \"Rule must contain at least one 'AND' or 'OR' operator.\";\n//     } else {\n//       newErrors.rule = \"\";\n//     }\n\n//     setErrors(newErrors);\n\n//     if (valid) {\n//       submitRule();\n//     }\n//   };\n\n//   const submitRule = () => {\n//     const url = \"http://localhost:5556/rules\";\n//     const newRule = {\n//       rule: rule,\n//     };\n\n//     const postdata = {\n//       headers: { \"Content-type\": \"application/json\" },\n//       method: \"POST\",\n//       body: JSON.stringify(newRule),\n//     };\n\n//     fetch(url, postdata)\n//       .then((response) => response.json())\n//       .then((data) => {\n//         alert(\"Rule Added Successfully!\");\n//         setRule(\"\");\n//       })\n//       .catch((error) => {\n//         console.error(\"Error submitting rule:\", error);\n//       });\n//   };\n\n//   const validateEvaluation = () => {\n//     let valid = true;\n//     let newErrors = { ...errors };\n\n//     if (age.trim() === \"\" || isNaN(age)) {\n//       valid = false;\n//       newErrors.age = \"Age must be a number and cannot be empty.\";\n//     } else {\n//       newErrors.age = \"\";\n//     }\n\n//     if (department.trim() === \"\") {\n//       valid = false;\n//       newErrors.department = \"Department cannot be empty.\";\n//     } else {\n//       newErrors.department = \"\";\n//     }\n\n//     if (salary.trim() === \"\" || isNaN(salary)) {\n//       valid = false;\n//       newErrors.salary = \"Salary must be a number and cannot be empty.\";\n//     } else {\n//       newErrors.salary = \"\";\n//     }\n\n//     if (experience.trim() === \"\" || isNaN(experience)) {\n//       valid = false;\n//       newErrors.experience = \"Experience must be a number and cannot be empty.\";\n//     } else {\n//       newErrors.experience = \"\";\n//     }\n\n//     if (!selectedRule) {\n//       valid = false;\n//       newErrors.selectedRule = \"Please select a rule.\";\n//     } else {\n//       newErrors.selectedRule = \"\";\n//     }\n\n//     setErrors(newErrors);\n\n//     if (valid) {\n//       submitEvaluation();\n//     }\n//   };\n\n//   const submitEvaluation = () => {\n//     const url = \"http://localhost:5556/evaluateRule\";\n//     const evaluationData = {\n//       age,\n//       department,\n//       salary,\n//       experience,\n//       rule: selectedRule,\n//     };\n\n//     const postdata = {\n//       headers: { \"Content-type\": \"application/json\" },\n//       method: \"POST\",\n//       body: JSON.stringify(evaluationData),\n//     };\n\n//     fetch(url, postdata)\n//       .then((response) => response.json())\n//       .then((data) => {\n//         alert(`Evaluation Result: ${data.result ? \"True\" : \"False\"}`);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error evaluating rule:\", error);\n//       });\n//   };\n\n//   return (\n//     <section>\n//       <div className=\"container\">\n//         <div className=\"row mt-5\">\n//           <div className=\"col-lg-12 text-center fs-1 fw-bold text-dark\">\n//             Rules & Eligibility\n//           </div>\n//         </div>\n//         <div className=\"row\">\n//           <div className=\"col-lg-12 p-5 text-center\">\n//             <div className=\"btn-group\">\n//               <button\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"create\" ? \"active\" : \"\"}`}\n//                 onClick={() => setActiveTab(\"create\")}\n//               >\n//                 Create Rule\n//               </button>\n//               <button\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"combine\" ? \"active\" : \"\"}`}\n//                 onClick={() => {\n//                   setActiveTab(\"combine\");\n//                   fetchRules();\n//                 }}\n//               >\n//                 Combine Rules\n//               </button>\n//               <button\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"evaluate\" ? \"active\" : \"\"}`}\n//                 onClick={() => {\n//                   setActiveTab(\"evaluate\");\n//                   fetchRules();\n//                 }}\n//               >\n//                 Evaluate Rules\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//         <div className=\"row mb-5\">\n//           <div className=\"container p-5 feedback-box\">\n//             <div className=\"row\">\n//               <h3 className=\"text-center\">\n//                 {activeTab === \"create\" && \"Create Rule\"}\n//                 {activeTab === \"combine\" && \"Combine Rules\"}\n//                 {activeTab === \"evaluate\" && \"Evaluate Rules\"}\n//               </h3>\n//             </div>\n\n//             <div className=\"row\">\n//               <div className=\"col-lg-3\"></div>\n//               <div className=\"col-lg-6\">\n//                 {activeTab === \"create\" && (\n//                   <form>\n//                     <textarea\n//                       className={`form-control mb-3 ${errors.rule ? \"is-invalid\" : \"\"}`}\n//                       placeholder=\"Enter Rule\"\n//                       value={rule}\n//                       onChange={(e) => setRule(e.target.value)}\n//                       rows={8}\n//                       style={{ borderColor: errors.rule ? \"red\" : \"\" }}\n//                     ></textarea>\n//                     {errors.rule && <small className=\"text-danger fst-italic\"><i>{errors.rule}</i></small>}\n//                     <div className='text-center'>\n//                       <button\n//                         type=\"button\"\n//                         className=\"btn btn-primary mt-3 bg-dark\"\n//                         onClick={validateRule}\n//                       >\n//                         Create Rule\n//                       </button>\n//                     </div>\n//                   </form>\n//                 )}\n\n//                 {activeTab === \"combine\" && (\n//                   <div>\n//                     {rules.length > 0 ? (\n//                       <form>\n//                         {rules.map((rule, index) => (\n//                         <div key={index} className=\"form-check\">\n//                           <input\n//                             className=\"form-check-input\"\n//                             type=\"checkbox\"\n//                             value={rule._id}\n//                             onChange={() => handleRuleSelection(rule.rule)}\n//                           />\n//                           <label className=\"form-check-label\">\n//                             {rule.rule}\n//                           </label>\n//                         </div>\n//                       ))}\n\n//                        <div className='text-center'>\n//                         <button\n//                           type=\"button\"\n//                           className=\"btn btn-primary mt-3 bg-dark\"\n//                           onClick={handleCombineRules}\n//                         >\n//                           Combine Selected Rules\n//                         </button>\n//                         </div>\n//                       </form>\n//                     ) : (\n//                       <p>No rules available. Click the button to fetch rules.</p>\n//                     )}\n//                   </div>\n//                 )}\n\n//                 {activeTab === \"evaluate\" && (\n//                   <form>\n//                     <div className=\"mb-3\">\n//                       <label className=\"form-label\">Age</label>\n//                       <input\n//                         type=\"number\"\n//                         className={`form-control ${errors.age ? \"is-invalid\" : \"\"}`}\n//                         value={age}\n//                         onChange={(e) => setAge(e.target.value)}\n//                         style={{ borderColor: errors.age ? \"red\" : \"\" }}\n//                       />\n//                       {errors.age && <small className=\"text-danger fst-italic\"><i>{errors.age}</i></small>}\n//                     </div>\n//                     <div className=\"mb-3\">\n//                       <label className=\"form-label\">Department</label>\n//                       <input\n//                         type=\"text\"\n//                         className={`form-control ${errors.department ? \"is-invalid\" : \"\"}`}\n//                         value={department}\n//                         onChange={(e) => setDepartment(e.target.value)}\n//                         style={{ borderColor: errors.department ? \"red\" : \"\" }}\n//                       />\n//                       {errors.department && <small className=\"text-danger fst-italic\"><i>{errors.department}</i></small>}\n//                     </div>\n//                     <div className=\"mb-3\">\n//                       <label className=\"form-label\">Salary</label>\n//                       <input\n//                         type=\"number\"\n//                         className={`form-control ${errors.salary ? \"is-invalid\" : \"\"}`}\n//                         value={salary}\n//                         onChange={(e) => setSalary(e.target.value)}\n//                         style={{ borderColor: errors.salary ? \"red\" : \"\" }}\n//                       />\n//                       {errors.salary && <small className=\"text-danger fst-italic\"><i>{errors.salary}</i></small>}\n//                     </div>\n//                     <div className=\"mb-3\">\n//                       <label className=\"form-label\">Experience</label>\n//                       <input\n//                         type=\"number\"\n//                         className={`form-control ${errors.experience ? \"is-invalid\" : \"\"}`}\n//                         value={experience}\n//                         onChange={(e) => setExperience(e.target.value)}\n//                         style={{ borderColor: errors.experience ? \"red\" : \"\" }}\n//                       />\n//                       {errors.experience && <small className=\"text-danger fst-italic\"><i>{errors.experience}</i></small>}\n//                     </div>\n//                     {rules.length > 0 && (\n//                       <div>\n//                          <label className=\"form-label\">Select the rule by which you want to evaluate : </label>\n//                         {rules.map((rule, index) => (\n//                           <div key={index} className=\"form-check\">\n//                             <input\n//                               className=\"form-check-input\"\n//                               type=\"radio\"\n//                               value={rule._id}\n//                               checked={selectedRule === rule._id}\n//                               onChange={() => handleRuleSelection(rule._id)}\n//                             />\n//                             <label className=\"form-check-label\">\n//                               {rule.rule}\n//                             </label>\n//                           </div>\n//                         ))}\n//                         {errors.selectedRule && <small className=\"text-danger fst-italic\"><i>{errors.selectedRule}</i></small>}\n//                       </div>\n//                     )}\n//                     <div className='text-center'>\n//                       <button\n//                         type=\"button\"\n//                         className=\"btn btn-primary mt-3 bg-dark\"\n//                         onClick={validateEvaluation}\n//                       >\n//                         Evaluate\n//                       </button>\n//                     </div>\n//                   </form>\n//                 )}\n\n//               </div>\n//               <div className=\"col-lg-3\"></div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     </section>\n//   );\n// };\n\n// export default Dashboard;\n\n// import { useState, useEffect } from \"react\";\n\n// // Define the AST evaluation functions\n// const evaluateAST = (ast, data) => {\n//   if (ast.type === 'condition') {\n//     return evalCondition(ast.value, data);\n//   }\n\n//   const left = evaluateAST(ast.left, data);\n//   const right = evaluateAST(ast.right, data);\n\n//   if (ast.type === 'AND') {\n//     return left && right;\n//   } else if (ast.type === 'OR') {\n//     return left || right;\n//   }\n\n//   return false;\n// };\n\n// const evalCondition = (condition, data) => {\n//   const [field, operator, value] = condition.split(/(?<=[<>=!]=?)\\s?/);\n//   if (isNaN(value)) {\n//     return eval(`${JSON.stringify(data[field])} ${operator} ${value}`);\n//   }\n//   return eval(`${data[field]} ${operator} ${value}`);\n// };\n\n// const Dashboard = () => {\n//   const [activeTab, setActiveTab] = useState(\"create\");\n//   const [rules, setRules] = useState([]);\n//   const [selectedRules, setSelectedRules] = useState([]);\n//   const [rule, setRule] = useState(\"\");\n//   const [age, setAge] = useState(\"\");\n//   const [department, setDepartment] = useState(\"\");\n//   const [salary, setSalary] = useState(\"\");\n//   const [experience, setExperience] = useState(\"\");\n//   const [errors, setErrors] = useState({\n//     rule: \"\",\n//     age: \"\",\n//     department: \"\",\n//     salary: \"\",\n//     experience: \"\",\n//     selectedRule: \"\",\n//   });\n//   const [selectedRule, setSelectedRule] = useState(\"\");\n\n//   useEffect(() => {\n//     if (activeTab === \"evaluate\") {\n//       fetchRules();\n//     }\n//   }, [activeTab]);\n\n//   const fetchRules = () => {\n//     fetch(\"http://localhost:5556/rules\")\n//       .then((response) => response.json())\n//       .then((rulesArray) => {\n//         setRules(rulesArray);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error fetching rules:\", error);\n//       });\n//   };\n\n//   const handleRuleSelection = (rule) => {\n//     setSelectedRule(rule);\n//   };\n\n//   const handleCombineRules = () => {\n//     console.log(\"Combining rules:\", selectedRules);\n//     alert(\"Rules combined successfully!\");\n//   };\n\n//   const validateRule = () => {\n//     let valid = true;\n//     let newErrors = { ...errors };\n\n//     if (rule.trim() === \"\") {\n//       valid = false;\n//       newErrors.rule = \"Rule cannot be empty.\";\n//     } else if (rule.length < 50) {\n//       valid = false;\n//       newErrors.rule = \"Rule must be at least 50 characters long.\";\n//     } else if (!/AND|OR/.test(rule)) {\n//       valid = false;\n//       newErrors.rule = \"Rule must contain at least one 'AND' or 'OR' operator.\";\n//     } else {\n//       newErrors.rule = \"\";\n//     }\n\n//     setErrors(newErrors);\n\n//     if (valid) {\n//       submitRule();\n//     }\n//   };\n\n//   const submitRule = () => {\n//     const url = \"http://localhost:5556/rules\";\n//     const newRule = {\n//       rule: rule,\n//     };\n\n//     const postdata = {\n//       headers: { \"Content-type\": \"application/json\" },\n//       method: \"POST\",\n//       body: JSON.stringify(newRule),\n//     };\n\n//     fetch(url, postdata)\n//       .then((response) => response.json())\n//       .then((data) => {\n//         alert(\"Rule Added Successfully!\");\n//         setRule(\"\");\n//       })\n//       .catch((error) => {\n//         console.error(\"Error submitting rule:\", error);\n//       });\n//   };\n\n//   const validateEvaluation = () => {\n//     let valid = true;\n//     let newErrors = { ...errors };\n\n//     if (age.trim() === \"\" || isNaN(age)) {\n//       valid = false;\n//       newErrors.age = \"Age must be a number and cannot be empty.\";\n//     } else {\n//       newErrors.age = \"\";\n//     }\n\n//     if (department.trim() === \"\") {\n//       valid = false;\n//       newErrors.department = \"Department cannot be empty.\";\n//     } else {\n//       newErrors.department = \"\";\n//     }\n\n//     if (salary.trim() === \"\" || isNaN(salary)) {\n//       valid = false;\n//       newErrors.salary = \"Salary must be a number and cannot be empty.\";\n//     } else {\n//       newErrors.salary = \"\";\n//     }\n\n//     if (experience.trim() === \"\" || isNaN(experience)) {\n//       valid = false;\n//       newErrors.experience = \"Experience must be a number and cannot be empty.\";\n//     } else {\n//       newErrors.experience = \"\";\n//     }\n\n//     if (!selectedRule) {\n//       valid = false;\n//       newErrors.selectedRule = \"Please select a rule.\";\n//     } else {\n//       newErrors.selectedRule = \"\";\n//     }\n\n//     setErrors(newErrors);\n\n//     if (valid) {\n//       submitEvaluation();\n//     }\n//   };\n\n//   const submitEvaluation = () => {\n//     const url = \"http://localhost:5556/Rules\";\n//     const evaluationData = {\n//       age,\n//       department,\n//       salary,\n//       experience,\n//       rule: selectedRule,\n//     };\n\n//     const postdata = {\n//       headers: { \"Content-type\": \"application/json\" },\n//       method: \"POST\",\n//       body: JSON.stringify(evaluationData),\n//     };\n\n//     fetch(url, postdata)\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw new Error(`HTTP error! Status: ${response.status}`);\n//         }\n//         return response.json();\n//       })\n//       .then((data) => {\n//         const ast = data.ruleAST; // Modify according to your actual server response\n//         const result = evaluateAST(ast, evaluationData);\n//         alert(`Evaluation Result: ${result ? \"True\" : \"False\"}`);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error evaluating rule:\", error.message);\n//         alert(`An error occurred: ${error.message}`);\n//       });\n//   };\n\n//   return (\n//     <section>\n//       <div className=\"container\">\n//         <div className=\"row mt-5\">\n//           <div className=\"col-lg-12 text-center fs-1 fw-bold text-dark\">\n//             Rules & Eligibility\n//           </div>\n//         </div>\n//         <div className=\"row\">\n//           <div className=\"col-lg-12 p-5 text-center\">\n//             <div className=\"btn-group\">\n//               <button\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"create\" ? \"active\" : \"\"}`}\n//                 onClick={() => setActiveTab(\"create\")}\n//               >\n//                 Create Rule\n//               </button>\n//               <button\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"combine\" ? \"active\" : \"\"}`}\n//                 onClick={() => {\n//                   setActiveTab(\"combine\");\n//                   fetchRules();\n//                 }}\n//               >\n//                 Combine Rules\n//               </button>\n//               <button\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"evaluate\" ? \"active\" : \"\"}`}\n//                 onClick={() => {\n//                   setActiveTab(\"evaluate\");\n//                   fetchRules();\n//                 }}\n//               >\n//                 Evaluate Rules\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//         <div className=\"row mb-5\">\n//           <div className=\"container p-5 feedback-box\">\n//             <div className=\"row\">\n//               <h3 className=\"text-center\">\n//                 {activeTab === \"create\" && \"Create Rule\"}\n//                 {activeTab === \"combine\" && \"Combine Rules\"}\n//                 {activeTab === \"evaluate\" && \"Evaluate Rules\"}\n//               </h3>\n//             </div>\n\n//             <div className=\"row\">\n//               <div className=\"col-lg-3\"></div>\n//               <div className=\"col-lg-6\">\n//                 {activeTab === \"create\" && (\n//                   <form>\n//                     <textarea\n//                       className={`form-control mb-3 ${errors.rule ? \"is-invalid\" : \"\"}`}\n//                       placeholder=\"Enter Rule\"\n//                       value={rule}\n//                       onChange={(e) => setRule(e.target.value)}\n//                       rows={8}\n//                       style={{ borderColor: errors.rule ? \"red\" : \"\" }}\n//                     ></textarea>\n//                     {errors.rule && <small className=\"text-danger fst-italic\"><i>{errors.rule}</i></small>}\n//                     <div className='text-center'>\n//                       <button\n//                         type=\"button\"\n//                         className=\"btn btn-primary mt-3 bg-dark\"\n//                         onClick={validateRule}\n//                       >\n//                         Create Rule\n//                       </button>\n//                     </div>\n//                   </form>\n//                 )}\n\n//                 {activeTab === \"combine\" && (\n//                   <div>\n//                     {rules.length > 0 ? (\n//                       <form>\n//                         {rules.map((rule, index) => (\n//                           <div key={index} className=\"form-check\">\n//                             <input\n//                               className=\"form-check-input\"\n//                               type=\"checkbox\"\n//                               value={rule._id}\n//                               onChange={() => handleRuleSelection(rule.rule)}\n//                             />\n//                             <label className=\"form-check-label\">\n//                               {rule.rule}\n//                             </label>\n//                           </div>\n//                         ))}\n\n//                         <div className='text-center'>\n//                           <button\n//                             type=\"button\"\n//                             className=\"btn btn-primary mt-3 bg-dark\"\n//                             onClick={handleCombineRules}\n//                           >\n//                             Combine Selected Rules\n//                           </button>\n//                         </div>\n//                       </form>\n//                     ) : (\n//                       <p>No rules available. Click the button to fetch rules.</p>\n//                     )}\n//                   </div>\n//                 )}\n\n// {activeTab === \"evaluate\" && (\n//   <form>\n//     <div className=\"mb-3\">\n//       <label className=\"form-label\">Age</label>\n//       <input\n//         type=\"number\"\n//         className={`form-control ${errors.age ? \"is-invalid\" : \"\"}`}\n//         value={age}\n//         onChange={(e) => setAge(e.target.value)}\n//         style={{ borderColor: errors.age ? \"red\" : \"\" }}\n//       />\n//       {errors.age && <small className=\"text-danger fst-italic\"><i>{errors.age}</i></small>}\n//     </div>\n//     <div className=\"mb-3\">\n//       <label className=\"form-label\">Department</label>\n//       <input\n//         type=\"text\"\n//         className={`form-control ${errors.department ? \"is-invalid\" : \"\"}`}\n//         value={department}\n//         onChange={(e) => setDepartment(e.target.value)}\n//         style={{ borderColor: errors.department ? \"red\" : \"\" }}\n//       />\n//       {errors.department && <small className=\"text-danger fst-italic\"><i>{errors.department}</i></small>}\n//     </div>\n//     <div className=\"mb-3\">\n//       <label className=\"form-label\">Salary</label>\n//       <input\n//         type=\"number\"\n//         className={`form-control ${errors.salary ? \"is-invalid\" : \"\"}`}\n//         value={salary}\n//         onChange={(e) => setSalary(e.target.value)}\n//         style={{ borderColor: errors.salary ? \"red\" : \"\" }}\n//       />\n//       {errors.salary && <small className=\"text-danger fst-italic\"><i>{errors.salary}</i></small>}\n//     </div>\n//     <div className=\"mb-3\">\n//       <label className=\"form-label\">Experience</label>\n//       <input\n//         type=\"number\"\n//         className={`form-control ${errors.experience ? \"is-invalid\" : \"\"}`}\n//         value={experience}\n//         onChange={(e) => setExperience(e.target.value)}\n//         style={{ borderColor: errors.experience ? \"red\" : \"\" }}\n//       />\n//       {errors.experience && <small className=\"text-danger fst-italic\"><i>{errors.experience}</i></small>}\n//     </div>\n//     {rules.length > 0 && (\n//       <div>\n//         <label className=\"form-label\">Select the rule by which you want to evaluate:</label>\n//         {rules.map((rule, index) => (\n//           <div key={index} className=\"form-check\">\n//             <input\n//               className=\"form-check-input\"\n//               type=\"radio\"\n//               value={rule._id}\n//               checked={selectedRule === rule._id}\n//               onChange={() => handleRuleSelection(rule._id)}\n//             />\n//             <label className=\"form-check-label\">\n//               {rule.rule}\n//             </label>\n//           </div>\n//         ))}\n//         {errors.selectedRule && <small className=\"text-danger fst-italic\"><i>{errors.selectedRule}</i></small>}\n//       </div>\n//     )}\n//     <div className='text-center'>\n//       <button\n//         type=\"button\"\n//         className=\"btn btn-primary mt-3 bg-dark\"\n//         onClick={validateEvaluation}\n//       >\n//         Evaluate\n//       </button>\n//     </div>\n//   </form>\n// )}\n//               </div>\n//               <div className=\"col-lg-3\"></div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     </section>\n//   );\n// };\n\n// export default Dashboard;\n\nimport { useState, useEffect } from \"react\";\n\n// Define the AST evaluation functions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst evaluateAST = (ast, data) => {\n  if (ast.type === 'condition') {\n    return evalCondition(ast.value, data);\n  }\n  const left = evaluateAST(ast.left, data);\n  const right = evaluateAST(ast.right, data);\n  if (ast.type === 'AND') {\n    return left && right;\n  } else if (ast.type === 'OR') {\n    return left || right;\n  }\n  return false;\n};\nconst evalCondition = (condition, data) => {\n  const [field, operator, value] = condition.split(/(?<=[<>=!]=?)\\s?/);\n  if (isNaN(value)) {\n    return eval(`${JSON.stringify(data[field])} ${operator} ${value}`);\n  }\n  return eval(`${data[field]} ${operator} ${value}`);\n};\nconst Dashboard = () => {\n  _s();\n  const [activeTab, setActiveTab] = useState(\"create\");\n  const [rules, setRules] = useState([]);\n  const [selectedRules, setSelectedRules] = useState([]);\n  const [selectedRuleIndex, setSelectedRuleIndex] = useState(null);\n  const [rule, setRule] = useState(\"\");\n  const [age, setAge] = useState(\"\");\n  const [department, setDepartment] = useState(\"\");\n  const [salary, setSalary] = useState(\"\");\n  const [experience, setExperience] = useState(\"\");\n  const [errors, setErrors] = useState({\n    rule: \"\",\n    age: \"\",\n    department: \"\",\n    salary: \"\",\n    experience: \"\",\n    selectedRule: \"\"\n  });\n  const [selectedRule, setSelectedRule] = useState(\"\");\n  useEffect(() => {\n    if (activeTab === \"evaluate\") {\n      fetchRules();\n    }\n  }, [activeTab]);\n  const fetchRules = () => {\n    fetch(\"http://localhost:5556/rules\").then(response => response.json()).then(rulesArray => {\n      setRules(rulesArray);\n    }).catch(error => {\n      console.error(\"Error fetching rules:\", error);\n    });\n  };\n  const handleRuleSelection = index => {\n    setSelectedRuleIndex(index);\n  };\n  const handleCombineRules = () => {\n    console.log(\"Combining rules:\", selectedRules);\n    alert(\"Rules combined successfully!\");\n  };\n  const validateRule = () => {\n    let valid = true;\n    let newErrors = {\n      ...errors\n    };\n    if (rule.trim() === \"\") {\n      valid = false;\n      newErrors.rule = \"Rule cannot be empty.\";\n    } else if (rule.length < 50) {\n      valid = false;\n      newErrors.rule = \"Rule must be at least 50 characters long.\";\n    } else if (!/AND|OR/.test(rule)) {\n      valid = false;\n      newErrors.rule = \"Rule must contain at least one 'AND' or 'OR' operator.\";\n    } else {\n      newErrors.rule = \"\";\n    }\n    setErrors(newErrors);\n    if (valid) {\n      submitRule();\n    }\n  };\n  const submitRule = () => {\n    const url = \"http://localhost:5556/rules\";\n    const newRule = {\n      rule: rule\n    };\n    const postdata = {\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      method: \"POST\",\n      body: JSON.stringify(newRule)\n    };\n    fetch(url, postdata).then(response => response.json()).then(data => {\n      alert(\"Rule Added Successfully!\");\n      setRule(\"\");\n    }).catch(error => {\n      console.error(\"Error submitting rule:\", error);\n    });\n  };\n  const validateEvaluation = () => {\n    let valid = true;\n    let newErrors = {\n      ...errors\n    };\n    if (age.trim() === \"\" || isNaN(age)) {\n      valid = false;\n      newErrors.age = \"Age must be a number and cannot be empty.\";\n    } else {\n      newErrors.age = \"\";\n    }\n    if (department.trim() === \"\") {\n      valid = false;\n      newErrors.department = \"Department cannot be empty.\";\n    } else {\n      newErrors.department = \"\";\n    }\n    if (salary.trim() === \"\" || isNaN(salary)) {\n      valid = false;\n      newErrors.salary = \"Salary must be a number and cannot be empty.\";\n    } else {\n      newErrors.salary = \"\";\n    }\n    if (experience.trim() === \"\" || isNaN(experience)) {\n      valid = false;\n      newErrors.experience = \"Experience must be a number and cannot be empty.\";\n    } else {\n      newErrors.experience = \"\";\n    }\n    if (!selectedRule) {\n      valid = false;\n      newErrors.selectedRule = \"Please select a rule.\";\n    } else {\n      newErrors.selectedRule = \"\";\n    }\n    setErrors(newErrors);\n    if (valid) {\n      submitEvaluation();\n    }\n  };\n  const submitEvaluation = () => {\n    const url = \"http://localhost:5556/Rules\";\n    const evaluationData = {\n      age,\n      department,\n      salary,\n      experience,\n      rule: selectedRule\n    };\n    const postdata = {\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      method: \"POST\",\n      body: JSON.stringify(evaluationData)\n    };\n    fetch(url, postdata).then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      return response.json();\n    }).then(data => {\n      const ast = data.ruleAST; // Modify according to your actual server response\n      const result = evaluateAST(ast, evaluationData);\n      alert(`Evaluation Result: ${result ? \"True\" : \"False\"}`);\n    }).catch(error => {\n      console.error(\"Error evaluating rule:\", error.message);\n      alert(`An error occurred: ${error.message}`);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row mt-5\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-lg-12 text-center fs-1 fw-bold text-dark\",\n          children: \"Rules & Eligibility\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 975,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 974,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-lg-12 p-5 text-center\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"btn-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: `btn btn-outline-dark fw-bold ${activeTab === \"create\" ? \"active\" : \"\"}`,\n              onClick: () => setActiveTab(\"create\"),\n              children: \"Create Rule\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 982,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `btn btn-outline-dark fw-bold ${activeTab === \"combine\" ? \"active\" : \"\"}`,\n              onClick: () => {\n                setActiveTab(\"combine\");\n                fetchRules();\n              },\n              children: \"Combine Rules\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 988,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `btn btn-outline-dark fw-bold ${activeTab === \"evaluate\" ? \"active\" : \"\"}`,\n              onClick: () => {\n                setActiveTab(\"evaluate\");\n                fetchRules();\n              },\n              children: \"Evaluate Rules\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 997,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 981,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 980,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 979,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row mb-5\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container p-5 feedback-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"text-center\",\n              children: [activeTab === \"create\" && \"Create Rule\", activeTab === \"combine\" && \"Combine Rules\", activeTab === \"evaluate\" && \"Evaluate Rules\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1012,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1011,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-lg-3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1020,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-lg-6\",\n              children: [activeTab === \"create\" && /*#__PURE__*/_jsxDEV(\"form\", {\n                children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n                  className: `form-control mb-3 ${errors.rule ? \"is-invalid\" : \"\"}`,\n                  placeholder: \"Enter Rule\",\n                  value: rule,\n                  onChange: e => setRule(e.target.value),\n                  rows: 8,\n                  style: {\n                    borderColor: errors.rule ? \"red\" : \"\"\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1024,\n                  columnNumber: 21\n                }, this), errors.rule && /*#__PURE__*/_jsxDEV(\"small\", {\n                  className: \"text-danger fst-italic\",\n                  children: /*#__PURE__*/_jsxDEV(\"i\", {\n                    children: errors.rule\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1032,\n                    columnNumber: 79\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1032,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text-center\",\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    className: \"btn btn-primary mt-3\",\n                    onClick: validateRule,\n                    children: \"Submit\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1034,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1033,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1023,\n                columnNumber: 19\n              }, this), activeTab === \"combine\" && /*#__PURE__*/_jsxDEV(\"form\", {\n                children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                  children: \"Available Rules:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1047,\n                  columnNumber: 21\n                }, this), rules.map((rule, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"form-check mb-2\",\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    className: \"form-check-input\",\n                    type: \"checkbox\",\n                    checked: selectedRules.includes(rule),\n                    onChange: e => {\n                      if (e.target.checked) {\n                        setSelectedRules([...selectedRules, rule]);\n                      } else {\n                        setSelectedRules(selectedRules.filter(r => r !== rule));\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1050,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"form-check-label\",\n                    children: rule.rule\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1062,\n                    columnNumber: 25\n                  }, this)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1049,\n                  columnNumber: 23\n                }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text-center\",\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    className: \"btn btn-primary mt-3\",\n                    onClick: handleCombineRules,\n                    children: \"Combine\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1066,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1065,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1046,\n                columnNumber: 19\n              }, this), activeTab === \"evaluate\" && /*#__PURE__*/_jsxDEV(\"form\", {\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mb-3\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"form-label\",\n                    children: \"Age\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1080,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"number\",\n                    className: `form-control ${errors.age ? \"is-invalid\" : \"\"}`,\n                    value: age,\n                    onChange: e => setAge(e.target.value),\n                    style: {\n                      borderColor: errors.age ? \"red\" : \"\"\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1081,\n                    columnNumber: 23\n                  }, this), errors.age && /*#__PURE__*/_jsxDEV(\"small\", {\n                    className: \"text-danger fst-italic\",\n                    children: /*#__PURE__*/_jsxDEV(\"i\", {\n                      children: errors.age\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1088,\n                      columnNumber: 80\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1088,\n                    columnNumber: 38\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1079,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mb-3\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"form-label\",\n                    children: \"Department\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1091,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"text\",\n                    className: `form-control ${errors.department ? \"is-invalid\" : \"\"}`,\n                    value: department,\n                    onChange: e => setDepartment(e.target.value),\n                    style: {\n                      borderColor: errors.department ? \"red\" : \"\"\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1092,\n                    columnNumber: 23\n                  }, this), errors.department && /*#__PURE__*/_jsxDEV(\"small\", {\n                    className: \"text-danger fst-italic\",\n                    children: /*#__PURE__*/_jsxDEV(\"i\", {\n                      children: errors.department\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1099,\n                      columnNumber: 87\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1099,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1090,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mb-3\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"form-label\",\n                    children: \"Salary\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1102,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"number\",\n                    className: `form-control ${errors.salary ? \"is-invalid\" : \"\"}`,\n                    value: salary,\n                    onChange: e => setSalary(e.target.value),\n                    style: {\n                      borderColor: errors.salary ? \"red\" : \"\"\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1103,\n                    columnNumber: 23\n                  }, this), errors.salary && /*#__PURE__*/_jsxDEV(\"small\", {\n                    className: \"text-danger fst-italic\",\n                    children: /*#__PURE__*/_jsxDEV(\"i\", {\n                      children: errors.salary\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1110,\n                      columnNumber: 83\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1110,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1101,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mb-3\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"form-label\",\n                    children: \"Experience\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1113,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"number\",\n                    className: `form-control ${errors.experience ? \"is-invalid\" : \"\"}`,\n                    value: experience,\n                    onChange: e => setExperience(e.target.value),\n                    style: {\n                      borderColor: errors.experience ? \"red\" : \"\"\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1114,\n                    columnNumber: 23\n                  }, this), errors.experience && /*#__PURE__*/_jsxDEV(\"small\", {\n                    className: \"text-danger fst-italic\",\n                    children: /*#__PURE__*/_jsxDEV(\"i\", {\n                      children: errors.experience\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1121,\n                      columnNumber: 87\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1121,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1112,\n                  columnNumber: 21\n                }, this), rules.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"form-label\",\n                    children: \"Select the rule by which you want to evaluate:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1126,\n                    columnNumber: 25\n                  }, this), rules.map((rule, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"form-check\",\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      className: \"form-check-input\",\n                      type: \"radio\",\n                      value: index,\n                      checked: selectedRuleIndex === index,\n                      onChange: () => handleRuleSelection(index)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1129,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"form-check-label\",\n                      children: rule.rule\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1136,\n                      columnNumber: 27\n                    }, this)]\n                  }, index, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1128,\n                    columnNumber: 25\n                  }, this)), errors.selectedRule && /*#__PURE__*/_jsxDEV(\"small\", {\n                    className: \"text-danger fst-italic\",\n                    children: /*#__PURE__*/_jsxDEV(\"i\", {\n                      children: errors.selectedRule\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1142,\n                      columnNumber: 91\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1142,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1125,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text-center\",\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    className: \"btn btn-primary mt-3 bg-dark\",\n                    onClick: validateEvaluation,\n                    children: \"Evaluate\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1146,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1145,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1078,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1021,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-lg-3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1157,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1019,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1010,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1009,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 973,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 972,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"4PbH2gUI5Hg1ew2fFZ4eTMGVh94=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","evaluateAST","ast","data","type","evalCondition","value","left","right","condition","field","operator","split","isNaN","eval","JSON","stringify","Dashboard","_s","activeTab","setActiveTab","rules","setRules","selectedRules","setSelectedRules","selectedRuleIndex","setSelectedRuleIndex","rule","setRule","age","setAge","department","setDepartment","salary","setSalary","experience","setExperience","errors","setErrors","selectedRule","setSelectedRule","fetchRules","fetch","then","response","json","rulesArray","catch","error","console","handleRuleSelection","index","handleCombineRules","log","alert","validateRule","valid","newErrors","trim","length","test","submitRule","url","newRule","postdata","headers","method","body","validateEvaluation","submitEvaluation","evaluationData","ok","Error","status","ruleAST","result","message","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","placeholder","onChange","e","target","rows","style","borderColor","map","checked","includes","filter","r","_c","$RefreshReg$"],"sources":["C:/Users/ashut/Desktop/feedback_portal - Copy/reactapp/src/Dashboard.js"],"sourcesContent":["\r\n\r\n\r\n// import { useState, useEffect } from \"react\";\r\n\r\n// const Dashboard = () => {\r\n//   const [activeTab, setActiveTab] = useState(\"create\");\r\n//   const [rules, setRules] = useState([]);\r\n//   const [selectedRules, setSelectedRules] = useState([]);\r\n//   const [rule, setRule] = useState(\"\");\r\n//   const [age, setAge] = useState(\"\");\r\n//   const [department, setDepartment] = useState(\"\");\r\n//   const [salary, setSalary] = useState(\"\");\r\n//   const [experience, setExperience] = useState(\"\");\r\n//   const [errors, setErrors] = useState({\r\n//     rule: \"\",\r\n//     age: \"\",\r\n//     department: \"\",\r\n//     salary: \"\",\r\n//     experience: \"\",\r\n//     selectedRule: \"\",\r\n//   });\r\n//   const [selectedRule, setSelectedRule] = useState(\"\");\r\n\r\n//   useEffect(() => {\r\n//     if (activeTab === \"evaluate\") {\r\n//       fetchRules();\r\n//     }\r\n//   }, [activeTab]);\r\n\r\n//   const fetchRules = () => {\r\n//     fetch(\"http://localhost:5556/rules\")\r\n//       .then((response) => response.json())\r\n//       .then((rulesArray) => {\r\n//         setRules(rulesArray);\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(\"Error fetching rules:\", error);\r\n//       });\r\n//   };\r\n\r\n//   const handleRuleSelection = (rule) => {\r\n//     setSelectedRule(rule);\r\n//   };\r\n\r\n//   const handleCombineRules = () => {\r\n//     console.log(\"Combining rules:\", selectedRules);\r\n//     alert(\"Rules combined successfully!\");\r\n//   };\r\n\r\n//   const validateRule = () => {\r\n//     let valid = true;\r\n//     let newErrors = { ...errors };\r\n\r\n//     if (rule.trim() === \"\") {\r\n//       valid = false;\r\n//       newErrors.rule = \"Rule cannot be empty.\";\r\n//     } else if (rule.length < 50) {\r\n//       valid = false;\r\n//       newErrors.rule = \"Rule must be at least 50 characters long.\";\r\n//     } else if (!/AND|OR/.test(rule)) {\r\n//       valid = false;\r\n//       newErrors.rule = \"Rule must contain at least one 'AND' or 'OR' operator.\";\r\n//     } else {\r\n//       newErrors.rule = \"\";\r\n//     }\r\n\r\n//     setErrors(newErrors);\r\n\r\n//     if (valid) {\r\n//       submitRule();\r\n//     }\r\n//   };\r\n\r\n//   const submitRule = () => {\r\n//     const url = \"http://localhost:5556/rules\";\r\n//     const newRule = {\r\n//       rule: rule,\r\n//     };\r\n\r\n//     const postdata = {\r\n//       headers: { \"Content-type\": \"application/json\" },\r\n//       method: \"POST\",\r\n//       body: JSON.stringify(newRule),\r\n//     };\r\n\r\n//     fetch(url, postdata)\r\n//       .then((response) => response.json())\r\n//       .then((data) => {\r\n//         alert(\"Rule Added Successfully!\");\r\n//         setRule(\"\");\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(\"Error submitting rule:\", error);\r\n//       });\r\n//   };\r\n\r\n//   const validateEvaluation = () => {\r\n//     let valid = true;\r\n//     let newErrors = { ...errors };\r\n\r\n//     if (age.trim() === \"\" || isNaN(age)) {\r\n//       valid = false;\r\n//       newErrors.age = \"Age must be a number and cannot be empty.\";\r\n//     } else {\r\n//       newErrors.age = \"\";\r\n//     }\r\n\r\n//     if (department.trim() === \"\") {\r\n//       valid = false;\r\n//       newErrors.department = \"Department cannot be empty.\";\r\n//     } else {\r\n//       newErrors.department = \"\";\r\n//     }\r\n\r\n//     if (salary.trim() === \"\" || isNaN(salary)) {\r\n//       valid = false;\r\n//       newErrors.salary = \"Salary must be a number and cannot be empty.\";\r\n//     } else {\r\n//       newErrors.salary = \"\";\r\n//     }\r\n\r\n//     if (experience.trim() === \"\" || isNaN(experience)) {\r\n//       valid = false;\r\n//       newErrors.experience = \"Experience must be a number and cannot be empty.\";\r\n//     } else {\r\n//       newErrors.experience = \"\";\r\n//     }\r\n\r\n//     if (!selectedRule) {\r\n//       valid = false;\r\n//       newErrors.selectedRule = \"Please select a rule.\";\r\n//     } else {\r\n//       newErrors.selectedRule = \"\";\r\n//     }\r\n\r\n//     setErrors(newErrors);\r\n\r\n//     if (valid) {\r\n//       submitEvaluation();\r\n//     }\r\n//   };\r\n\r\n//   const submitEvaluation = () => {\r\n//     const url = \"http://localhost:5556/evaluateRule\";\r\n//     const evaluationData = {\r\n//       age,\r\n//       department,\r\n//       salary,\r\n//       experience,\r\n//       rule: selectedRule,\r\n//     };\r\n\r\n//     const postdata = {\r\n//       headers: { \"Content-type\": \"application/json\" },\r\n//       method: \"POST\",\r\n//       body: JSON.stringify(evaluationData),\r\n//     };\r\n\r\n//     fetch(url, postdata)\r\n//       .then((response) => response.json())\r\n//       .then((data) => {\r\n//         alert(`Evaluation Result: ${data.result ? \"True\" : \"False\"}`);\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(\"Error evaluating rule:\", error);\r\n//       });\r\n//   };\r\n\r\n//   return (\r\n//     <section>\r\n//       <div className=\"container\">\r\n//         <div className=\"row mt-5\">\r\n//           <div className=\"col-lg-12 text-center fs-1 fw-bold text-dark\">\r\n//             Rules & Eligibility\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"row\">\r\n//           <div className=\"col-lg-12 p-5 text-center\">\r\n//             <div className=\"btn-group\">\r\n//               <button\r\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"create\" ? \"active\" : \"\"}`}\r\n//                 onClick={() => setActiveTab(\"create\")}\r\n//               >\r\n//                 Create Rule\r\n//               </button>\r\n//               <button\r\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"combine\" ? \"active\" : \"\"}`}\r\n//                 onClick={() => {\r\n//                   setActiveTab(\"combine\");\r\n//                   fetchRules();\r\n//                 }}\r\n//               >\r\n//                 Combine Rules\r\n//               </button>\r\n//               <button\r\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"evaluate\" ? \"active\" : \"\"}`}\r\n//                 onClick={() => {\r\n//                   setActiveTab(\"evaluate\");\r\n//                   fetchRules();\r\n//                 }}\r\n//               >\r\n//                 Evaluate Rules\r\n//               </button>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"row mb-5\">\r\n//           <div className=\"container p-5 feedback-box\">\r\n//             <div className=\"row\">\r\n//               <h3 className=\"text-center\">\r\n//                 {activeTab === \"create\" && \"Create Rule\"}\r\n//                 {activeTab === \"combine\" && \"Combine Rules\"}\r\n//                 {activeTab === \"evaluate\" && \"Evaluate Rules\"}\r\n//               </h3>\r\n//             </div>\r\n\r\n//             <div className=\"row\">\r\n//               <div className=\"col-lg-3\"></div>\r\n//               <div className=\"col-lg-6\">\r\n//                 {activeTab === \"create\" && (\r\n//                   <form>\r\n//                     <textarea\r\n//                       className={`form-control mb-3 ${errors.rule ? \"is-invalid\" : \"\"}`}\r\n//                       placeholder=\"Enter Rule\"\r\n//                       value={rule}\r\n//                       onChange={(e) => setRule(e.target.value)}\r\n//                       rows={8}\r\n//                       style={{ borderColor: errors.rule ? \"red\" : \"\" }}\r\n//                     ></textarea>\r\n//                     {errors.rule && <small className=\"text-danger fst-italic\"><i>{errors.rule}</i></small>}\r\n//                     <div className='text-center'>\r\n//                       <button\r\n//                         type=\"button\"\r\n//                         className=\"btn btn-primary mt-3 bg-dark\"\r\n//                         onClick={validateRule}\r\n//                       >\r\n//                         Create Rule\r\n//                       </button>\r\n//                     </div>\r\n//                   </form>\r\n//                 )}\r\n\r\n//                 {activeTab === \"combine\" && (\r\n//                   <div>\r\n//                     {rules.length > 0 ? (\r\n//                       <form>\r\n//                         {rules.map((rule, index) => (\r\n//                         <div key={index} className=\"form-check\">\r\n//                           <input\r\n//                             className=\"form-check-input\"\r\n//                             type=\"checkbox\"\r\n//                             value={rule._id}\r\n//                             onChange={() => handleRuleSelection(rule.rule)}\r\n//                           />\r\n//                           <label className=\"form-check-label\">\r\n//                             {rule.rule}\r\n//                           </label>\r\n//                         </div>\r\n//                       ))}\r\n\r\n//                        <div className='text-center'>\r\n//                         <button\r\n//                           type=\"button\"\r\n//                           className=\"btn btn-primary mt-3 bg-dark\"\r\n//                           onClick={handleCombineRules}\r\n//                         >\r\n//                           Combine Selected Rules\r\n//                         </button>\r\n//                         </div>\r\n//                       </form>\r\n//                     ) : (\r\n//                       <p>No rules available. Click the button to fetch rules.</p>\r\n//                     )}\r\n//                   </div>\r\n//                 )}\r\n\r\n//                 {activeTab === \"evaluate\" && (\r\n//                   <form>\r\n//                     <div className=\"mb-3\">\r\n//                       <label className=\"form-label\">Age</label>\r\n//                       <input\r\n//                         type=\"number\"\r\n//                         className={`form-control ${errors.age ? \"is-invalid\" : \"\"}`}\r\n//                         value={age}\r\n//                         onChange={(e) => setAge(e.target.value)}\r\n//                         style={{ borderColor: errors.age ? \"red\" : \"\" }}\r\n//                       />\r\n//                       {errors.age && <small className=\"text-danger fst-italic\"><i>{errors.age}</i></small>}\r\n//                     </div>\r\n//                     <div className=\"mb-3\">\r\n//                       <label className=\"form-label\">Department</label>\r\n//                       <input\r\n//                         type=\"text\"\r\n//                         className={`form-control ${errors.department ? \"is-invalid\" : \"\"}`}\r\n//                         value={department}\r\n//                         onChange={(e) => setDepartment(e.target.value)}\r\n//                         style={{ borderColor: errors.department ? \"red\" : \"\" }}\r\n//                       />\r\n//                       {errors.department && <small className=\"text-danger fst-italic\"><i>{errors.department}</i></small>}\r\n//                     </div>\r\n//                     <div className=\"mb-3\">\r\n//                       <label className=\"form-label\">Salary</label>\r\n//                       <input\r\n//                         type=\"number\"\r\n//                         className={`form-control ${errors.salary ? \"is-invalid\" : \"\"}`}\r\n//                         value={salary}\r\n//                         onChange={(e) => setSalary(e.target.value)}\r\n//                         style={{ borderColor: errors.salary ? \"red\" : \"\" }}\r\n//                       />\r\n//                       {errors.salary && <small className=\"text-danger fst-italic\"><i>{errors.salary}</i></small>}\r\n//                     </div>\r\n//                     <div className=\"mb-3\">\r\n//                       <label className=\"form-label\">Experience</label>\r\n//                       <input\r\n//                         type=\"number\"\r\n//                         className={`form-control ${errors.experience ? \"is-invalid\" : \"\"}`}\r\n//                         value={experience}\r\n//                         onChange={(e) => setExperience(e.target.value)}\r\n//                         style={{ borderColor: errors.experience ? \"red\" : \"\" }}\r\n//                       />\r\n//                       {errors.experience && <small className=\"text-danger fst-italic\"><i>{errors.experience}</i></small>}\r\n//                     </div>\r\n//                     {rules.length > 0 && (\r\n//                       <div>\r\n//                          <label className=\"form-label\">Select the rule by which you want to evaluate : </label>\r\n//                         {rules.map((rule, index) => (\r\n//                           <div key={index} className=\"form-check\">\r\n//                             <input\r\n//                               className=\"form-check-input\"\r\n//                               type=\"radio\"\r\n//                               value={rule._id}\r\n//                               checked={selectedRule === rule._id}\r\n//                               onChange={() => handleRuleSelection(rule._id)}\r\n//                             />\r\n//                             <label className=\"form-check-label\">\r\n//                               {rule.rule}\r\n//                             </label>\r\n//                           </div>\r\n//                         ))}\r\n//                         {errors.selectedRule && <small className=\"text-danger fst-italic\"><i>{errors.selectedRule}</i></small>}\r\n//                       </div>\r\n//                     )}\r\n//                     <div className='text-center'>\r\n//                       <button\r\n//                         type=\"button\"\r\n//                         className=\"btn btn-primary mt-3 bg-dark\"\r\n//                         onClick={validateEvaluation}\r\n//                       >\r\n//                         Evaluate\r\n//                       </button>\r\n//                     </div>\r\n//                   </form>\r\n//                 )}\r\n\r\n//               </div>\r\n//               <div className=\"col-lg-3\"></div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </section>\r\n//   );\r\n// };\r\n\r\n// export default Dashboard;\r\n\r\n// import { useState, useEffect } from \"react\";\r\n\r\n// // Define the AST evaluation functions\r\n// const evaluateAST = (ast, data) => {\r\n//   if (ast.type === 'condition') {\r\n//     return evalCondition(ast.value, data);\r\n//   }\r\n\r\n//   const left = evaluateAST(ast.left, data);\r\n//   const right = evaluateAST(ast.right, data);\r\n\r\n//   if (ast.type === 'AND') {\r\n//     return left && right;\r\n//   } else if (ast.type === 'OR') {\r\n//     return left || right;\r\n//   }\r\n\r\n//   return false;\r\n// };\r\n\r\n// const evalCondition = (condition, data) => {\r\n//   const [field, operator, value] = condition.split(/(?<=[<>=!]=?)\\s?/);\r\n//   if (isNaN(value)) {\r\n//     return eval(`${JSON.stringify(data[field])} ${operator} ${value}`);\r\n//   }\r\n//   return eval(`${data[field]} ${operator} ${value}`);\r\n// };\r\n\r\n// const Dashboard = () => {\r\n//   const [activeTab, setActiveTab] = useState(\"create\");\r\n//   const [rules, setRules] = useState([]);\r\n//   const [selectedRules, setSelectedRules] = useState([]);\r\n//   const [rule, setRule] = useState(\"\");\r\n//   const [age, setAge] = useState(\"\");\r\n//   const [department, setDepartment] = useState(\"\");\r\n//   const [salary, setSalary] = useState(\"\");\r\n//   const [experience, setExperience] = useState(\"\");\r\n//   const [errors, setErrors] = useState({\r\n//     rule: \"\",\r\n//     age: \"\",\r\n//     department: \"\",\r\n//     salary: \"\",\r\n//     experience: \"\",\r\n//     selectedRule: \"\",\r\n//   });\r\n//   const [selectedRule, setSelectedRule] = useState(\"\");\r\n\r\n//   useEffect(() => {\r\n//     if (activeTab === \"evaluate\") {\r\n//       fetchRules();\r\n//     }\r\n//   }, [activeTab]);\r\n\r\n//   const fetchRules = () => {\r\n//     fetch(\"http://localhost:5556/rules\")\r\n//       .then((response) => response.json())\r\n//       .then((rulesArray) => {\r\n//         setRules(rulesArray);\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(\"Error fetching rules:\", error);\r\n//       });\r\n//   };\r\n\r\n//   const handleRuleSelection = (rule) => {\r\n//     setSelectedRule(rule);\r\n//   };\r\n\r\n//   const handleCombineRules = () => {\r\n//     console.log(\"Combining rules:\", selectedRules);\r\n//     alert(\"Rules combined successfully!\");\r\n//   };\r\n\r\n//   const validateRule = () => {\r\n//     let valid = true;\r\n//     let newErrors = { ...errors };\r\n\r\n//     if (rule.trim() === \"\") {\r\n//       valid = false;\r\n//       newErrors.rule = \"Rule cannot be empty.\";\r\n//     } else if (rule.length < 50) {\r\n//       valid = false;\r\n//       newErrors.rule = \"Rule must be at least 50 characters long.\";\r\n//     } else if (!/AND|OR/.test(rule)) {\r\n//       valid = false;\r\n//       newErrors.rule = \"Rule must contain at least one 'AND' or 'OR' operator.\";\r\n//     } else {\r\n//       newErrors.rule = \"\";\r\n//     }\r\n\r\n//     setErrors(newErrors);\r\n\r\n//     if (valid) {\r\n//       submitRule();\r\n//     }\r\n//   };\r\n\r\n//   const submitRule = () => {\r\n//     const url = \"http://localhost:5556/rules\";\r\n//     const newRule = {\r\n//       rule: rule,\r\n//     };\r\n\r\n//     const postdata = {\r\n//       headers: { \"Content-type\": \"application/json\" },\r\n//       method: \"POST\",\r\n//       body: JSON.stringify(newRule),\r\n//     };\r\n\r\n//     fetch(url, postdata)\r\n//       .then((response) => response.json())\r\n//       .then((data) => {\r\n//         alert(\"Rule Added Successfully!\");\r\n//         setRule(\"\");\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(\"Error submitting rule:\", error);\r\n//       });\r\n//   };\r\n\r\n//   const validateEvaluation = () => {\r\n//     let valid = true;\r\n//     let newErrors = { ...errors };\r\n\r\n//     if (age.trim() === \"\" || isNaN(age)) {\r\n//       valid = false;\r\n//       newErrors.age = \"Age must be a number and cannot be empty.\";\r\n//     } else {\r\n//       newErrors.age = \"\";\r\n//     }\r\n\r\n//     if (department.trim() === \"\") {\r\n//       valid = false;\r\n//       newErrors.department = \"Department cannot be empty.\";\r\n//     } else {\r\n//       newErrors.department = \"\";\r\n//     }\r\n\r\n//     if (salary.trim() === \"\" || isNaN(salary)) {\r\n//       valid = false;\r\n//       newErrors.salary = \"Salary must be a number and cannot be empty.\";\r\n//     } else {\r\n//       newErrors.salary = \"\";\r\n//     }\r\n\r\n//     if (experience.trim() === \"\" || isNaN(experience)) {\r\n//       valid = false;\r\n//       newErrors.experience = \"Experience must be a number and cannot be empty.\";\r\n//     } else {\r\n//       newErrors.experience = \"\";\r\n//     }\r\n\r\n//     if (!selectedRule) {\r\n//       valid = false;\r\n//       newErrors.selectedRule = \"Please select a rule.\";\r\n//     } else {\r\n//       newErrors.selectedRule = \"\";\r\n//     }\r\n\r\n//     setErrors(newErrors);\r\n\r\n//     if (valid) {\r\n//       submitEvaluation();\r\n//     }\r\n//   };\r\n\r\n//   const submitEvaluation = () => {\r\n//     const url = \"http://localhost:5556/Rules\";\r\n//     const evaluationData = {\r\n//       age,\r\n//       department,\r\n//       salary,\r\n//       experience,\r\n//       rule: selectedRule,\r\n//     };\r\n  \r\n//     const postdata = {\r\n//       headers: { \"Content-type\": \"application/json\" },\r\n//       method: \"POST\",\r\n//       body: JSON.stringify(evaluationData),\r\n//     };\r\n  \r\n//     fetch(url, postdata)\r\n//       .then((response) => {\r\n//         if (!response.ok) {\r\n//           throw new Error(`HTTP error! Status: ${response.status}`);\r\n//         }\r\n//         return response.json();\r\n//       })\r\n//       .then((data) => {\r\n//         const ast = data.ruleAST; // Modify according to your actual server response\r\n//         const result = evaluateAST(ast, evaluationData);\r\n//         alert(`Evaluation Result: ${result ? \"True\" : \"False\"}`);\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(\"Error evaluating rule:\", error.message);\r\n//         alert(`An error occurred: ${error.message}`);\r\n//       });\r\n//   };\r\n  \r\n\r\n//   return (\r\n//     <section>\r\n//       <div className=\"container\">\r\n//         <div className=\"row mt-5\">\r\n//           <div className=\"col-lg-12 text-center fs-1 fw-bold text-dark\">\r\n//             Rules & Eligibility\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"row\">\r\n//           <div className=\"col-lg-12 p-5 text-center\">\r\n//             <div className=\"btn-group\">\r\n//               <button\r\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"create\" ? \"active\" : \"\"}`}\r\n//                 onClick={() => setActiveTab(\"create\")}\r\n//               >\r\n//                 Create Rule\r\n//               </button>\r\n//               <button\r\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"combine\" ? \"active\" : \"\"}`}\r\n//                 onClick={() => {\r\n//                   setActiveTab(\"combine\");\r\n//                   fetchRules();\r\n//                 }}\r\n//               >\r\n//                 Combine Rules\r\n//               </button>\r\n//               <button\r\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"evaluate\" ? \"active\" : \"\"}`}\r\n//                 onClick={() => {\r\n//                   setActiveTab(\"evaluate\");\r\n//                   fetchRules();\r\n//                 }}\r\n//               >\r\n//                 Evaluate Rules\r\n//               </button>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"row mb-5\">\r\n//           <div className=\"container p-5 feedback-box\">\r\n//             <div className=\"row\">\r\n//               <h3 className=\"text-center\">\r\n//                 {activeTab === \"create\" && \"Create Rule\"}\r\n//                 {activeTab === \"combine\" && \"Combine Rules\"}\r\n//                 {activeTab === \"evaluate\" && \"Evaluate Rules\"}\r\n//               </h3>\r\n//             </div>\r\n\r\n//             <div className=\"row\">\r\n//               <div className=\"col-lg-3\"></div>\r\n//               <div className=\"col-lg-6\">\r\n//                 {activeTab === \"create\" && (\r\n//                   <form>\r\n//                     <textarea\r\n//                       className={`form-control mb-3 ${errors.rule ? \"is-invalid\" : \"\"}`}\r\n//                       placeholder=\"Enter Rule\"\r\n//                       value={rule}\r\n//                       onChange={(e) => setRule(e.target.value)}\r\n//                       rows={8}\r\n//                       style={{ borderColor: errors.rule ? \"red\" : \"\" }}\r\n//                     ></textarea>\r\n//                     {errors.rule && <small className=\"text-danger fst-italic\"><i>{errors.rule}</i></small>}\r\n//                     <div className='text-center'>\r\n//                       <button\r\n//                         type=\"button\"\r\n//                         className=\"btn btn-primary mt-3 bg-dark\"\r\n//                         onClick={validateRule}\r\n//                       >\r\n//                         Create Rule\r\n//                       </button>\r\n//                     </div>\r\n//                   </form>\r\n//                 )}\r\n\r\n//                 {activeTab === \"combine\" && (\r\n//                   <div>\r\n//                     {rules.length > 0 ? (\r\n//                       <form>\r\n//                         {rules.map((rule, index) => (\r\n//                           <div key={index} className=\"form-check\">\r\n//                             <input\r\n//                               className=\"form-check-input\"\r\n//                               type=\"checkbox\"\r\n//                               value={rule._id}\r\n//                               onChange={() => handleRuleSelection(rule.rule)}\r\n//                             />\r\n//                             <label className=\"form-check-label\">\r\n//                               {rule.rule}\r\n//                             </label>\r\n//                           </div>\r\n//                         ))}\r\n\r\n//                         <div className='text-center'>\r\n//                           <button\r\n//                             type=\"button\"\r\n//                             className=\"btn btn-primary mt-3 bg-dark\"\r\n//                             onClick={handleCombineRules}\r\n//                           >\r\n//                             Combine Selected Rules\r\n//                           </button>\r\n//                         </div>\r\n//                       </form>\r\n//                     ) : (\r\n//                       <p>No rules available. Click the button to fetch rules.</p>\r\n//                     )}\r\n//                   </div>\r\n//                 )}\r\n\r\n                // {activeTab === \"evaluate\" && (\r\n                //   <form>\r\n                //     <div className=\"mb-3\">\r\n                //       <label className=\"form-label\">Age</label>\r\n                //       <input\r\n                //         type=\"number\"\r\n                //         className={`form-control ${errors.age ? \"is-invalid\" : \"\"}`}\r\n                //         value={age}\r\n                //         onChange={(e) => setAge(e.target.value)}\r\n                //         style={{ borderColor: errors.age ? \"red\" : \"\" }}\r\n                //       />\r\n                //       {errors.age && <small className=\"text-danger fst-italic\"><i>{errors.age}</i></small>}\r\n                //     </div>\r\n                //     <div className=\"mb-3\">\r\n                //       <label className=\"form-label\">Department</label>\r\n                //       <input\r\n                //         type=\"text\"\r\n                //         className={`form-control ${errors.department ? \"is-invalid\" : \"\"}`}\r\n                //         value={department}\r\n                //         onChange={(e) => setDepartment(e.target.value)}\r\n                //         style={{ borderColor: errors.department ? \"red\" : \"\" }}\r\n                //       />\r\n                //       {errors.department && <small className=\"text-danger fst-italic\"><i>{errors.department}</i></small>}\r\n                //     </div>\r\n                //     <div className=\"mb-3\">\r\n                //       <label className=\"form-label\">Salary</label>\r\n                //       <input\r\n                //         type=\"number\"\r\n                //         className={`form-control ${errors.salary ? \"is-invalid\" : \"\"}`}\r\n                //         value={salary}\r\n                //         onChange={(e) => setSalary(e.target.value)}\r\n                //         style={{ borderColor: errors.salary ? \"red\" : \"\" }}\r\n                //       />\r\n                //       {errors.salary && <small className=\"text-danger fst-italic\"><i>{errors.salary}</i></small>}\r\n                //     </div>\r\n                //     <div className=\"mb-3\">\r\n                //       <label className=\"form-label\">Experience</label>\r\n                //       <input\r\n                //         type=\"number\"\r\n                //         className={`form-control ${errors.experience ? \"is-invalid\" : \"\"}`}\r\n                //         value={experience}\r\n                //         onChange={(e) => setExperience(e.target.value)}\r\n                //         style={{ borderColor: errors.experience ? \"red\" : \"\" }}\r\n                //       />\r\n                //       {errors.experience && <small className=\"text-danger fst-italic\"><i>{errors.experience}</i></small>}\r\n                //     </div>\r\n                //     {rules.length > 0 && (\r\n                //       <div>\r\n                //         <label className=\"form-label\">Select the rule by which you want to evaluate:</label>\r\n                //         {rules.map((rule, index) => (\r\n                //           <div key={index} className=\"form-check\">\r\n                //             <input\r\n                //               className=\"form-check-input\"\r\n                //               type=\"radio\"\r\n                //               value={rule._id}\r\n                //               checked={selectedRule === rule._id}\r\n                //               onChange={() => handleRuleSelection(rule._id)}\r\n                //             />\r\n                //             <label className=\"form-check-label\">\r\n                //               {rule.rule}\r\n                //             </label>\r\n                //           </div>\r\n                //         ))}\r\n                //         {errors.selectedRule && <small className=\"text-danger fst-italic\"><i>{errors.selectedRule}</i></small>}\r\n                //       </div>\r\n                //     )}\r\n                //     <div className='text-center'>\r\n                //       <button\r\n                //         type=\"button\"\r\n                //         className=\"btn btn-primary mt-3 bg-dark\"\r\n                //         onClick={validateEvaluation}\r\n                //       >\r\n                //         Evaluate\r\n                //       </button>\r\n                //     </div>\r\n                //   </form>\r\n                // )}\r\n//               </div>\r\n//               <div className=\"col-lg-3\"></div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </section>\r\n//   );\r\n// };\r\n\r\n// export default Dashboard;\r\n\r\n\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\n// Define the AST evaluation functions\r\nconst evaluateAST = (ast, data) => {\r\n  if (ast.type === 'condition') {\r\n    return evalCondition(ast.value, data);\r\n  }\r\n\r\n  const left = evaluateAST(ast.left, data);\r\n  const right = evaluateAST(ast.right, data);\r\n\r\n  if (ast.type === 'AND') {\r\n    return left && right;\r\n  } else if (ast.type === 'OR') {\r\n    return left || right;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nconst evalCondition = (condition, data) => {\r\n  const [field, operator, value] = condition.split(/(?<=[<>=!]=?)\\s?/);\r\n  if (isNaN(value)) {\r\n    return eval(`${JSON.stringify(data[field])} ${operator} ${value}`);\r\n  }\r\n  return eval(`${data[field]} ${operator} ${value}`);\r\n};\r\n\r\nconst Dashboard = () => {\r\n  const [activeTab, setActiveTab] = useState(\"create\");\r\n  const [rules, setRules] = useState([]);\r\n  const [selectedRules, setSelectedRules] = useState([]);\r\n  const [selectedRuleIndex, setSelectedRuleIndex] = useState(null);\r\n\r\n  const [rule, setRule] = useState(\"\");\r\n  const [age, setAge] = useState(\"\");\r\n  const [department, setDepartment] = useState(\"\");\r\n  const [salary, setSalary] = useState(\"\");\r\n  const [experience, setExperience] = useState(\"\");\r\n  const [errors, setErrors] = useState({\r\n    rule: \"\",\r\n    age: \"\",\r\n    department: \"\",\r\n    salary: \"\",\r\n    experience: \"\",\r\n    selectedRule: \"\",\r\n  });\r\n  const [selectedRule, setSelectedRule] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (activeTab === \"evaluate\") {\r\n      fetchRules();\r\n    }\r\n  }, [activeTab]);\r\n\r\n  const fetchRules = () => {\r\n    fetch(\"http://localhost:5556/rules\")\r\n      .then((response) => response.json())\r\n      .then((rulesArray) => {\r\n        setRules(rulesArray);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching rules:\", error);\r\n      });\r\n  };\r\n\r\n  const handleRuleSelection = (index) => {\r\n    setSelectedRuleIndex(index);\r\n  };\r\n  \r\n  const handleCombineRules = () => {\r\n    console.log(\"Combining rules:\", selectedRules);\r\n    alert(\"Rules combined successfully!\");\r\n  };\r\n\r\n  const validateRule = () => {\r\n    let valid = true;\r\n    let newErrors = { ...errors };\r\n\r\n    if (rule.trim() === \"\") {\r\n      valid = false;\r\n      newErrors.rule = \"Rule cannot be empty.\";\r\n    } else if (rule.length < 50) {\r\n      valid = false;\r\n      newErrors.rule = \"Rule must be at least 50 characters long.\";\r\n    } else if (!/AND|OR/.test(rule)) {\r\n      valid = false;\r\n      newErrors.rule = \"Rule must contain at least one 'AND' or 'OR' operator.\";\r\n    } else {\r\n      newErrors.rule = \"\";\r\n    }\r\n\r\n    setErrors(newErrors);\r\n\r\n    if (valid) {\r\n      submitRule();\r\n    }\r\n  };\r\n\r\n  const submitRule = () => {\r\n    const url = \"http://localhost:5556/rules\";\r\n    const newRule = {\r\n      rule: rule,\r\n    };\r\n\r\n    const postdata = {\r\n      headers: { \"Content-type\": \"application/json\" },\r\n      method: \"POST\",\r\n      body: JSON.stringify(newRule),\r\n    };\r\n\r\n    fetch(url, postdata)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        alert(\"Rule Added Successfully!\");\r\n        setRule(\"\");\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error submitting rule:\", error);\r\n      });\r\n  };\r\n\r\n  const validateEvaluation = () => {\r\n    let valid = true;\r\n    let newErrors = { ...errors };\r\n\r\n    if (age.trim() === \"\" || isNaN(age)) {\r\n      valid = false;\r\n      newErrors.age = \"Age must be a number and cannot be empty.\";\r\n    } else {\r\n      newErrors.age = \"\";\r\n    }\r\n\r\n    if (department.trim() === \"\") {\r\n      valid = false;\r\n      newErrors.department = \"Department cannot be empty.\";\r\n    } else {\r\n      newErrors.department = \"\";\r\n    }\r\n\r\n    if (salary.trim() === \"\" || isNaN(salary)) {\r\n      valid = false;\r\n      newErrors.salary = \"Salary must be a number and cannot be empty.\";\r\n    } else {\r\n      newErrors.salary = \"\";\r\n    }\r\n\r\n    if (experience.trim() === \"\" || isNaN(experience)) {\r\n      valid = false;\r\n      newErrors.experience = \"Experience must be a number and cannot be empty.\";\r\n    } else {\r\n      newErrors.experience = \"\";\r\n    }\r\n\r\n    if (!selectedRule) {\r\n      valid = false;\r\n      newErrors.selectedRule = \"Please select a rule.\";\r\n    } else {\r\n      newErrors.selectedRule = \"\";\r\n    }\r\n\r\n    setErrors(newErrors);\r\n\r\n    if (valid) {\r\n      submitEvaluation();\r\n    }\r\n  };\r\n\r\n  const submitEvaluation = () => {\r\n    const url = \"http://localhost:5556/Rules\";\r\n    const evaluationData = {\r\n      age,\r\n      department,\r\n      salary,\r\n      experience,\r\n      rule: selectedRule,\r\n    };\r\n  \r\n    const postdata = {\r\n      headers: { \"Content-type\": \"application/json\" },\r\n      method: \"POST\",\r\n      body: JSON.stringify(evaluationData),\r\n    };\r\n  \r\n    fetch(url, postdata)\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        const ast = data.ruleAST; // Modify according to your actual server response\r\n        const result = evaluateAST(ast, evaluationData);\r\n        alert(`Evaluation Result: ${result ? \"True\" : \"False\"}`);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error evaluating rule:\", error.message);\r\n        alert(`An error occurred: ${error.message}`);\r\n      });\r\n  };\r\n  \r\n\r\n  return (\r\n    <section>\r\n      <div className=\"container\">\r\n        <div className=\"row mt-5\">\r\n          <div className=\"col-lg-12 text-center fs-1 fw-bold text-dark\">\r\n            Rules & Eligibility\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col-lg-12 p-5 text-center\">\r\n            <div className=\"btn-group\">\r\n              <button\r\n                className={`btn btn-outline-dark fw-bold ${activeTab === \"create\" ? \"active\" : \"\"}`}\r\n                onClick={() => setActiveTab(\"create\")}\r\n              >\r\n                Create Rule\r\n              </button>\r\n              <button\r\n                className={`btn btn-outline-dark fw-bold ${activeTab === \"combine\" ? \"active\" : \"\"}`}\r\n                onClick={() => {\r\n                  setActiveTab(\"combine\");\r\n                  fetchRules();\r\n                }}\r\n              >\r\n                Combine Rules\r\n              </button>\r\n              <button\r\n                className={`btn btn-outline-dark fw-bold ${activeTab === \"evaluate\" ? \"active\" : \"\"}`}\r\n                onClick={() => {\r\n                  setActiveTab(\"evaluate\");\r\n                  fetchRules();\r\n                }}\r\n              >\r\n                Evaluate Rules\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"row mb-5\">\r\n          <div className=\"container p-5 feedback-box\">\r\n            <div className=\"row\">\r\n              <h3 className=\"text-center\">\r\n                {activeTab === \"create\" && \"Create Rule\"}\r\n                {activeTab === \"combine\" && \"Combine Rules\"}\r\n                {activeTab === \"evaluate\" && \"Evaluate Rules\"}\r\n              </h3>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n              <div className=\"col-lg-3\"></div>\r\n              <div className=\"col-lg-6\">\r\n                {activeTab === \"create\" && (\r\n                  <form>\r\n                    <textarea\r\n                      className={`form-control mb-3 ${errors.rule ? \"is-invalid\" : \"\"}`}\r\n                      placeholder=\"Enter Rule\"\r\n                      value={rule}\r\n                      onChange={(e) => setRule(e.target.value)}\r\n                      rows={8}\r\n                      style={{ borderColor: errors.rule ? \"red\" : \"\" }}\r\n                    ></textarea>\r\n                    {errors.rule && <small className=\"text-danger fst-italic\"><i>{errors.rule}</i></small>}\r\n                    <div className='text-center'>\r\n                      <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-primary mt-3\"\r\n                        onClick={validateRule}\r\n                      >\r\n                        Submit\r\n                      </button>\r\n                    </div>\r\n                  </form>\r\n                )}\r\n\r\n                {activeTab === \"combine\" && (\r\n                  <form>\r\n                    <h5>Available Rules:</h5>\r\n                    {rules.map((rule, index) => (\r\n                      <div key={index} className=\"form-check mb-2\">\r\n                        <input\r\n                          className=\"form-check-input\"\r\n                          type=\"checkbox\"\r\n                          checked={selectedRules.includes(rule)}\r\n                          onChange={(e) => {\r\n                            if (e.target.checked) {\r\n                              setSelectedRules([...selectedRules, rule]);\r\n                            } else {\r\n                              setSelectedRules(selectedRules.filter((r) => r !== rule));\r\n                            }\r\n                          }}\r\n                        />\r\n                        <label className=\"form-check-label\">{rule.rule}</label>\r\n                      </div>\r\n                    ))}\r\n                    <div className='text-center'>\r\n                      <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-primary mt-3\"\r\n                        onClick={handleCombineRules}\r\n                      >\r\n                        Combine\r\n                      </button>\r\n                    </div>\r\n                  </form>\r\n                )}\r\n\r\n{activeTab === \"evaluate\" && (\r\n                  <form>\r\n                    <div className=\"mb-3\">\r\n                      <label className=\"form-label\">Age</label>\r\n                      <input\r\n                        type=\"number\"\r\n                        className={`form-control ${errors.age ? \"is-invalid\" : \"\"}`}\r\n                        value={age}\r\n                        onChange={(e) => setAge(e.target.value)}\r\n                        style={{ borderColor: errors.age ? \"red\" : \"\" }}\r\n                      />\r\n                      {errors.age && <small className=\"text-danger fst-italic\"><i>{errors.age}</i></small>}\r\n                    </div>\r\n                    <div className=\"mb-3\">\r\n                      <label className=\"form-label\">Department</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className={`form-control ${errors.department ? \"is-invalid\" : \"\"}`}\r\n                        value={department}\r\n                        onChange={(e) => setDepartment(e.target.value)}\r\n                        style={{ borderColor: errors.department ? \"red\" : \"\" }}\r\n                      />\r\n                      {errors.department && <small className=\"text-danger fst-italic\"><i>{errors.department}</i></small>}\r\n                    </div>\r\n                    <div className=\"mb-3\">\r\n                      <label className=\"form-label\">Salary</label>\r\n                      <input\r\n                        type=\"number\"\r\n                        className={`form-control ${errors.salary ? \"is-invalid\" : \"\"}`}\r\n                        value={salary}\r\n                        onChange={(e) => setSalary(e.target.value)}\r\n                        style={{ borderColor: errors.salary ? \"red\" : \"\" }}\r\n                      />\r\n                      {errors.salary && <small className=\"text-danger fst-italic\"><i>{errors.salary}</i></small>}\r\n                    </div>\r\n                    <div className=\"mb-3\">\r\n                      <label className=\"form-label\">Experience</label>\r\n                      <input\r\n                        type=\"number\"\r\n                        className={`form-control ${errors.experience ? \"is-invalid\" : \"\"}`}\r\n                        value={experience}\r\n                        onChange={(e) => setExperience(e.target.value)}\r\n                        style={{ borderColor: errors.experience ? \"red\" : \"\" }}\r\n                      />\r\n                      {errors.experience && <small className=\"text-danger fst-italic\"><i>{errors.experience}</i></small>}\r\n                    </div>\r\n\r\n                    {rules.length > 0 && (\r\n                      <div>\r\n                        <label className=\"form-label\">Select the rule by which you want to evaluate:</label>\r\n                        {rules.map((rule, index) => (\r\n                        <div key={index} className=\"form-check\">\r\n                          <input\r\n                            className=\"form-check-input\"\r\n                            type=\"radio\"\r\n                            value={index}\r\n                            checked={selectedRuleIndex === index}\r\n                            onChange={() => handleRuleSelection(index)}\r\n                          />\r\n                          <label className=\"form-check-label\">\r\n                            {rule.rule}\r\n                          </label>\r\n                        </div>\r\n                      ))}\r\n\r\n                        {errors.selectedRule && <small className=\"text-danger fst-italic\"><i>{errors.selectedRule}</i></small>}\r\n                      </div>\r\n                    )}\r\n                    <div className='text-center'>\r\n                      <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-primary mt-3 bg-dark\"\r\n                        onClick={validateEvaluation}\r\n                      >\r\n                        Evaluate\r\n                      </button>\r\n                    </div>\r\n                  </form>\r\n                )}\r\n              </div>\r\n              <div className=\"col-lg-3\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappingsgB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE3C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,GAAGA,CAACC,GAAG,EAAEC,IAAI,KAAK;EACjC,IAAID,GAAG,CAACE,IAAI,KAAK,WAAW,EAAE;IAC5B,OAAOC,aAAa,CAACH,GAAG,CAACI,KAAK,EAAEH,IAAI,CAAC;EACvC;EAEA,MAAMI,IAAI,GAAGN,WAAW,CAACC,GAAG,CAACK,IAAI,EAAEJ,IAAI,CAAC;EACxC,MAAMK,KAAK,GAAGP,WAAW,CAACC,GAAG,CAACM,KAAK,EAAEL,IAAI,CAAC;EAE1C,IAAID,GAAG,CAACE,IAAI,KAAK,KAAK,EAAE;IACtB,OAAOG,IAAI,IAAIC,KAAK;EACtB,CAAC,MAAM,IAAIN,GAAG,CAACE,IAAI,KAAK,IAAI,EAAE;IAC5B,OAAOG,IAAI,IAAIC,KAAK;EACtB;EAEA,OAAO,KAAK;AACd,CAAC;AAED,MAAMH,aAAa,GAAGA,CAACI,SAAS,EAAEN,IAAI,KAAK;EACzC,MAAM,CAACO,KAAK,EAAEC,QAAQ,EAAEL,KAAK,CAAC,GAAGG,SAAS,CAACG,KAAK,CAAC,kBAAkB,CAAC;EACpE,IAAIC,KAAK,CAACP,KAAK,CAAC,EAAE;IAChB,OAAOQ,IAAI,CAAE,GAAEC,IAAI,CAACC,SAAS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"},"metadata":{},"sourceType":"module","externalDependencies":[]}