{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ashut\\\\Desktop\\\\feedback_portal - Copy\\\\reactapp\\\\src\\\\Dashboard.js\",\n  _s = $RefreshSig$();\n// import { useState, useEffect } from \"react\";\n\n// const Dashboard = () => {\n//   const [activeTab, setActiveTab] = useState(\"create\");\n//   const [rules, setRules] = useState([]);\n//   const [selectedRules, setSelectedRules] = useState([]);\n//   const [rule, setRule] = useState(\"\");\n//   const [age, setAge] = useState(\"\");\n//   const [department, setDepartment] = useState(\"\");\n//   const [salary, setSalary] = useState(\"\");\n//   const [experience, setExperience] = useState(\"\");\n//   const [errors, setErrors] = useState({\n//     rule: \"\",\n//     age: \"\",\n//     department: \"\",\n//     salary: \"\",\n//     experience: \"\",\n//     selectedRule: \"\",\n//   });\n//   const [selectedRule, setSelectedRule] = useState(\"\");\n\n//   useEffect(() => {\n//     if (activeTab === \"evaluate\") {\n//       fetchRules();\n//     }\n//   }, [activeTab]);\n\n//   const fetchRules = () => {\n//     fetch(\"http://localhost:5556/rules\")\n//       .then((response) => response.json())\n//       .then((rulesArray) => {\n//         setRules(rulesArray);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error fetching rules:\", error);\n//       });\n//   };\n\n//   const handleRuleSelection = (rule) => {\n//     setSelectedRule(rule);\n//   };\n\n//   const handleCombineRules = () => {\n//     console.log(\"Combining rules:\", selectedRules);\n//     alert(\"Rules combined successfully!\");\n//   };\n\n//   const validateRule = () => {\n//     let valid = true;\n//     let newErrors = { ...errors };\n\n//     if (rule.trim() === \"\") {\n//       valid = false;\n//       newErrors.rule = \"Rule cannot be empty.\";\n//     } else if (rule.length < 50) {\n//       valid = false;\n//       newErrors.rule = \"Rule must be at least 50 characters long.\";\n//     } else if (!/AND|OR/.test(rule)) {\n//       valid = false;\n//       newErrors.rule = \"Rule must contain at least one 'AND' or 'OR' operator.\";\n//     } else {\n//       newErrors.rule = \"\";\n//     }\n\n//     setErrors(newErrors);\n\n//     if (valid) {\n//       submitRule();\n//     }\n//   };\n\n//   const submitRule = () => {\n//     const url = \"http://localhost:5556/rules\";\n//     const newRule = {\n//       rule: rule,\n//     };\n\n//     const postdata = {\n//       headers: { \"Content-type\": \"application/json\" },\n//       method: \"POST\",\n//       body: JSON.stringify(newRule),\n//     };\n\n//     fetch(url, postdata)\n//       .then((response) => response.json())\n//       .then((data) => {\n//         alert(\"Rule Added Successfully!\");\n//         setRule(\"\");\n//       })\n//       .catch((error) => {\n//         console.error(\"Error submitting rule:\", error);\n//       });\n//   };\n\n//   const validateEvaluation = () => {\n//     let valid = true;\n//     let newErrors = { ...errors };\n\n//     if (age.trim() === \"\" || isNaN(age)) {\n//       valid = false;\n//       newErrors.age = \"Age must be a number and cannot be empty.\";\n//     } else {\n//       newErrors.age = \"\";\n//     }\n\n//     if (department.trim() === \"\") {\n//       valid = false;\n//       newErrors.department = \"Department cannot be empty.\";\n//     } else {\n//       newErrors.department = \"\";\n//     }\n\n//     if (salary.trim() === \"\" || isNaN(salary)) {\n//       valid = false;\n//       newErrors.salary = \"Salary must be a number and cannot be empty.\";\n//     } else {\n//       newErrors.salary = \"\";\n//     }\n\n//     if (experience.trim() === \"\" || isNaN(experience)) {\n//       valid = false;\n//       newErrors.experience = \"Experience must be a number and cannot be empty.\";\n//     } else {\n//       newErrors.experience = \"\";\n//     }\n\n//     if (!selectedRule) {\n//       valid = false;\n//       newErrors.selectedRule = \"Please select a rule.\";\n//     } else {\n//       newErrors.selectedRule = \"\";\n//     }\n\n//     setErrors(newErrors);\n\n//     if (valid) {\n//       submitEvaluation();\n//     }\n//   };\n\n//   const submitEvaluation = () => {\n//     const url = \"http://localhost:5556/evaluateRule\";\n//     const evaluationData = {\n//       age,\n//       department,\n//       salary,\n//       experience,\n//       rule: selectedRule,\n//     };\n\n//     const postdata = {\n//       headers: { \"Content-type\": \"application/json\" },\n//       method: \"POST\",\n//       body: JSON.stringify(evaluationData),\n//     };\n\n//     fetch(url, postdata)\n//       .then((response) => response.json())\n//       .then((data) => {\n//         alert(`Evaluation Result: ${data.result ? \"True\" : \"False\"}`);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error evaluating rule:\", error);\n//       });\n//   };\n\n//   return (\n//     <section>\n//       <div className=\"container\">\n//         <div className=\"row mt-5\">\n//           <div className=\"col-lg-12 text-center fs-1 fw-bold text-dark\">\n//             Rules & Eligibility\n//           </div>\n//         </div>\n//         <div className=\"row\">\n//           <div className=\"col-lg-12 p-5 text-center\">\n//             <div className=\"btn-group\">\n//               <button\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"create\" ? \"active\" : \"\"}`}\n//                 onClick={() => setActiveTab(\"create\")}\n//               >\n//                 Create Rule\n//               </button>\n//               <button\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"combine\" ? \"active\" : \"\"}`}\n//                 onClick={() => {\n//                   setActiveTab(\"combine\");\n//                   fetchRules();\n//                 }}\n//               >\n//                 Combine Rules\n//               </button>\n//               <button\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"evaluate\" ? \"active\" : \"\"}`}\n//                 onClick={() => {\n//                   setActiveTab(\"evaluate\");\n//                   fetchRules();\n//                 }}\n//               >\n//                 Evaluate Rules\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//         <div className=\"row mb-5\">\n//           <div className=\"container p-5 feedback-box\">\n//             <div className=\"row\">\n//               <h3 className=\"text-center\">\n//                 {activeTab === \"create\" && \"Create Rule\"}\n//                 {activeTab === \"combine\" && \"Combine Rules\"}\n//                 {activeTab === \"evaluate\" && \"Evaluate Rules\"}\n//               </h3>\n//             </div>\n\n//             <div className=\"row\">\n//               <div className=\"col-lg-3\"></div>\n//               <div className=\"col-lg-6\">\n//                 {activeTab === \"create\" && (\n//                   <form>\n//                     <textarea\n//                       className={`form-control mb-3 ${errors.rule ? \"is-invalid\" : \"\"}`}\n//                       placeholder=\"Enter Rule\"\n//                       value={rule}\n//                       onChange={(e) => setRule(e.target.value)}\n//                       rows={8}\n//                       style={{ borderColor: errors.rule ? \"red\" : \"\" }}\n//                     ></textarea>\n//                     {errors.rule && <small className=\"text-danger fst-italic\"><i>{errors.rule}</i></small>}\n//                     <div className='text-center'>\n//                       <button\n//                         type=\"button\"\n//                         className=\"btn btn-primary mt-3 bg-dark\"\n//                         onClick={validateRule}\n//                       >\n//                         Create Rule\n//                       </button>\n//                     </div>\n//                   </form>\n//                 )}\n\n//                 {activeTab === \"combine\" && (\n//                   <div>\n//                     {rules.length > 0 ? (\n//                       <form>\n//                         {rules.map((rule, index) => (\n//                         <div key={index} className=\"form-check\">\n//                           <input\n//                             className=\"form-check-input\"\n//                             type=\"checkbox\"\n//                             value={rule._id}\n//                             onChange={() => handleRuleSelection(rule.rule)}\n//                           />\n//                           <label className=\"form-check-label\">\n//                             {rule.rule}\n//                           </label>\n//                         </div>\n//                       ))}\n\n//                        <div className='text-center'>\n//                         <button\n//                           type=\"button\"\n//                           className=\"btn btn-primary mt-3 bg-dark\"\n//                           onClick={handleCombineRules}\n//                         >\n//                           Combine Selected Rules\n//                         </button>\n//                         </div>\n//                       </form>\n//                     ) : (\n//                       <p>No rules available. Click the button to fetch rules.</p>\n//                     )}\n//                   </div>\n//                 )}\n\n//                 {activeTab === \"evaluate\" && (\n//                   <form>\n//                     <div className=\"mb-3\">\n//                       <label className=\"form-label\">Age</label>\n//                       <input\n//                         type=\"number\"\n//                         className={`form-control ${errors.age ? \"is-invalid\" : \"\"}`}\n//                         value={age}\n//                         onChange={(e) => setAge(e.target.value)}\n//                         style={{ borderColor: errors.age ? \"red\" : \"\" }}\n//                       />\n//                       {errors.age && <small className=\"text-danger fst-italic\"><i>{errors.age}</i></small>}\n//                     </div>\n//                     <div className=\"mb-3\">\n//                       <label className=\"form-label\">Department</label>\n//                       <input\n//                         type=\"text\"\n//                         className={`form-control ${errors.department ? \"is-invalid\" : \"\"}`}\n//                         value={department}\n//                         onChange={(e) => setDepartment(e.target.value)}\n//                         style={{ borderColor: errors.department ? \"red\" : \"\" }}\n//                       />\n//                       {errors.department && <small className=\"text-danger fst-italic\"><i>{errors.department}</i></small>}\n//                     </div>\n//                     <div className=\"mb-3\">\n//                       <label className=\"form-label\">Salary</label>\n//                       <input\n//                         type=\"number\"\n//                         className={`form-control ${errors.salary ? \"is-invalid\" : \"\"}`}\n//                         value={salary}\n//                         onChange={(e) => setSalary(e.target.value)}\n//                         style={{ borderColor: errors.salary ? \"red\" : \"\" }}\n//                       />\n//                       {errors.salary && <small className=\"text-danger fst-italic\"><i>{errors.salary}</i></small>}\n//                     </div>\n//                     <div className=\"mb-3\">\n//                       <label className=\"form-label\">Experience</label>\n//                       <input\n//                         type=\"number\"\n//                         className={`form-control ${errors.experience ? \"is-invalid\" : \"\"}`}\n//                         value={experience}\n//                         onChange={(e) => setExperience(e.target.value)}\n//                         style={{ borderColor: errors.experience ? \"red\" : \"\" }}\n//                       />\n//                       {errors.experience && <small className=\"text-danger fst-italic\"><i>{errors.experience}</i></small>}\n//                     </div>\n//                     {rules.length > 0 && (\n//                       <div>\n//                          <label className=\"form-label\">Select the rule by which you want to evaluate : </label>\n//                         {rules.map((rule, index) => (\n//                           <div key={index} className=\"form-check\">\n//                             <input\n//                               className=\"form-check-input\"\n//                               type=\"radio\"\n//                               value={rule._id}\n//                               checked={selectedRule === rule._id}\n//                               onChange={() => handleRuleSelection(rule._id)}\n//                             />\n//                             <label className=\"form-check-label\">\n//                               {rule.rule}\n//                             </label>\n//                           </div>\n//                         ))}\n//                         {errors.selectedRule && <small className=\"text-danger fst-italic\"><i>{errors.selectedRule}</i></small>}\n//                       </div>\n//                     )}\n//                     <div className='text-center'>\n//                       <button\n//                         type=\"button\"\n//                         className=\"btn btn-primary mt-3 bg-dark\"\n//                         onClick={validateEvaluation}\n//                       >\n//                         Evaluate\n//                       </button>\n//                     </div>\n//                   </form>\n//                 )}\n\n//               </div>\n//               <div className=\"col-lg-3\"></div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     </section>\n//   );\n// };\n\n// export default Dashboard;\n\n// import { useState, useEffect } from \"react\";\n\n// // Define the AST evaluation functions\n// const evaluateAST = (ast, data) => {\n//   if (ast.type === 'condition') {\n//     return evalCondition(ast.value, data);\n//   }\n\n//   const left = evaluateAST(ast.left, data);\n//   const right = evaluateAST(ast.right, data);\n\n//   if (ast.type === 'AND') {\n//     return left && right;\n//   } else if (ast.type === 'OR') {\n//     return left || right;\n//   }\n\n//   return false;\n// };\n\n// const evalCondition = (condition, data) => {\n//   const [field, operator, value] = condition.split(/(?<=[<>=!]=?)\\s?/);\n//   if (isNaN(value)) {\n//     return eval(`${JSON.stringify(data[field])} ${operator} ${value}`);\n//   }\n//   return eval(`${data[field]} ${operator} ${value}`);\n// };\n\n// const Dashboard = () => {\n//   const [activeTab, setActiveTab] = useState(\"create\");\n//   const [rules, setRules] = useState([]);\n//   const [selectedRules, setSelectedRules] = useState([]);\n//   const [rule, setRule] = useState(\"\");\n//   const [age, setAge] = useState(\"\");\n//   const [department, setDepartment] = useState(\"\");\n//   const [salary, setSalary] = useState(\"\");\n//   const [experience, setExperience] = useState(\"\");\n//   const [errors, setErrors] = useState({\n//     rule: \"\",\n//     age: \"\",\n//     department: \"\",\n//     salary: \"\",\n//     experience: \"\",\n//     selectedRule: \"\",\n//   });\n//   const [selectedRule, setSelectedRule] = useState(\"\");\n\n//   useEffect(() => {\n//     if (activeTab === \"evaluate\") {\n//       fetchRules();\n//     }\n//   }, [activeTab]);\n\n//   const fetchRules = () => {\n//     fetch(\"http://localhost:5556/rules\")\n//       .then((response) => response.json())\n//       .then((rulesArray) => {\n//         setRules(rulesArray);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error fetching rules:\", error);\n//       });\n//   };\n\n//   const handleRuleSelection = (rule) => {\n//     setSelectedRule(rule);\n//   };\n\n//   const handleCombineRules = () => {\n//     console.log(\"Combining rules:\", selectedRules);\n//     alert(\"Rules combined successfully!\");\n//   };\n\n//   const validateRule = () => {\n//     let valid = true;\n//     let newErrors = { ...errors };\n\n//     if (rule.trim() === \"\") {\n//       valid = false;\n//       newErrors.rule = \"Rule cannot be empty.\";\n//     } else if (rule.length < 50) {\n//       valid = false;\n//       newErrors.rule = \"Rule must be at least 50 characters long.\";\n//     } else if (!/AND|OR/.test(rule)) {\n//       valid = false;\n//       newErrors.rule = \"Rule must contain at least one 'AND' or 'OR' operator.\";\n//     } else {\n//       newErrors.rule = \"\";\n//     }\n\n//     setErrors(newErrors);\n\n//     if (valid) {\n//       submitRule();\n//     }\n//   };\n\n//   const submitRule = () => {\n//     const url = \"http://localhost:5556/rules\";\n//     const newRule = {\n//       rule: rule,\n//     };\n\n//     const postdata = {\n//       headers: { \"Content-type\": \"application/json\" },\n//       method: \"POST\",\n//       body: JSON.stringify(newRule),\n//     };\n\n//     fetch(url, postdata)\n//       .then((response) => response.json())\n//       .then((data) => {\n//         alert(\"Rule Added Successfully!\");\n//         setRule(\"\");\n//       })\n//       .catch((error) => {\n//         console.error(\"Error submitting rule:\", error);\n//       });\n//   };\n\n//   const validateEvaluation = () => {\n//     let valid = true;\n//     let newErrors = { ...errors };\n\n//     if (age.trim() === \"\" || isNaN(age)) {\n//       valid = false;\n//       newErrors.age = \"Age must be a number and cannot be empty.\";\n//     } else {\n//       newErrors.age = \"\";\n//     }\n\n//     if (department.trim() === \"\") {\n//       valid = false;\n//       newErrors.department = \"Department cannot be empty.\";\n//     } else {\n//       newErrors.department = \"\";\n//     }\n\n//     if (salary.trim() === \"\" || isNaN(salary)) {\n//       valid = false;\n//       newErrors.salary = \"Salary must be a number and cannot be empty.\";\n//     } else {\n//       newErrors.salary = \"\";\n//     }\n\n//     if (experience.trim() === \"\" || isNaN(experience)) {\n//       valid = false;\n//       newErrors.experience = \"Experience must be a number and cannot be empty.\";\n//     } else {\n//       newErrors.experience = \"\";\n//     }\n\n//     if (!selectedRule) {\n//       valid = false;\n//       newErrors.selectedRule = \"Please select a rule.\";\n//     } else {\n//       newErrors.selectedRule = \"\";\n//     }\n\n//     setErrors(newErrors);\n\n//     if (valid) {\n//       submitEvaluation();\n//     }\n//   };\n\n//   const submitEvaluation = () => {\n//     const url = \"http://localhost:5556/Rules\";\n// const evaluationData = {\n//   age,\n//   department,\n//   salary,\n//   experience,\n//   rule: selectedRule,\n// };\n\n//     const postdata = {\n//       headers: { \"Content-type\": \"application/json\" },\n//       method: \"POST\",\n//       body: JSON.stringify(evaluationData),\n//     };\n\n//     fetch(url, postdata)\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw new Error(`HTTP error! Status: ${response.status}`);\n//         }\n//         return response.json();\n//       })\n//       .then((data) => {\n//         const ast = data.ruleAST; // Modify according to your actual server response\n//         const result = evaluateAST(ast, evaluationData);\n//         alert(`Evaluation Result: ${result ? \"True\" : \"False\"}`);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error evaluating rule:\", error.message);\n//         alert(`An error occurred: ${error.message}`);\n//       });\n//   };\n\n//   return (\n//     <section>\n//       <div className=\"container\">\n//         <div className=\"row mt-5\">\n//           <div className=\"col-lg-12 text-center fs-1 fw-bold text-dark\">\n//             Rules & Eligibility\n//           </div>\n//         </div>\n//         <div className=\"row\">\n//           <div className=\"col-lg-12 p-5 text-center\">\n//             <div className=\"btn-group\">\n//               <button\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"create\" ? \"active\" : \"\"}`}\n//                 onClick={() => setActiveTab(\"create\")}\n//               >\n//                 Create Rule\n//               </button>\n//               <button\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"combine\" ? \"active\" : \"\"}`}\n//                 onClick={() => {\n//                   setActiveTab(\"combine\");\n//                   fetchRules();\n//                 }}\n//               >\n//                 Combine Rules\n//               </button>\n//               <button\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"evaluate\" ? \"active\" : \"\"}`}\n//                 onClick={() => {\n//                   setActiveTab(\"evaluate\");\n//                   fetchRules();\n//                 }}\n//               >\n//                 Evaluate Rules\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//         <div className=\"row mb-5\">\n//           <div className=\"container p-5 feedback-box\">\n//             <div className=\"row\">\n//               <h3 className=\"text-center\">\n//                 {activeTab === \"create\" && \"Create Rule\"}\n//                 {activeTab === \"combine\" && \"Combine Rules\"}\n//                 {activeTab === \"evaluate\" && \"Evaluate Rules\"}\n//               </h3>\n//             </div>\n\n//             <div className=\"row\">\n//               <div className=\"col-lg-3\"></div>\n//               <div className=\"col-lg-6\">\n//                 {activeTab === \"create\" && (\n//                   <form>\n//                     <textarea\n//                       className={`form-control mb-3 ${errors.rule ? \"is-invalid\" : \"\"}`}\n//                       placeholder=\"Enter Rule\"\n//                       value={rule}\n//                       onChange={(e) => setRule(e.target.value)}\n//                       rows={8}\n//                       style={{ borderColor: errors.rule ? \"red\" : \"\" }}\n//                     ></textarea>\n//                     {errors.rule && <small className=\"text-danger fst-italic\"><i>{errors.rule}</i></small>}\n//                     <div className='text-center'>\n//                       <button\n//                         type=\"button\"\n//                         className=\"btn btn-primary mt-3 bg-dark\"\n//                         onClick={validateRule}\n//                       >\n//                         Create Rule\n//                       </button>\n//                     </div>\n//                   </form>\n//                 )}\n\n//                 {activeTab === \"combine\" && (\n//                   <div>\n//                     {rules.length > 0 ? (\n//                       <form>\n//                         {rules.map((rule, index) => (\n//                           <div key={index} className=\"form-check\">\n//                             <input\n//                               className=\"form-check-input\"\n//                               type=\"checkbox\"\n//                               value={rule._id}\n//                               onChange={() => handleRuleSelection(rule.rule)}\n//                             />\n//                             <label className=\"form-check-label\">\n//                               {rule.rule}\n//                             </label>\n//                           </div>\n//                         ))}\n\n//                         <div className='text-center'>\n//                           <button\n//                             type=\"button\"\n//                             className=\"btn btn-primary mt-3 bg-dark\"\n//                             onClick={handleCombineRules}\n//                           >\n//                             Combine Selected Rules\n//                           </button>\n//                         </div>\n//                       </form>\n//                     ) : (\n//                       <p>No rules available. Click the button to fetch rules.</p>\n//                     )}\n//                   </div>\n//                 )}\n\n// {activeTab === \"evaluate\" && (\n//   <form>\n//     <div className=\"mb-3\">\n//       <label className=\"form-label\">Age</label>\n//       <input\n//         type=\"number\"\n//         className={`form-control ${errors.age ? \"is-invalid\" : \"\"}`}\n//         value={age}\n//         onChange={(e) => setAge(e.target.value)}\n//         style={{ borderColor: errors.age ? \"red\" : \"\" }}\n//       />\n//       {errors.age && <small className=\"text-danger fst-italic\"><i>{errors.age}</i></small>}\n//     </div>\n//     <div className=\"mb-3\">\n//       <label className=\"form-label\">Department</label>\n//       <input\n//         type=\"text\"\n//         className={`form-control ${errors.department ? \"is-invalid\" : \"\"}`}\n//         value={department}\n//         onChange={(e) => setDepartment(e.target.value)}\n//         style={{ borderColor: errors.department ? \"red\" : \"\" }}\n//       />\n//       {errors.department && <small className=\"text-danger fst-italic\"><i>{errors.department}</i></small>}\n//     </div>\n//     <div className=\"mb-3\">\n//       <label className=\"form-label\">Salary</label>\n//       <input\n//         type=\"number\"\n//         className={`form-control ${errors.salary ? \"is-invalid\" : \"\"}`}\n//         value={salary}\n//         onChange={(e) => setSalary(e.target.value)}\n//         style={{ borderColor: errors.salary ? \"red\" : \"\" }}\n//       />\n//       {errors.salary && <small className=\"text-danger fst-italic\"><i>{errors.salary}</i></small>}\n//     </div>\n//     <div className=\"mb-3\">\n//       <label className=\"form-label\">Experience</label>\n//       <input\n//         type=\"number\"\n//         className={`form-control ${errors.experience ? \"is-invalid\" : \"\"}`}\n//         value={experience}\n//         onChange={(e) => setExperience(e.target.value)}\n//         style={{ borderColor: errors.experience ? \"red\" : \"\" }}\n//       />\n//       {errors.experience && <small className=\"text-danger fst-italic\"><i>{errors.experience}</i></small>}\n//     </div>\n//     {rules.length > 0 && (\n//       <div>\n//         <label className=\"form-label\">Select the rule by which you want to evaluate:</label>\n//         {rules.map((rule, index) => (\n//           <div key={index} className=\"form-check\">\n//             <input\n//               className=\"form-check-input\"\n//               type=\"radio\"\n//               value={rule._id}\n//               checked={selectedRule === rule._id}\n//               onChange={() => handleRuleSelection(rule._id)}\n//             />\n//             <label className=\"form-check-label\">\n//               {rule.rule}\n//             </label>\n//           </div>\n//         ))}\n//         {errors.selectedRule && <small className=\"text-danger fst-italic\"><i>{errors.selectedRule}</i></small>}\n//       </div>\n//     )}\n//     <div className='text-center'>\n//       <button\n//         type=\"button\"\n//         className=\"btn btn-primary mt-3 bg-dark\"\n//         onClick={validateEvaluation}\n//       >\n//         Evaluate\n//       </button>\n//     </div>\n//   </form>\n// )}\n//               </div>\n//               <div className=\"col-lg-3\"></div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     </section>\n//   );\n// };\n\n// export default Dashboard;\n\nimport { useState, useEffect } from 'react';\n\n// Define the AST evaluation functions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst evaluateAST = (ast, data) => {\n  if (ast.type === 'condition') {\n    console.log(ast.value);\n    let r = evalCondition(ast.value, data);\n    console.log(r);\n    console.log(' ');\n    return r;\n  }\n  const left = evaluateAST(ast.left, data);\n  const right = evaluateAST(ast.right, data);\n  if (ast.type === 'AND') {\n    return left && right;\n  } else if (ast.type === 'OR') {\n    return left || right;\n  }\n  return false;\n};\nconst evalCondition = (condition, data) => {\n  // Use a regex to match the field, operator, and value\n  const match = condition.match(/^(\\w+)\\s*(==|!=|<=|>=|<|>)\\s*(.+)$/);\n  console.log('Condition:', condition);\n  if (!match) {\n    throw new Error(`Invalid condition: ${condition}`);\n  }\n  const [, field, operator, value] = match;\n  console.log('Field:', field, 'Operator:', operator, 'Value:', value);\n\n  // Determine whether the value is numeric or a string and evaluate it accordingly\n  let formattedValue = value.trim();\n  if (isNaN(formattedValue)) {\n    let originalString = formattedValue;\n    formattedValue = `\"${originalString.replace(/'/g, '')}\"`;\n  }\n\n  // Convert the data field to a string if it's not a number, and compare it correctly\n  const dataValue = isNaN(data[field]) ? JSON.stringify(data[field]) : data[field];\n\n  // Log for debugging\n\n  console.log('Data Field Value:', dataValue, 'Formatted Value:', formattedValue);\n  return eval(`${dataValue} ${operator} ${formattedValue}`);\n};\nconst Dashboard = () => {\n  _s();\n  const [activeTab, setActiveTab] = useState('create');\n  const [rules, setRules] = useState([]);\n  const [rulegroup, group] = useState('');\n  //  const [selectedRules, setSelectedRules] = useState([]);\n  const [selectedRuleIndex, setSelectedRuleIndex] = useState(null);\n  // const [rule, setRule] = useState(\"\");\n  const [age, setAge] = useState('');\n  const [department, setDepartment] = useState('');\n  const [salary, setSalary] = useState('');\n  const [experience, setExperience] = useState('');\n  const [errors, setErrors] = useState({\n    rule: '',\n    age: '',\n    department: '',\n    salary: '',\n    experience: '',\n    selectedRule: ''\n  });\n  const [grouperrors, setgroupErrors] = useState('');\n  //const [selectedRule, setSelectedRule] = useState(\"\");\n\n  useEffect(() => {\n    if (activeTab === 'evaluate') {\n      fetchRules();\n    }\n  }, [activeTab]);\n  const fetchRules = () => {\n    fetch('http://localhost:5556/rules').then(response => response.json()).then(rulesArray => {\n      setRules(rulesArray);\n    }).catch(error => {\n      console.error('Error fetching rules:', error);\n    });\n  };\n\n  // combine rule section\n  const validate_combine_Rules = () => {\n    let valid = true;\n    let newErrors = '';\n    if (rulegroup.trim() === '') {\n      valid = false;\n      newErrors = 'Rule cannot be empty.';\n    } else if (rulegroup.length < 50) {\n      valid = false;\n      newErrors = 'Rule must be at least 50 characters long.';\n    } else if (!/AND|OR/.test(rulegroup)) {\n      valid = false;\n      newErrors = \"Rule must contain at least one 'AND' or 'OR' operator.\";\n    } else {\n      newErrors = '';\n    }\n    setgroupErrors(newErrors);\n    if (valid) {\n      if (rulegroup.trim() === '') {\n        setgroupErrors({\n          rule: 'Please enter at least one rule.'\n        });\n        return;\n      }\n      console.log(rulegroup);\n      // Split the rules by commas and trim spaces\n      const rulesArray = rulegroup.split(',').map(r => r.trim());\n\n      // Update the selectedRules state with the trimmed rules\n      // console.log(rulesArray[0]);\n      //   console.log(rulesArray[1]);\n      //  setSelectedRules(rulesArray);\n      // console.log(rulesArray);\n      submitRules(rulesArray);\n    }\n  };\n\n  // const validateRule = () => {\n  //   let valid = true;\n  //   let newErrors = { ...errors };\n\n  //   if (rulegroup.trim() === \"\") {\n  //     valid = false;\n  //     newErrors.rule = \"Rule cannot be empty.\";\n  //   } else if (rulegroup.length < 50) {\n  //     valid = false;\n  //     newErrors.rule = \"Rule must be at least 50 characters long.\";\n  //   } else if (!/AND|OR/.test(rulegroup)) {\n  //     valid = false;\n  //     newErrors.rule = \"Rule must contain at least one 'AND' or 'OR' operator.\";\n  //   } else {\n  //     newErrors.rule = \"\";\n  //   }\n\n  //   setErrors(newErrors);\n\n  //   if (valid) {\n  //     // Replace previous rules with the new rulegroup\n\n  //     let temp = [rulegroup];\n  //     console.log(selectedRules);\n  //     setSelectedRules(temp);\n\n  //     console.log(selectedRules);\n  //     submitRules(); // Call submitRules function to send the new rulegroup\n  //   }\n  // };\n\n  const validateRule = () => {\n    let valid = true;\n    let newErrors = {\n      ...errors\n    };\n    if (rulegroup.trim() === '') {\n      valid = false;\n      newErrors.rule = 'Rule cannot be empty.';\n    } else if (rulegroup.length < 50) {\n      valid = false;\n      newErrors.rule = 'Rule must be at least 50 characters long.';\n    } else if (!/AND|OR/.test(rulegroup)) {\n      valid = false;\n      newErrors.rule = \"Rule must contain at least one 'AND' or 'OR' operator.\";\n    } else {\n      newErrors.rule = '';\n    }\n    setErrors(newErrors);\n    if (valid) {\n      let temp = [];\n      temp.push(rulegroup);\n      submitRules(temp); // Call submitRules function to send the new rulegroup\n    }\n  };\n\n  const submitRules = array => {\n    const url = 'http://localhost:5556/rules';\n    //console.log(selectedRules);\n    const newRule = {\n      rule: array\n    };\n    console.log(array);\n    const postdata = {\n      headers: {\n        'Content-type': 'application/json'\n      },\n      method: 'POST',\n      body: JSON.stringify(newRule)\n    };\n    fetch(url, postdata).then(response => response.json()).then(data => {\n      alert('Rule Added Successfully!');\n    }).catch(error => {\n      console.error('Error submitting rule:', error);\n    });\n  };\n  const handleRuleSelection = index => {\n    setSelectedRuleIndex(index);\n  };\n\n  // evalution section\n\n  const validateEvaluation = () => {\n    let valid = true;\n    let newErrors = {\n      ...errors\n    };\n    if (age.trim() === '' || isNaN(age)) {\n      valid = false;\n      newErrors.age = 'Age must be a number and cannot be empty.';\n    } else {\n      newErrors.age = '';\n    }\n    if (department.trim() === '') {\n      valid = false;\n      newErrors.department = 'Department cannot be empty.';\n    } else {\n      newErrors.department = '';\n    }\n    if (salary.trim() === '' || isNaN(salary)) {\n      valid = false;\n      newErrors.salary = 'Salary must be a number and cannot be empty.';\n    } else {\n      newErrors.salary = '';\n    }\n    if (experience.trim() === '' || isNaN(experience)) {\n      valid = false;\n      newErrors.experience = 'Experience must be a number and cannot be empty.';\n    } else {\n      newErrors.experience = '';\n    }\n    if (selectedRuleIndex == null) {\n      valid = false;\n      newErrors.selectedRule = 'Please select a rule.';\n    } else {\n      newErrors.selectedRule = '';\n    }\n    setErrors(newErrors);\n    if (valid) {\n      getAST();\n    }\n  };\n  const getAST = () => {\n    // Ensure a rule is selected\n    if (selectedRuleIndex === null) {\n      alert('Please select a rule.');\n      return;\n    }\n\n    // Retrieve the selected rule from the rules array using the index\n    const selectedRule = rules[selectedRuleIndex];\n\n    // Extract the AST directly from the selected rule\n    const ast = selectedRule.ast;\n\n    // Prepare the evaluation data\n    const evaluationData = {\n      age,\n      department,\n      salary,\n      experience\n    };\n\n    // Call the evaluateAST function with the AST and evaluation data\n    const result = evaluateAST(ast, evaluationData);\n\n    // Handle the evaluation result (e.g., display a message or update the UI)\n    alert(`Evaluation Result: ${result ? 'True' : 'False'}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row mt-5\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-lg-12 text-center fs-1 fw-bold text-dark\",\n          children: \"Rules & Eligibility\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1068,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1067,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-lg-12 p-5 text-center\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"btn-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: `btn btn-outline-dark fw-bold ${activeTab === 'create' ? 'active' : ''}`,\n              onClick: () => setActiveTab('create'),\n              children: \"Create Rule\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1075,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `btn btn-outline-dark fw-bold ${activeTab === 'combine' ? 'active' : ''}`,\n              onClick: () => {\n                setActiveTab('combine');\n                fetchRules();\n              },\n              children: \"Combine Rules\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1083,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `btn btn-outline-dark fw-bold ${activeTab === 'evaluate' ? 'active' : ''}`,\n              onClick: () => {\n                setActiveTab('evaluate');\n                fetchRules();\n              },\n              children: \"Evaluate Rules\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1094,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1074,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1073,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1072,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row mb-5\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container p-5 feedback-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"text-center\",\n              children: [activeTab === 'create' && 'Create Rule', activeTab === 'combine' && 'Combine Rules', activeTab === 'evaluate' && 'Evaluate Rules']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1111,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1110,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-lg-3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1119,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-lg-6\",\n              children: [activeTab === 'create' && /*#__PURE__*/_jsxDEV(\"form\", {\n                children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n                  className: `form-control mb-3 ${errors.rule ? 'is-invalid' : ''}`,\n                  placeholder: \"Enter Rule\",\n                  value: rulegroup,\n                  onChange: e => group(e.target.value),\n                  rows: 8,\n                  style: {\n                    borderColor: errors.rule ? 'red' : ''\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1123,\n                  columnNumber: 21\n                }, this), errors.rule && /*#__PURE__*/_jsxDEV(\"small\", {\n                  className: \"text-danger fst-italic\",\n                  children: /*#__PURE__*/_jsxDEV(\"i\", {\n                    children: errors.rule\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1135,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1134,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text-center\",\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    className: \"btn btn-primary mt-3\",\n                    onClick: validateRule,\n                    children: \"Submit\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1139,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1138,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1122,\n                columnNumber: 19\n              }, this), activeTab === 'combine' && /*#__PURE__*/_jsxDEV(\"form\", {\n                children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                  children: \"Write rules and separate them by commas\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1152,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n                  className: `form-control mb-3 ${errors.rule ? 'is-invalid' : ''}`,\n                  placeholder: \"Enter rules separated by commas\",\n                  value: rulegroup,\n                  onChange: e => group(e.target.value),\n                  rows: 8,\n                  style: {\n                    borderColor: errors.rule ? 'red' : ''\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1153,\n                  columnNumber: 21\n                }, this), grouperrors && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text-danger\",\n                  children: grouperrors\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1164,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text-center\",\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    className: \"btn btn-primary mt-3\",\n                    onClick: validate_combine_Rules,\n                    children: \"Combine\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1167,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1166,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1151,\n                columnNumber: 19\n              }, this), activeTab === 'evaluate' && /*#__PURE__*/_jsxDEV(\"form\", {\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mb-3\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"form-label\",\n                    children: \"Age\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1181,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"number\",\n                    className: `form-control ${errors.age ? 'is-invalid' : ''}`,\n                    value: age,\n                    onChange: e => setAge(e.target.value),\n                    style: {\n                      borderColor: errors.age ? 'red' : ''\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1182,\n                    columnNumber: 23\n                  }, this), errors.age && /*#__PURE__*/_jsxDEV(\"small\", {\n                    className: \"text-danger fst-italic\",\n                    children: /*#__PURE__*/_jsxDEV(\"i\", {\n                      children: errors.age\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1193,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1192,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1180,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mb-3\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"form-label\",\n                    children: \"Department\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1198,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"text\",\n                    className: `form-control ${errors.department ? 'is-invalid' : ''}`,\n                    value: department,\n                    onChange: e => setDepartment(e.target.value),\n                    style: {\n                      borderColor: errors.department ? 'red' : ''\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1199,\n                    columnNumber: 23\n                  }, this), errors.department && /*#__PURE__*/_jsxDEV(\"small\", {\n                    className: \"text-danger fst-italic\",\n                    children: /*#__PURE__*/_jsxDEV(\"i\", {\n                      children: errors.department\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1210,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1209,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1197,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mb-3\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"form-label\",\n                    children: \"Salary\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1215,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"number\",\n                    className: `form-control ${errors.salary ? 'is-invalid' : ''}`,\n                    value: salary,\n                    onChange: e => setSalary(e.target.value),\n                    style: {\n                      borderColor: errors.salary ? 'red' : ''\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1216,\n                    columnNumber: 23\n                  }, this), errors.salary && /*#__PURE__*/_jsxDEV(\"small\", {\n                    className: \"text-danger fst-italic\",\n                    children: /*#__PURE__*/_jsxDEV(\"i\", {\n                      children: errors.salary\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1227,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1226,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1214,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mb-3\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"form-label\",\n                    children: \"Experience\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1232,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"number\",\n                    className: `form-control ${errors.experience ? 'is-invalid' : ''}`,\n                    value: experience,\n                    onChange: e => setExperience(e.target.value),\n                    style: {\n                      borderColor: errors.experience ? 'red' : ''\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1233,\n                    columnNumber: 23\n                  }, this), errors.experience && /*#__PURE__*/_jsxDEV(\"small\", {\n                    className: \"text-danger fst-italic\",\n                    children: /*#__PURE__*/_jsxDEV(\"i\", {\n                      children: errors.experience\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1244,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1243,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1231,\n                  columnNumber: 21\n                }, this), rules.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"form-label\",\n                    children: \"Select the rule by which you want to evaluate:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1251,\n                    columnNumber: 25\n                  }, this), rules.map((rule, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"form-check\",\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      className: \"form-check-input\",\n                      type: \"radio\",\n                      value: index,\n                      checked: selectedRuleIndex === index,\n                      onChange: () => handleRuleSelection(index)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1256,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"form-check-label\",\n                      children: rule.rule\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1263,\n                      columnNumber: 29\n                    }, this)]\n                  }, index, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1255,\n                    columnNumber: 27\n                  }, this)), errors.selectedRule && /*#__PURE__*/_jsxDEV(\"small\", {\n                    className: \"text-danger fst-italic\",\n                    children: /*#__PURE__*/_jsxDEV(\"i\", {\n                      children: errors.selectedRule\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1271,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1270,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1250,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text-center\",\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    className: \"btn btn-primary mt-3 bg-dark\",\n                    onClick: validateEvaluation,\n                    children: \"Evaluate\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1277,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1276,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1179,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1120,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-lg-3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1288,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1118,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1109,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1066,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1065,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"HSaHiD0xaw6bL553p0ab3ok7DCw=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","evaluateAST","ast","data","type","console","log","value","r","evalCondition","left","right","condition","match","Error","field","operator","formattedValue","trim","isNaN","originalString","replace","dataValue","JSON","stringify","eval","Dashboard","_s","activeTab","setActiveTab","rules","setRules","rulegroup","group","selectedRuleIndex","setSelectedRuleIndex","age","setAge","department","setDepartment","salary","setSalary","experience","setExperience","errors","setErrors","rule","selectedRule","grouperrors","setgroupErrors","fetchRules","fetch","then","response","json","rulesArray","catch","error","validate_combine_Rules","valid","newErrors","length","test","split","map","submitRules","validateRule","temp","push","array","url","newRule","postdata","headers","method","body","alert","handleRuleSelection","index","validateEvaluation","getAST","evaluationData","result","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","placeholder","onChange","e","target","rows","style","borderColor","checked","_c","$RefreshReg$"],"sources":["C:/Users/ashut/Desktop/feedback_portal - Copy/reactapp/src/Dashboard.js"],"sourcesContent":["// import { useState, useEffect } from \"react\";\r\n\r\n// const Dashboard = () => {\r\n//   const [activeTab, setActiveTab] = useState(\"create\");\r\n//   const [rules, setRules] = useState([]);\r\n//   const [selectedRules, setSelectedRules] = useState([]);\r\n//   const [rule, setRule] = useState(\"\");\r\n//   const [age, setAge] = useState(\"\");\r\n//   const [department, setDepartment] = useState(\"\");\r\n//   const [salary, setSalary] = useState(\"\");\r\n//   const [experience, setExperience] = useState(\"\");\r\n//   const [errors, setErrors] = useState({\r\n//     rule: \"\",\r\n//     age: \"\",\r\n//     department: \"\",\r\n//     salary: \"\",\r\n//     experience: \"\",\r\n//     selectedRule: \"\",\r\n//   });\r\n//   const [selectedRule, setSelectedRule] = useState(\"\");\r\n\r\n//   useEffect(() => {\r\n//     if (activeTab === \"evaluate\") {\r\n//       fetchRules();\r\n//     }\r\n//   }, [activeTab]);\r\n\r\n//   const fetchRules = () => {\r\n//     fetch(\"http://localhost:5556/rules\")\r\n//       .then((response) => response.json())\r\n//       .then((rulesArray) => {\r\n//         setRules(rulesArray);\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(\"Error fetching rules:\", error);\r\n//       });\r\n//   };\r\n\r\n//   const handleRuleSelection = (rule) => {\r\n//     setSelectedRule(rule);\r\n//   };\r\n\r\n//   const handleCombineRules = () => {\r\n//     console.log(\"Combining rules:\", selectedRules);\r\n//     alert(\"Rules combined successfully!\");\r\n//   };\r\n\r\n//   const validateRule = () => {\r\n//     let valid = true;\r\n//     let newErrors = { ...errors };\r\n\r\n//     if (rule.trim() === \"\") {\r\n//       valid = false;\r\n//       newErrors.rule = \"Rule cannot be empty.\";\r\n//     } else if (rule.length < 50) {\r\n//       valid = false;\r\n//       newErrors.rule = \"Rule must be at least 50 characters long.\";\r\n//     } else if (!/AND|OR/.test(rule)) {\r\n//       valid = false;\r\n//       newErrors.rule = \"Rule must contain at least one 'AND' or 'OR' operator.\";\r\n//     } else {\r\n//       newErrors.rule = \"\";\r\n//     }\r\n\r\n//     setErrors(newErrors);\r\n\r\n//     if (valid) {\r\n//       submitRule();\r\n//     }\r\n//   };\r\n\r\n//   const submitRule = () => {\r\n//     const url = \"http://localhost:5556/rules\";\r\n//     const newRule = {\r\n//       rule: rule,\r\n//     };\r\n\r\n//     const postdata = {\r\n//       headers: { \"Content-type\": \"application/json\" },\r\n//       method: \"POST\",\r\n//       body: JSON.stringify(newRule),\r\n//     };\r\n\r\n//     fetch(url, postdata)\r\n//       .then((response) => response.json())\r\n//       .then((data) => {\r\n//         alert(\"Rule Added Successfully!\");\r\n//         setRule(\"\");\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(\"Error submitting rule:\", error);\r\n//       });\r\n//   };\r\n\r\n//   const validateEvaluation = () => {\r\n//     let valid = true;\r\n//     let newErrors = { ...errors };\r\n\r\n//     if (age.trim() === \"\" || isNaN(age)) {\r\n//       valid = false;\r\n//       newErrors.age = \"Age must be a number and cannot be empty.\";\r\n//     } else {\r\n//       newErrors.age = \"\";\r\n//     }\r\n\r\n//     if (department.trim() === \"\") {\r\n//       valid = false;\r\n//       newErrors.department = \"Department cannot be empty.\";\r\n//     } else {\r\n//       newErrors.department = \"\";\r\n//     }\r\n\r\n//     if (salary.trim() === \"\" || isNaN(salary)) {\r\n//       valid = false;\r\n//       newErrors.salary = \"Salary must be a number and cannot be empty.\";\r\n//     } else {\r\n//       newErrors.salary = \"\";\r\n//     }\r\n\r\n//     if (experience.trim() === \"\" || isNaN(experience)) {\r\n//       valid = false;\r\n//       newErrors.experience = \"Experience must be a number and cannot be empty.\";\r\n//     } else {\r\n//       newErrors.experience = \"\";\r\n//     }\r\n\r\n//     if (!selectedRule) {\r\n//       valid = false;\r\n//       newErrors.selectedRule = \"Please select a rule.\";\r\n//     } else {\r\n//       newErrors.selectedRule = \"\";\r\n//     }\r\n\r\n//     setErrors(newErrors);\r\n\r\n//     if (valid) {\r\n//       submitEvaluation();\r\n//     }\r\n//   };\r\n\r\n//   const submitEvaluation = () => {\r\n//     const url = \"http://localhost:5556/evaluateRule\";\r\n//     const evaluationData = {\r\n//       age,\r\n//       department,\r\n//       salary,\r\n//       experience,\r\n//       rule: selectedRule,\r\n//     };\r\n\r\n//     const postdata = {\r\n//       headers: { \"Content-type\": \"application/json\" },\r\n//       method: \"POST\",\r\n//       body: JSON.stringify(evaluationData),\r\n//     };\r\n\r\n//     fetch(url, postdata)\r\n//       .then((response) => response.json())\r\n//       .then((data) => {\r\n//         alert(`Evaluation Result: ${data.result ? \"True\" : \"False\"}`);\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(\"Error evaluating rule:\", error);\r\n//       });\r\n//   };\r\n\r\n//   return (\r\n//     <section>\r\n//       <div className=\"container\">\r\n//         <div className=\"row mt-5\">\r\n//           <div className=\"col-lg-12 text-center fs-1 fw-bold text-dark\">\r\n//             Rules & Eligibility\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"row\">\r\n//           <div className=\"col-lg-12 p-5 text-center\">\r\n//             <div className=\"btn-group\">\r\n//               <button\r\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"create\" ? \"active\" : \"\"}`}\r\n//                 onClick={() => setActiveTab(\"create\")}\r\n//               >\r\n//                 Create Rule\r\n//               </button>\r\n//               <button\r\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"combine\" ? \"active\" : \"\"}`}\r\n//                 onClick={() => {\r\n//                   setActiveTab(\"combine\");\r\n//                   fetchRules();\r\n//                 }}\r\n//               >\r\n//                 Combine Rules\r\n//               </button>\r\n//               <button\r\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"evaluate\" ? \"active\" : \"\"}`}\r\n//                 onClick={() => {\r\n//                   setActiveTab(\"evaluate\");\r\n//                   fetchRules();\r\n//                 }}\r\n//               >\r\n//                 Evaluate Rules\r\n//               </button>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"row mb-5\">\r\n//           <div className=\"container p-5 feedback-box\">\r\n//             <div className=\"row\">\r\n//               <h3 className=\"text-center\">\r\n//                 {activeTab === \"create\" && \"Create Rule\"}\r\n//                 {activeTab === \"combine\" && \"Combine Rules\"}\r\n//                 {activeTab === \"evaluate\" && \"Evaluate Rules\"}\r\n//               </h3>\r\n//             </div>\r\n\r\n//             <div className=\"row\">\r\n//               <div className=\"col-lg-3\"></div>\r\n//               <div className=\"col-lg-6\">\r\n//                 {activeTab === \"create\" && (\r\n//                   <form>\r\n//                     <textarea\r\n//                       className={`form-control mb-3 ${errors.rule ? \"is-invalid\" : \"\"}`}\r\n//                       placeholder=\"Enter Rule\"\r\n//                       value={rule}\r\n//                       onChange={(e) => setRule(e.target.value)}\r\n//                       rows={8}\r\n//                       style={{ borderColor: errors.rule ? \"red\" : \"\" }}\r\n//                     ></textarea>\r\n//                     {errors.rule && <small className=\"text-danger fst-italic\"><i>{errors.rule}</i></small>}\r\n//                     <div className='text-center'>\r\n//                       <button\r\n//                         type=\"button\"\r\n//                         className=\"btn btn-primary mt-3 bg-dark\"\r\n//                         onClick={validateRule}\r\n//                       >\r\n//                         Create Rule\r\n//                       </button>\r\n//                     </div>\r\n//                   </form>\r\n//                 )}\r\n\r\n//                 {activeTab === \"combine\" && (\r\n//                   <div>\r\n//                     {rules.length > 0 ? (\r\n//                       <form>\r\n//                         {rules.map((rule, index) => (\r\n//                         <div key={index} className=\"form-check\">\r\n//                           <input\r\n//                             className=\"form-check-input\"\r\n//                             type=\"checkbox\"\r\n//                             value={rule._id}\r\n//                             onChange={() => handleRuleSelection(rule.rule)}\r\n//                           />\r\n//                           <label className=\"form-check-label\">\r\n//                             {rule.rule}\r\n//                           </label>\r\n//                         </div>\r\n//                       ))}\r\n\r\n//                        <div className='text-center'>\r\n//                         <button\r\n//                           type=\"button\"\r\n//                           className=\"btn btn-primary mt-3 bg-dark\"\r\n//                           onClick={handleCombineRules}\r\n//                         >\r\n//                           Combine Selected Rules\r\n//                         </button>\r\n//                         </div>\r\n//                       </form>\r\n//                     ) : (\r\n//                       <p>No rules available. Click the button to fetch rules.</p>\r\n//                     )}\r\n//                   </div>\r\n//                 )}\r\n\r\n//                 {activeTab === \"evaluate\" && (\r\n//                   <form>\r\n//                     <div className=\"mb-3\">\r\n//                       <label className=\"form-label\">Age</label>\r\n//                       <input\r\n//                         type=\"number\"\r\n//                         className={`form-control ${errors.age ? \"is-invalid\" : \"\"}`}\r\n//                         value={age}\r\n//                         onChange={(e) => setAge(e.target.value)}\r\n//                         style={{ borderColor: errors.age ? \"red\" : \"\" }}\r\n//                       />\r\n//                       {errors.age && <small className=\"text-danger fst-italic\"><i>{errors.age}</i></small>}\r\n//                     </div>\r\n//                     <div className=\"mb-3\">\r\n//                       <label className=\"form-label\">Department</label>\r\n//                       <input\r\n//                         type=\"text\"\r\n//                         className={`form-control ${errors.department ? \"is-invalid\" : \"\"}`}\r\n//                         value={department}\r\n//                         onChange={(e) => setDepartment(e.target.value)}\r\n//                         style={{ borderColor: errors.department ? \"red\" : \"\" }}\r\n//                       />\r\n//                       {errors.department && <small className=\"text-danger fst-italic\"><i>{errors.department}</i></small>}\r\n//                     </div>\r\n//                     <div className=\"mb-3\">\r\n//                       <label className=\"form-label\">Salary</label>\r\n//                       <input\r\n//                         type=\"number\"\r\n//                         className={`form-control ${errors.salary ? \"is-invalid\" : \"\"}`}\r\n//                         value={salary}\r\n//                         onChange={(e) => setSalary(e.target.value)}\r\n//                         style={{ borderColor: errors.salary ? \"red\" : \"\" }}\r\n//                       />\r\n//                       {errors.salary && <small className=\"text-danger fst-italic\"><i>{errors.salary}</i></small>}\r\n//                     </div>\r\n//                     <div className=\"mb-3\">\r\n//                       <label className=\"form-label\">Experience</label>\r\n//                       <input\r\n//                         type=\"number\"\r\n//                         className={`form-control ${errors.experience ? \"is-invalid\" : \"\"}`}\r\n//                         value={experience}\r\n//                         onChange={(e) => setExperience(e.target.value)}\r\n//                         style={{ borderColor: errors.experience ? \"red\" : \"\" }}\r\n//                       />\r\n//                       {errors.experience && <small className=\"text-danger fst-italic\"><i>{errors.experience}</i></small>}\r\n//                     </div>\r\n//                     {rules.length > 0 && (\r\n//                       <div>\r\n//                          <label className=\"form-label\">Select the rule by which you want to evaluate : </label>\r\n//                         {rules.map((rule, index) => (\r\n//                           <div key={index} className=\"form-check\">\r\n//                             <input\r\n//                               className=\"form-check-input\"\r\n//                               type=\"radio\"\r\n//                               value={rule._id}\r\n//                               checked={selectedRule === rule._id}\r\n//                               onChange={() => handleRuleSelection(rule._id)}\r\n//                             />\r\n//                             <label className=\"form-check-label\">\r\n//                               {rule.rule}\r\n//                             </label>\r\n//                           </div>\r\n//                         ))}\r\n//                         {errors.selectedRule && <small className=\"text-danger fst-italic\"><i>{errors.selectedRule}</i></small>}\r\n//                       </div>\r\n//                     )}\r\n//                     <div className='text-center'>\r\n//                       <button\r\n//                         type=\"button\"\r\n//                         className=\"btn btn-primary mt-3 bg-dark\"\r\n//                         onClick={validateEvaluation}\r\n//                       >\r\n//                         Evaluate\r\n//                       </button>\r\n//                     </div>\r\n//                   </form>\r\n//                 )}\r\n\r\n//               </div>\r\n//               <div className=\"col-lg-3\"></div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </section>\r\n//   );\r\n// };\r\n\r\n// export default Dashboard;\r\n\r\n// import { useState, useEffect } from \"react\";\r\n\r\n// // Define the AST evaluation functions\r\n// const evaluateAST = (ast, data) => {\r\n//   if (ast.type === 'condition') {\r\n//     return evalCondition(ast.value, data);\r\n//   }\r\n\r\n//   const left = evaluateAST(ast.left, data);\r\n//   const right = evaluateAST(ast.right, data);\r\n\r\n//   if (ast.type === 'AND') {\r\n//     return left && right;\r\n//   } else if (ast.type === 'OR') {\r\n//     return left || right;\r\n//   }\r\n\r\n//   return false;\r\n// };\r\n\r\n// const evalCondition = (condition, data) => {\r\n//   const [field, operator, value] = condition.split(/(?<=[<>=!]=?)\\s?/);\r\n//   if (isNaN(value)) {\r\n//     return eval(`${JSON.stringify(data[field])} ${operator} ${value}`);\r\n//   }\r\n//   return eval(`${data[field]} ${operator} ${value}`);\r\n// };\r\n\r\n// const Dashboard = () => {\r\n//   const [activeTab, setActiveTab] = useState(\"create\");\r\n//   const [rules, setRules] = useState([]);\r\n//   const [selectedRules, setSelectedRules] = useState([]);\r\n//   const [rule, setRule] = useState(\"\");\r\n//   const [age, setAge] = useState(\"\");\r\n//   const [department, setDepartment] = useState(\"\");\r\n//   const [salary, setSalary] = useState(\"\");\r\n//   const [experience, setExperience] = useState(\"\");\r\n//   const [errors, setErrors] = useState({\r\n//     rule: \"\",\r\n//     age: \"\",\r\n//     department: \"\",\r\n//     salary: \"\",\r\n//     experience: \"\",\r\n//     selectedRule: \"\",\r\n//   });\r\n//   const [selectedRule, setSelectedRule] = useState(\"\");\r\n\r\n//   useEffect(() => {\r\n//     if (activeTab === \"evaluate\") {\r\n//       fetchRules();\r\n//     }\r\n//   }, [activeTab]);\r\n\r\n//   const fetchRules = () => {\r\n//     fetch(\"http://localhost:5556/rules\")\r\n//       .then((response) => response.json())\r\n//       .then((rulesArray) => {\r\n//         setRules(rulesArray);\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(\"Error fetching rules:\", error);\r\n//       });\r\n//   };\r\n\r\n//   const handleRuleSelection = (rule) => {\r\n//     setSelectedRule(rule);\r\n//   };\r\n\r\n//   const handleCombineRules = () => {\r\n//     console.log(\"Combining rules:\", selectedRules);\r\n//     alert(\"Rules combined successfully!\");\r\n//   };\r\n\r\n//   const validateRule = () => {\r\n//     let valid = true;\r\n//     let newErrors = { ...errors };\r\n\r\n//     if (rule.trim() === \"\") {\r\n//       valid = false;\r\n//       newErrors.rule = \"Rule cannot be empty.\";\r\n//     } else if (rule.length < 50) {\r\n//       valid = false;\r\n//       newErrors.rule = \"Rule must be at least 50 characters long.\";\r\n//     } else if (!/AND|OR/.test(rule)) {\r\n//       valid = false;\r\n//       newErrors.rule = \"Rule must contain at least one 'AND' or 'OR' operator.\";\r\n//     } else {\r\n//       newErrors.rule = \"\";\r\n//     }\r\n\r\n//     setErrors(newErrors);\r\n\r\n//     if (valid) {\r\n//       submitRule();\r\n//     }\r\n//   };\r\n\r\n//   const submitRule = () => {\r\n//     const url = \"http://localhost:5556/rules\";\r\n//     const newRule = {\r\n//       rule: rule,\r\n//     };\r\n\r\n//     const postdata = {\r\n//       headers: { \"Content-type\": \"application/json\" },\r\n//       method: \"POST\",\r\n//       body: JSON.stringify(newRule),\r\n//     };\r\n\r\n//     fetch(url, postdata)\r\n//       .then((response) => response.json())\r\n//       .then((data) => {\r\n//         alert(\"Rule Added Successfully!\");\r\n//         setRule(\"\");\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(\"Error submitting rule:\", error);\r\n//       });\r\n//   };\r\n\r\n//   const validateEvaluation = () => {\r\n//     let valid = true;\r\n//     let newErrors = { ...errors };\r\n\r\n//     if (age.trim() === \"\" || isNaN(age)) {\r\n//       valid = false;\r\n//       newErrors.age = \"Age must be a number and cannot be empty.\";\r\n//     } else {\r\n//       newErrors.age = \"\";\r\n//     }\r\n\r\n//     if (department.trim() === \"\") {\r\n//       valid = false;\r\n//       newErrors.department = \"Department cannot be empty.\";\r\n//     } else {\r\n//       newErrors.department = \"\";\r\n//     }\r\n\r\n//     if (salary.trim() === \"\" || isNaN(salary)) {\r\n//       valid = false;\r\n//       newErrors.salary = \"Salary must be a number and cannot be empty.\";\r\n//     } else {\r\n//       newErrors.salary = \"\";\r\n//     }\r\n\r\n//     if (experience.trim() === \"\" || isNaN(experience)) {\r\n//       valid = false;\r\n//       newErrors.experience = \"Experience must be a number and cannot be empty.\";\r\n//     } else {\r\n//       newErrors.experience = \"\";\r\n//     }\r\n\r\n//     if (!selectedRule) {\r\n//       valid = false;\r\n//       newErrors.selectedRule = \"Please select a rule.\";\r\n//     } else {\r\n//       newErrors.selectedRule = \"\";\r\n//     }\r\n\r\n//     setErrors(newErrors);\r\n\r\n//     if (valid) {\r\n//       submitEvaluation();\r\n//     }\r\n//   };\r\n\r\n//   const submitEvaluation = () => {\r\n//     const url = \"http://localhost:5556/Rules\";\r\n// const evaluationData = {\r\n//   age,\r\n//   department,\r\n//   salary,\r\n//   experience,\r\n//   rule: selectedRule,\r\n// };\r\n\r\n//     const postdata = {\r\n//       headers: { \"Content-type\": \"application/json\" },\r\n//       method: \"POST\",\r\n//       body: JSON.stringify(evaluationData),\r\n//     };\r\n\r\n//     fetch(url, postdata)\r\n//       .then((response) => {\r\n//         if (!response.ok) {\r\n//           throw new Error(`HTTP error! Status: ${response.status}`);\r\n//         }\r\n//         return response.json();\r\n//       })\r\n//       .then((data) => {\r\n//         const ast = data.ruleAST; // Modify according to your actual server response\r\n//         const result = evaluateAST(ast, evaluationData);\r\n//         alert(`Evaluation Result: ${result ? \"True\" : \"False\"}`);\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(\"Error evaluating rule:\", error.message);\r\n//         alert(`An error occurred: ${error.message}`);\r\n//       });\r\n//   };\r\n\r\n//   return (\r\n//     <section>\r\n//       <div className=\"container\">\r\n//         <div className=\"row mt-5\">\r\n//           <div className=\"col-lg-12 text-center fs-1 fw-bold text-dark\">\r\n//             Rules & Eligibility\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"row\">\r\n//           <div className=\"col-lg-12 p-5 text-center\">\r\n//             <div className=\"btn-group\">\r\n//               <button\r\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"create\" ? \"active\" : \"\"}`}\r\n//                 onClick={() => setActiveTab(\"create\")}\r\n//               >\r\n//                 Create Rule\r\n//               </button>\r\n//               <button\r\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"combine\" ? \"active\" : \"\"}`}\r\n//                 onClick={() => {\r\n//                   setActiveTab(\"combine\");\r\n//                   fetchRules();\r\n//                 }}\r\n//               >\r\n//                 Combine Rules\r\n//               </button>\r\n//               <button\r\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"evaluate\" ? \"active\" : \"\"}`}\r\n//                 onClick={() => {\r\n//                   setActiveTab(\"evaluate\");\r\n//                   fetchRules();\r\n//                 }}\r\n//               >\r\n//                 Evaluate Rules\r\n//               </button>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"row mb-5\">\r\n//           <div className=\"container p-5 feedback-box\">\r\n//             <div className=\"row\">\r\n//               <h3 className=\"text-center\">\r\n//                 {activeTab === \"create\" && \"Create Rule\"}\r\n//                 {activeTab === \"combine\" && \"Combine Rules\"}\r\n//                 {activeTab === \"evaluate\" && \"Evaluate Rules\"}\r\n//               </h3>\r\n//             </div>\r\n\r\n//             <div className=\"row\">\r\n//               <div className=\"col-lg-3\"></div>\r\n//               <div className=\"col-lg-6\">\r\n//                 {activeTab === \"create\" && (\r\n//                   <form>\r\n//                     <textarea\r\n//                       className={`form-control mb-3 ${errors.rule ? \"is-invalid\" : \"\"}`}\r\n//                       placeholder=\"Enter Rule\"\r\n//                       value={rule}\r\n//                       onChange={(e) => setRule(e.target.value)}\r\n//                       rows={8}\r\n//                       style={{ borderColor: errors.rule ? \"red\" : \"\" }}\r\n//                     ></textarea>\r\n//                     {errors.rule && <small className=\"text-danger fst-italic\"><i>{errors.rule}</i></small>}\r\n//                     <div className='text-center'>\r\n//                       <button\r\n//                         type=\"button\"\r\n//                         className=\"btn btn-primary mt-3 bg-dark\"\r\n//                         onClick={validateRule}\r\n//                       >\r\n//                         Create Rule\r\n//                       </button>\r\n//                     </div>\r\n//                   </form>\r\n//                 )}\r\n\r\n//                 {activeTab === \"combine\" && (\r\n//                   <div>\r\n//                     {rules.length > 0 ? (\r\n//                       <form>\r\n//                         {rules.map((rule, index) => (\r\n//                           <div key={index} className=\"form-check\">\r\n//                             <input\r\n//                               className=\"form-check-input\"\r\n//                               type=\"checkbox\"\r\n//                               value={rule._id}\r\n//                               onChange={() => handleRuleSelection(rule.rule)}\r\n//                             />\r\n//                             <label className=\"form-check-label\">\r\n//                               {rule.rule}\r\n//                             </label>\r\n//                           </div>\r\n//                         ))}\r\n\r\n//                         <div className='text-center'>\r\n//                           <button\r\n//                             type=\"button\"\r\n//                             className=\"btn btn-primary mt-3 bg-dark\"\r\n//                             onClick={handleCombineRules}\r\n//                           >\r\n//                             Combine Selected Rules\r\n//                           </button>\r\n//                         </div>\r\n//                       </form>\r\n//                     ) : (\r\n//                       <p>No rules available. Click the button to fetch rules.</p>\r\n//                     )}\r\n//                   </div>\r\n//                 )}\r\n\r\n// {activeTab === \"evaluate\" && (\r\n//   <form>\r\n//     <div className=\"mb-3\">\r\n//       <label className=\"form-label\">Age</label>\r\n//       <input\r\n//         type=\"number\"\r\n//         className={`form-control ${errors.age ? \"is-invalid\" : \"\"}`}\r\n//         value={age}\r\n//         onChange={(e) => setAge(e.target.value)}\r\n//         style={{ borderColor: errors.age ? \"red\" : \"\" }}\r\n//       />\r\n//       {errors.age && <small className=\"text-danger fst-italic\"><i>{errors.age}</i></small>}\r\n//     </div>\r\n//     <div className=\"mb-3\">\r\n//       <label className=\"form-label\">Department</label>\r\n//       <input\r\n//         type=\"text\"\r\n//         className={`form-control ${errors.department ? \"is-invalid\" : \"\"}`}\r\n//         value={department}\r\n//         onChange={(e) => setDepartment(e.target.value)}\r\n//         style={{ borderColor: errors.department ? \"red\" : \"\" }}\r\n//       />\r\n//       {errors.department && <small className=\"text-danger fst-italic\"><i>{errors.department}</i></small>}\r\n//     </div>\r\n//     <div className=\"mb-3\">\r\n//       <label className=\"form-label\">Salary</label>\r\n//       <input\r\n//         type=\"number\"\r\n//         className={`form-control ${errors.salary ? \"is-invalid\" : \"\"}`}\r\n//         value={salary}\r\n//         onChange={(e) => setSalary(e.target.value)}\r\n//         style={{ borderColor: errors.salary ? \"red\" : \"\" }}\r\n//       />\r\n//       {errors.salary && <small className=\"text-danger fst-italic\"><i>{errors.salary}</i></small>}\r\n//     </div>\r\n//     <div className=\"mb-3\">\r\n//       <label className=\"form-label\">Experience</label>\r\n//       <input\r\n//         type=\"number\"\r\n//         className={`form-control ${errors.experience ? \"is-invalid\" : \"\"}`}\r\n//         value={experience}\r\n//         onChange={(e) => setExperience(e.target.value)}\r\n//         style={{ borderColor: errors.experience ? \"red\" : \"\" }}\r\n//       />\r\n//       {errors.experience && <small className=\"text-danger fst-italic\"><i>{errors.experience}</i></small>}\r\n//     </div>\r\n//     {rules.length > 0 && (\r\n//       <div>\r\n//         <label className=\"form-label\">Select the rule by which you want to evaluate:</label>\r\n//         {rules.map((rule, index) => (\r\n//           <div key={index} className=\"form-check\">\r\n//             <input\r\n//               className=\"form-check-input\"\r\n//               type=\"radio\"\r\n//               value={rule._id}\r\n//               checked={selectedRule === rule._id}\r\n//               onChange={() => handleRuleSelection(rule._id)}\r\n//             />\r\n//             <label className=\"form-check-label\">\r\n//               {rule.rule}\r\n//             </label>\r\n//           </div>\r\n//         ))}\r\n//         {errors.selectedRule && <small className=\"text-danger fst-italic\"><i>{errors.selectedRule}</i></small>}\r\n//       </div>\r\n//     )}\r\n//     <div className='text-center'>\r\n//       <button\r\n//         type=\"button\"\r\n//         className=\"btn btn-primary mt-3 bg-dark\"\r\n//         onClick={validateEvaluation}\r\n//       >\r\n//         Evaluate\r\n//       </button>\r\n//     </div>\r\n//   </form>\r\n// )}\r\n//               </div>\r\n//               <div className=\"col-lg-3\"></div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </section>\r\n//   );\r\n// };\r\n\r\n// export default Dashboard;\r\n\r\nimport { useState, useEffect } from 'react';\r\n\r\n// Define the AST evaluation functions\r\nconst evaluateAST = (ast, data) => {\r\n  if (ast.type === 'condition') {\r\n    console.log(ast.value);\r\n\r\n    let r = evalCondition(ast.value, data);\r\n    console.log(r);\r\n    console.log(' ');\r\n    return r;\r\n  }\r\n\r\n  const left = evaluateAST(ast.left, data);\r\n  const right = evaluateAST(ast.right, data);\r\n\r\n  if (ast.type === 'AND') {\r\n    return left && right;\r\n  } else if (ast.type === 'OR') {\r\n    return left || right;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nconst evalCondition = (condition, data) => {\r\n  // Use a regex to match the field, operator, and value\r\n  const match = condition.match(/^(\\w+)\\s*(==|!=|<=|>=|<|>)\\s*(.+)$/);\r\n\r\n  console.log('Condition:', condition);\r\n\r\n  if (!match) {\r\n    throw new Error(`Invalid condition: ${condition}`);\r\n  }\r\n\r\n  const [, field, operator, value] = match;\r\n\r\n  console.log('Field:', field, 'Operator:', operator, 'Value:', value);\r\n\r\n  // Determine whether the value is numeric or a string and evaluate it accordingly\r\n  let formattedValue = value.trim();\r\n\r\n  if (isNaN(formattedValue)) {\r\n    let originalString = formattedValue;\r\n    formattedValue = `\"${originalString.replace(/'/g, '')}\"`;\r\n  }\r\n\r\n  // Convert the data field to a string if it's not a number, and compare it correctly\r\n  const dataValue = isNaN(data[field])\r\n    ? JSON.stringify(data[field])\r\n    : data[field];\r\n\r\n  // Log for debugging\r\n\r\n  console.log(\r\n    'Data Field Value:',\r\n    dataValue,\r\n    'Formatted Value:',\r\n    formattedValue\r\n  );\r\n\r\n  return eval(`${dataValue} ${operator} ${formattedValue}`);\r\n};\r\n\r\nconst Dashboard = () => {\r\n  const [activeTab, setActiveTab] = useState('create');\r\n  const [rules, setRules] = useState([]);\r\n  const [rulegroup, group] = useState('');\r\n  //  const [selectedRules, setSelectedRules] = useState([]);\r\n  const [selectedRuleIndex, setSelectedRuleIndex] = useState(null);\r\n  // const [rule, setRule] = useState(\"\");\r\n  const [age, setAge] = useState('');\r\n  const [department, setDepartment] = useState('');\r\n  const [salary, setSalary] = useState('');\r\n  const [experience, setExperience] = useState('');\r\n  const [errors, setErrors] = useState({\r\n    rule: '',\r\n    age: '',\r\n    department: '',\r\n    salary: '',\r\n    experience: '',\r\n    selectedRule: '',\r\n  });\r\n\r\n  const [grouperrors, setgroupErrors] = useState('');\r\n  //const [selectedRule, setSelectedRule] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (activeTab === 'evaluate') {\r\n      fetchRules();\r\n    }\r\n  }, [activeTab]);\r\n\r\n  const fetchRules = () => {\r\n    fetch('http://localhost:5556/rules')\r\n      .then((response) => response.json())\r\n      .then((rulesArray) => {\r\n        setRules(rulesArray);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching rules:', error);\r\n      });\r\n  };\r\n\r\n  // combine rule section\r\n  const validate_combine_Rules = () => {\r\n    let valid = true;\r\n    let newErrors = '';\r\n\r\n    if (rulegroup.trim() === '') {\r\n      valid = false;\r\n      newErrors = 'Rule cannot be empty.';\r\n    } else if (rulegroup.length < 50) {\r\n      valid = false;\r\n      newErrors = 'Rule must be at least 50 characters long.';\r\n    } else if (!/AND|OR/.test(rulegroup)) {\r\n      valid = false;\r\n      newErrors = \"Rule must contain at least one 'AND' or 'OR' operator.\";\r\n    } else {\r\n      newErrors = '';\r\n    }\r\n\r\n    setgroupErrors(newErrors);\r\n\r\n    if (valid) {\r\n      if (rulegroup.trim() === '') {\r\n        setgroupErrors({ rule: 'Please enter at least one rule.' });\r\n        return;\r\n      }\r\n      console.log(rulegroup);\r\n      // Split the rules by commas and trim spaces\r\n      const rulesArray = rulegroup.split(',').map((r) => r.trim());\r\n\r\n      // Update the selectedRules state with the trimmed rules\r\n      // console.log(rulesArray[0]);\r\n      //   console.log(rulesArray[1]);\r\n      //  setSelectedRules(rulesArray);\r\n      // console.log(rulesArray);\r\n      submitRules(rulesArray);\r\n    }\r\n  };\r\n\r\n  // const validateRule = () => {\r\n  //   let valid = true;\r\n  //   let newErrors = { ...errors };\r\n\r\n  //   if (rulegroup.trim() === \"\") {\r\n  //     valid = false;\r\n  //     newErrors.rule = \"Rule cannot be empty.\";\r\n  //   } else if (rulegroup.length < 50) {\r\n  //     valid = false;\r\n  //     newErrors.rule = \"Rule must be at least 50 characters long.\";\r\n  //   } else if (!/AND|OR/.test(rulegroup)) {\r\n  //     valid = false;\r\n  //     newErrors.rule = \"Rule must contain at least one 'AND' or 'OR' operator.\";\r\n  //   } else {\r\n  //     newErrors.rule = \"\";\r\n  //   }\r\n\r\n  //   setErrors(newErrors);\r\n\r\n  //   if (valid) {\r\n  //     // Replace previous rules with the new rulegroup\r\n\r\n  //     let temp = [rulegroup];\r\n  //     console.log(selectedRules);\r\n  //     setSelectedRules(temp);\r\n\r\n  //     console.log(selectedRules);\r\n  //     submitRules(); // Call submitRules function to send the new rulegroup\r\n  //   }\r\n  // };\r\n\r\n  const validateRule = () => {\r\n    let valid = true;\r\n    let newErrors = { ...errors };\r\n\r\n    if (rulegroup.trim() === '') {\r\n      valid = false;\r\n      newErrors.rule = 'Rule cannot be empty.';\r\n    } else if (rulegroup.length < 50) {\r\n      valid = false;\r\n      newErrors.rule = 'Rule must be at least 50 characters long.';\r\n    } else if (!/AND|OR/.test(rulegroup)) {\r\n      valid = false;\r\n      newErrors.rule = \"Rule must contain at least one 'AND' or 'OR' operator.\";\r\n    } else {\r\n      newErrors.rule = '';\r\n    }\r\n\r\n    setErrors(newErrors);\r\n\r\n    if (valid) {\r\n      let temp = [];\r\n      temp.push(rulegroup);\r\n      submitRules(temp); // Call submitRules function to send the new rulegroup\r\n    }\r\n  };\r\n\r\n  const submitRules = (array) => {\r\n    const url = 'http://localhost:5556/rules';\r\n    //console.log(selectedRules);\r\n    const newRule = {\r\n      rule: array,\r\n    };\r\n    console.log(array);\r\n    const postdata = {\r\n      headers: { 'Content-type': 'application/json' },\r\n      method: 'POST',\r\n      body: JSON.stringify(newRule),\r\n    };\r\n\r\n    fetch(url, postdata)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        alert('Rule Added Successfully!');\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error submitting rule:', error);\r\n      });\r\n  };\r\n\r\n  const handleRuleSelection = (index) => {\r\n    setSelectedRuleIndex(index);\r\n  };\r\n\r\n  // evalution section\r\n\r\n  const validateEvaluation = () => {\r\n    let valid = true;\r\n    let newErrors = { ...errors };\r\n\r\n    if (age.trim() === '' || isNaN(age)) {\r\n      valid = false;\r\n      newErrors.age = 'Age must be a number and cannot be empty.';\r\n    } else {\r\n      newErrors.age = '';\r\n    }\r\n\r\n    if (department.trim() === '') {\r\n      valid = false;\r\n      newErrors.department = 'Department cannot be empty.';\r\n    } else {\r\n      newErrors.department = '';\r\n    }\r\n\r\n    if (salary.trim() === '' || isNaN(salary)) {\r\n      valid = false;\r\n      newErrors.salary = 'Salary must be a number and cannot be empty.';\r\n    } else {\r\n      newErrors.salary = '';\r\n    }\r\n\r\n    if (experience.trim() === '' || isNaN(experience)) {\r\n      valid = false;\r\n      newErrors.experience = 'Experience must be a number and cannot be empty.';\r\n    } else {\r\n      newErrors.experience = '';\r\n    }\r\n\r\n    if (selectedRuleIndex == null) {\r\n      valid = false;\r\n      newErrors.selectedRule = 'Please select a rule.';\r\n    } else {\r\n      newErrors.selectedRule = '';\r\n    }\r\n\r\n    setErrors(newErrors);\r\n\r\n    if (valid) {\r\n      getAST();\r\n    }\r\n  };\r\n\r\n  const getAST = () => {\r\n    // Ensure a rule is selected\r\n    if (selectedRuleIndex === null) {\r\n      alert('Please select a rule.');\r\n      return;\r\n    }\r\n\r\n    // Retrieve the selected rule from the rules array using the index\r\n    const selectedRule = rules[selectedRuleIndex];\r\n\r\n    // Extract the AST directly from the selected rule\r\n    const ast = selectedRule.ast;\r\n\r\n    // Prepare the evaluation data\r\n    const evaluationData = {\r\n      age,\r\n      department,\r\n      salary,\r\n      experience,\r\n    };\r\n\r\n    // Call the evaluateAST function with the AST and evaluation data\r\n    const result = evaluateAST(ast, evaluationData);\r\n\r\n    // Handle the evaluation result (e.g., display a message or update the UI)\r\n    alert(`Evaluation Result: ${result ? 'True' : 'False'}`);\r\n  };\r\n\r\n  return (\r\n    <section>\r\n      <div className='container'>\r\n        <div className='row mt-5'>\r\n          <div className='col-lg-12 text-center fs-1 fw-bold text-dark'>\r\n            Rules & Eligibility\r\n          </div>\r\n        </div>\r\n        <div className='row'>\r\n          <div className='col-lg-12 p-5 text-center'>\r\n            <div className='btn-group'>\r\n              <button\r\n                className={`btn btn-outline-dark fw-bold ${\r\n                  activeTab === 'create' ? 'active' : ''\r\n                }`}\r\n                onClick={() => setActiveTab('create')}\r\n              >\r\n                Create Rule\r\n              </button>\r\n              <button\r\n                className={`btn btn-outline-dark fw-bold ${\r\n                  activeTab === 'combine' ? 'active' : ''\r\n                }`}\r\n                onClick={() => {\r\n                  setActiveTab('combine');\r\n                  fetchRules();\r\n                }}\r\n              >\r\n                Combine Rules\r\n              </button>\r\n              <button\r\n                className={`btn btn-outline-dark fw-bold ${\r\n                  activeTab === 'evaluate' ? 'active' : ''\r\n                }`}\r\n                onClick={() => {\r\n                  setActiveTab('evaluate');\r\n                  fetchRules();\r\n                }}\r\n              >\r\n                Evaluate Rules\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className='row mb-5'>\r\n          <div className='container p-5 feedback-box'>\r\n            <div className='row'>\r\n              <h3 className='text-center'>\r\n                {activeTab === 'create' && 'Create Rule'}\r\n                {activeTab === 'combine' && 'Combine Rules'}\r\n                {activeTab === 'evaluate' && 'Evaluate Rules'}\r\n              </h3>\r\n            </div>\r\n\r\n            <div className='row'>\r\n              <div className='col-lg-3'></div>\r\n              <div className='col-lg-6'>\r\n                {activeTab === 'create' && (\r\n                  <form>\r\n                    <textarea\r\n                      className={`form-control mb-3 ${\r\n                        errors.rule ? 'is-invalid' : ''\r\n                      }`}\r\n                      placeholder='Enter Rule'\r\n                      value={rulegroup}\r\n                      onChange={(e) => group(e.target.value)}\r\n                      rows={8}\r\n                      style={{ borderColor: errors.rule ? 'red' : '' }}\r\n                    ></textarea>\r\n                    {errors.rule && (\r\n                      <small className='text-danger fst-italic'>\r\n                        <i>{errors.rule}</i>\r\n                      </small>\r\n                    )}\r\n                    <div className='text-center'>\r\n                      <button\r\n                        type='button'\r\n                        className='btn btn-primary mt-3'\r\n                        onClick={validateRule}\r\n                      >\r\n                        Submit\r\n                      </button>\r\n                    </div>\r\n                  </form>\r\n                )}\r\n\r\n                {activeTab === 'combine' && (\r\n                  <form>\r\n                    <h5>Write rules and separate them by commas</h5>\r\n                    <textarea\r\n                      className={`form-control mb-3 ${\r\n                        errors.rule ? 'is-invalid' : ''\r\n                      }`}\r\n                      placeholder='Enter rules separated by commas'\r\n                      value={rulegroup}\r\n                      onChange={(e) => group(e.target.value)}\r\n                      rows={8}\r\n                      style={{ borderColor: errors.rule ? 'red' : '' }}\r\n                    ></textarea>\r\n                    {grouperrors && (\r\n                      <div className='text-danger'>{grouperrors}</div>\r\n                    )}\r\n                    <div className='text-center'>\r\n                      <button\r\n                        type='button'\r\n                        className='btn btn-primary mt-3'\r\n                        onClick={validate_combine_Rules}\r\n                      >\r\n                        Combine\r\n                      </button>\r\n                    </div>\r\n                  </form>\r\n                )}\r\n\r\n                {activeTab === 'evaluate' && (\r\n                  <form>\r\n                    <div className='mb-3'>\r\n                      <label className='form-label'>Age</label>\r\n                      <input\r\n                        type='number'\r\n                        className={`form-control ${\r\n                          errors.age ? 'is-invalid' : ''\r\n                        }`}\r\n                        value={age}\r\n                        onChange={(e) => setAge(e.target.value)}\r\n                        style={{ borderColor: errors.age ? 'red' : '' }}\r\n                      />\r\n                      {errors.age && (\r\n                        <small className='text-danger fst-italic'>\r\n                          <i>{errors.age}</i>\r\n                        </small>\r\n                      )}\r\n                    </div>\r\n                    <div className='mb-3'>\r\n                      <label className='form-label'>Department</label>\r\n                      <input\r\n                        type='text'\r\n                        className={`form-control ${\r\n                          errors.department ? 'is-invalid' : ''\r\n                        }`}\r\n                        value={department}\r\n                        onChange={(e) => setDepartment(e.target.value)}\r\n                        style={{ borderColor: errors.department ? 'red' : '' }}\r\n                      />\r\n                      {errors.department && (\r\n                        <small className='text-danger fst-italic'>\r\n                          <i>{errors.department}</i>\r\n                        </small>\r\n                      )}\r\n                    </div>\r\n                    <div className='mb-3'>\r\n                      <label className='form-label'>Salary</label>\r\n                      <input\r\n                        type='number'\r\n                        className={`form-control ${\r\n                          errors.salary ? 'is-invalid' : ''\r\n                        }`}\r\n                        value={salary}\r\n                        onChange={(e) => setSalary(e.target.value)}\r\n                        style={{ borderColor: errors.salary ? 'red' : '' }}\r\n                      />\r\n                      {errors.salary && (\r\n                        <small className='text-danger fst-italic'>\r\n                          <i>{errors.salary}</i>\r\n                        </small>\r\n                      )}\r\n                    </div>\r\n                    <div className='mb-3'>\r\n                      <label className='form-label'>Experience</label>\r\n                      <input\r\n                        type='number'\r\n                        className={`form-control ${\r\n                          errors.experience ? 'is-invalid' : ''\r\n                        }`}\r\n                        value={experience}\r\n                        onChange={(e) => setExperience(e.target.value)}\r\n                        style={{ borderColor: errors.experience ? 'red' : '' }}\r\n                      />\r\n                      {errors.experience && (\r\n                        <small className='text-danger fst-italic'>\r\n                          <i>{errors.experience}</i>\r\n                        </small>\r\n                      )}\r\n                    </div>\r\n\r\n                    {rules.length > 0 && (\r\n                      <div>\r\n                        <label className='form-label'>\r\n                          Select the rule by which you want to evaluate:\r\n                        </label>\r\n                        {rules.map((rule, index) => (\r\n                          <div key={index} className='form-check'>\r\n                            <input\r\n                              className='form-check-input'\r\n                              type='radio'\r\n                              value={index}\r\n                              checked={selectedRuleIndex === index}\r\n                              onChange={() => handleRuleSelection(index)}\r\n                            />\r\n                            <label className='form-check-label'>\r\n                              {rule.rule}\r\n                            </label>\r\n                          </div>\r\n                        ))}\r\n\r\n                        {errors.selectedRule && (\r\n                          <small className='text-danger fst-italic'>\r\n                            <i>{errors.selectedRule}</i>\r\n                          </small>\r\n                        )}\r\n                      </div>\r\n                    )}\r\n                    <div className='text-center'>\r\n                      <button\r\n                        type='button'\r\n                        className='btn btn-primary mt-3 bg-dark'\r\n                        onClick={validateEvaluation}\r\n                      >\r\n                        Evaluate\r\n                      </button>\r\n                    </div>\r\n                  </form>\r\n                )}\r\n              </div>\r\n              <div className='col-lg-3'></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE3C;AAAA,SAAAC,MA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}