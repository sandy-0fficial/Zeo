{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ashut\\\\Desktop\\\\feedback_portal - Copy\\\\reactapp\\\\src\\\\Dashboard.js\",\n  _s = $RefreshSig$();\n// import { useState, useEffect } from \"react\";\n\n// const Dashboard = () => {\n//   const [activeTab, setActiveTab] = useState(\"create\");\n//   const [rules, setRules] = useState([]);\n//   const [selectedRules, setSelectedRules] = useState([]);\n//   const [rule, setRule] = useState(\"\");\n//   const [age, setAge] = useState(\"\");\n//   const [department, setDepartment] = useState(\"\");\n//   const [salary, setSalary] = useState(\"\");\n//   const [experience, setExperience] = useState(\"\");\n//   const [errors, setErrors] = useState({\n//     rule: \"\",\n//     age: \"\",\n//     department: \"\",\n//     salary: \"\",\n//     experience: \"\",\n//     selectedRule: \"\",\n//   });\n//   const [selectedRule, setSelectedRule] = useState(\"\");\n\n//   useEffect(() => {\n//     if (activeTab === \"evaluate\") {\n//       fetchRules();\n//     }\n//   }, [activeTab]);\n\n//   const fetchRules = () => {\n//     fetch(\"http://localhost:5556/rules\")\n//       .then((response) => response.json())\n//       .then((rulesArray) => {\n//         setRules(rulesArray);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error fetching rules:\", error);\n//       });\n//   };\n\n//   const handleRuleSelection = (rule) => {\n//     setSelectedRule(rule);\n//   };\n\n//   const handleCombineRules = () => {\n//     console.log(\"Combining rules:\", selectedRules);\n//     alert(\"Rules combined successfully!\");\n//   };\n\n//   const validateRule = () => {\n//     let valid = true;\n//     let newErrors = { ...errors };\n\n//     if (rule.trim() === \"\") {\n//       valid = false;\n//       newErrors.rule = \"Rule cannot be empty.\";\n//     } else if (rule.length < 50) {\n//       valid = false;\n//       newErrors.rule = \"Rule must be at least 50 characters long.\";\n//     } else if (!/AND|OR/.test(rule)) {\n//       valid = false;\n//       newErrors.rule = \"Rule must contain at least one 'AND' or 'OR' operator.\";\n//     } else {\n//       newErrors.rule = \"\";\n//     }\n\n//     setErrors(newErrors);\n\n//     if (valid) {\n//       submitRule();\n//     }\n//   };\n\n//   const submitRule = () => {\n//     const url = \"http://localhost:5556/rules\";\n//     const newRule = {\n//       rule: rule,\n//     };\n\n//     const postdata = {\n//       headers: { \"Content-type\": \"application/json\" },\n//       method: \"POST\",\n//       body: JSON.stringify(newRule),\n//     };\n\n//     fetch(url, postdata)\n//       .then((response) => response.json())\n//       .then((data) => {\n//         alert(\"Rule Added Successfully!\");\n//         setRule(\"\");\n//       })\n//       .catch((error) => {\n//         console.error(\"Error submitting rule:\", error);\n//       });\n//   };\n\n//   const validateEvaluation = () => {\n//     let valid = true;\n//     let newErrors = { ...errors };\n\n//     if (age.trim() === \"\" || isNaN(age)) {\n//       valid = false;\n//       newErrors.age = \"Age must be a number and cannot be empty.\";\n//     } else {\n//       newErrors.age = \"\";\n//     }\n\n//     if (department.trim() === \"\") {\n//       valid = false;\n//       newErrors.department = \"Department cannot be empty.\";\n//     } else {\n//       newErrors.department = \"\";\n//     }\n\n//     if (salary.trim() === \"\" || isNaN(salary)) {\n//       valid = false;\n//       newErrors.salary = \"Salary must be a number and cannot be empty.\";\n//     } else {\n//       newErrors.salary = \"\";\n//     }\n\n//     if (experience.trim() === \"\" || isNaN(experience)) {\n//       valid = false;\n//       newErrors.experience = \"Experience must be a number and cannot be empty.\";\n//     } else {\n//       newErrors.experience = \"\";\n//     }\n\n//     if (!selectedRule) {\n//       valid = false;\n//       newErrors.selectedRule = \"Please select a rule.\";\n//     } else {\n//       newErrors.selectedRule = \"\";\n//     }\n\n//     setErrors(newErrors);\n\n//     if (valid) {\n//       submitEvaluation();\n//     }\n//   };\n\n//   const submitEvaluation = () => {\n//     const url = \"http://localhost:5556/evaluateRule\";\n//     const evaluationData = {\n//       age,\n//       department,\n//       salary,\n//       experience,\n//       rule: selectedRule,\n//     };\n\n//     const postdata = {\n//       headers: { \"Content-type\": \"application/json\" },\n//       method: \"POST\",\n//       body: JSON.stringify(evaluationData),\n//     };\n\n//     fetch(url, postdata)\n//       .then((response) => response.json())\n//       .then((data) => {\n//         alert(`Evaluation Result: ${data.result ? \"True\" : \"False\"}`);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error evaluating rule:\", error);\n//       });\n//   };\n\n//   return (\n//     <section>\n//       <div className=\"container\">\n//         <div className=\"row mt-5\">\n//           <div className=\"col-lg-12 text-center fs-1 fw-bold text-dark\">\n//             Rules & Eligibility\n//           </div>\n//         </div>\n//         <div className=\"row\">\n//           <div className=\"col-lg-12 p-5 text-center\">\n//             <div className=\"btn-group\">\n//               <button\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"create\" ? \"active\" : \"\"}`}\n//                 onClick={() => setActiveTab(\"create\")}\n//               >\n//                 Create Rule\n//               </button>\n//               <button\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"combine\" ? \"active\" : \"\"}`}\n//                 onClick={() => {\n//                   setActiveTab(\"combine\");\n//                   fetchRules();\n//                 }}\n//               >\n//                 Combine Rules\n//               </button>\n//               <button\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"evaluate\" ? \"active\" : \"\"}`}\n//                 onClick={() => {\n//                   setActiveTab(\"evaluate\");\n//                   fetchRules();\n//                 }}\n//               >\n//                 Evaluate Rules\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//         <div className=\"row mb-5\">\n//           <div className=\"container p-5 feedback-box\">\n//             <div className=\"row\">\n//               <h3 className=\"text-center\">\n//                 {activeTab === \"create\" && \"Create Rule\"}\n//                 {activeTab === \"combine\" && \"Combine Rules\"}\n//                 {activeTab === \"evaluate\" && \"Evaluate Rules\"}\n//               </h3>\n//             </div>\n\n//             <div className=\"row\">\n//               <div className=\"col-lg-3\"></div>\n//               <div className=\"col-lg-6\">\n//                 {activeTab === \"create\" && (\n//                   <form>\n//                     <textarea\n//                       className={`form-control mb-3 ${errors.rule ? \"is-invalid\" : \"\"}`}\n//                       placeholder=\"Enter Rule\"\n//                       value={rule}\n//                       onChange={(e) => setRule(e.target.value)}\n//                       rows={8}\n//                       style={{ borderColor: errors.rule ? \"red\" : \"\" }}\n//                     ></textarea>\n//                     {errors.rule && <small className=\"text-danger fst-italic\"><i>{errors.rule}</i></small>}\n//                     <div className='text-center'>\n//                       <button\n//                         type=\"button\"\n//                         className=\"btn btn-primary mt-3 bg-dark\"\n//                         onClick={validateRule}\n//                       >\n//                         Create Rule\n//                       </button>\n//                     </div>\n//                   </form>\n//                 )}\n\n//                 {activeTab === \"combine\" && (\n//                   <div>\n//                     {rules.length > 0 ? (\n//                       <form>\n//                         {rules.map((rule, index) => (\n//                         <div key={index} className=\"form-check\">\n//                           <input\n//                             className=\"form-check-input\"\n//                             type=\"checkbox\"\n//                             value={rule._id}\n//                             onChange={() => handleRuleSelection(rule.rule)}\n//                           />\n//                           <label className=\"form-check-label\">\n//                             {rule.rule}\n//                           </label>\n//                         </div>\n//                       ))}\n\n//                        <div className='text-center'>\n//                         <button\n//                           type=\"button\"\n//                           className=\"btn btn-primary mt-3 bg-dark\"\n//                           onClick={handleCombineRules}\n//                         >\n//                           Combine Selected Rules\n//                         </button>\n//                         </div>\n//                       </form>\n//                     ) : (\n//                       <p>No rules available. Click the button to fetch rules.</p>\n//                     )}\n//                   </div>\n//                 )}\n\n//                 {activeTab === \"evaluate\" && (\n//                   <form>\n//                     <div className=\"mb-3\">\n//                       <label className=\"form-label\">Age</label>\n//                       <input\n//                         type=\"number\"\n//                         className={`form-control ${errors.age ? \"is-invalid\" : \"\"}`}\n//                         value={age}\n//                         onChange={(e) => setAge(e.target.value)}\n//                         style={{ borderColor: errors.age ? \"red\" : \"\" }}\n//                       />\n//                       {errors.age && <small className=\"text-danger fst-italic\"><i>{errors.age}</i></small>}\n//                     </div>\n//                     <div className=\"mb-3\">\n//                       <label className=\"form-label\">Department</label>\n//                       <input\n//                         type=\"text\"\n//                         className={`form-control ${errors.department ? \"is-invalid\" : \"\"}`}\n//                         value={department}\n//                         onChange={(e) => setDepartment(e.target.value)}\n//                         style={{ borderColor: errors.department ? \"red\" : \"\" }}\n//                       />\n//                       {errors.department && <small className=\"text-danger fst-italic\"><i>{errors.department}</i></small>}\n//                     </div>\n//                     <div className=\"mb-3\">\n//                       <label className=\"form-label\">Salary</label>\n//                       <input\n//                         type=\"number\"\n//                         className={`form-control ${errors.salary ? \"is-invalid\" : \"\"}`}\n//                         value={salary}\n//                         onChange={(e) => setSalary(e.target.value)}\n//                         style={{ borderColor: errors.salary ? \"red\" : \"\" }}\n//                       />\n//                       {errors.salary && <small className=\"text-danger fst-italic\"><i>{errors.salary}</i></small>}\n//                     </div>\n//                     <div className=\"mb-3\">\n//                       <label className=\"form-label\">Experience</label>\n//                       <input\n//                         type=\"number\"\n//                         className={`form-control ${errors.experience ? \"is-invalid\" : \"\"}`}\n//                         value={experience}\n//                         onChange={(e) => setExperience(e.target.value)}\n//                         style={{ borderColor: errors.experience ? \"red\" : \"\" }}\n//                       />\n//                       {errors.experience && <small className=\"text-danger fst-italic\"><i>{errors.experience}</i></small>}\n//                     </div>\n//                     {rules.length > 0 && (\n//                       <div>\n//                          <label className=\"form-label\">Select the rule by which you want to evaluate : </label>\n//                         {rules.map((rule, index) => (\n//                           <div key={index} className=\"form-check\">\n//                             <input\n//                               className=\"form-check-input\"\n//                               type=\"radio\"\n//                               value={rule._id}\n//                               checked={selectedRule === rule._id}\n//                               onChange={() => handleRuleSelection(rule._id)}\n//                             />\n//                             <label className=\"form-check-label\">\n//                               {rule.rule}\n//                             </label>\n//                           </div>\n//                         ))}\n//                         {errors.selectedRule && <small className=\"text-danger fst-italic\"><i>{errors.selectedRule}</i></small>}\n//                       </div>\n//                     )}\n//                     <div className='text-center'>\n//                       <button\n//                         type=\"button\"\n//                         className=\"btn btn-primary mt-3 bg-dark\"\n//                         onClick={validateEvaluation}\n//                       >\n//                         Evaluate\n//                       </button>\n//                     </div>\n//                   </form>\n//                 )}\n\n//               </div>\n//               <div className=\"col-lg-3\"></div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     </section>\n//   );\n// };\n\n// export default Dashboard;\n\n// import { useState, useEffect } from \"react\";\n\n// // Define the AST evaluation functions\n// const evaluateAST = (ast, data) => {\n//   if (ast.type === 'condition') {\n//     return evalCondition(ast.value, data);\n//   }\n\n//   const left = evaluateAST(ast.left, data);\n//   const right = evaluateAST(ast.right, data);\n\n//   if (ast.type === 'AND') {\n//     return left && right;\n//   } else if (ast.type === 'OR') {\n//     return left || right;\n//   }\n\n//   return false;\n// };\n\n// const evalCondition = (condition, data) => {\n//   const [field, operator, value] = condition.split(/(?<=[<>=!]=?)\\s?/);\n//   if (isNaN(value)) {\n//     return eval(`${JSON.stringify(data[field])} ${operator} ${value}`);\n//   }\n//   return eval(`${data[field]} ${operator} ${value}`);\n// };\n\n// const Dashboard = () => {\n//   const [activeTab, setActiveTab] = useState(\"create\");\n//   const [rules, setRules] = useState([]);\n//   const [selectedRules, setSelectedRules] = useState([]);\n//   const [rule, setRule] = useState(\"\");\n//   const [age, setAge] = useState(\"\");\n//   const [department, setDepartment] = useState(\"\");\n//   const [salary, setSalary] = useState(\"\");\n//   const [experience, setExperience] = useState(\"\");\n//   const [errors, setErrors] = useState({\n//     rule: \"\",\n//     age: \"\",\n//     department: \"\",\n//     salary: \"\",\n//     experience: \"\",\n//     selectedRule: \"\",\n//   });\n//   const [selectedRule, setSelectedRule] = useState(\"\");\n\n//   useEffect(() => {\n//     if (activeTab === \"evaluate\") {\n//       fetchRules();\n//     }\n//   }, [activeTab]);\n\n//   const fetchRules = () => {\n//     fetch(\"http://localhost:5556/rules\")\n//       .then((response) => response.json())\n//       .then((rulesArray) => {\n//         setRules(rulesArray);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error fetching rules:\", error);\n//       });\n//   };\n\n//   const handleRuleSelection = (rule) => {\n//     setSelectedRule(rule);\n//   };\n\n//   const handleCombineRules = () => {\n//     console.log(\"Combining rules:\", selectedRules);\n//     alert(\"Rules combined successfully!\");\n//   };\n\n//   const validateRule = () => {\n//     let valid = true;\n//     let newErrors = { ...errors };\n\n//     if (rule.trim() === \"\") {\n//       valid = false;\n//       newErrors.rule = \"Rule cannot be empty.\";\n//     } else if (rule.length < 50) {\n//       valid = false;\n//       newErrors.rule = \"Rule must be at least 50 characters long.\";\n//     } else if (!/AND|OR/.test(rule)) {\n//       valid = false;\n//       newErrors.rule = \"Rule must contain at least one 'AND' or 'OR' operator.\";\n//     } else {\n//       newErrors.rule = \"\";\n//     }\n\n//     setErrors(newErrors);\n\n//     if (valid) {\n//       submitRule();\n//     }\n//   };\n\n//   const submitRule = () => {\n//     const url = \"http://localhost:5556/rules\";\n//     const newRule = {\n//       rule: rule,\n//     };\n\n//     const postdata = {\n//       headers: { \"Content-type\": \"application/json\" },\n//       method: \"POST\",\n//       body: JSON.stringify(newRule),\n//     };\n\n//     fetch(url, postdata)\n//       .then((response) => response.json())\n//       .then((data) => {\n//         alert(\"Rule Added Successfully!\");\n//         setRule(\"\");\n//       })\n//       .catch((error) => {\n//         console.error(\"Error submitting rule:\", error);\n//       });\n//   };\n\n//   const validateEvaluation = () => {\n//     let valid = true;\n//     let newErrors = { ...errors };\n\n//     if (age.trim() === \"\" || isNaN(age)) {\n//       valid = false;\n//       newErrors.age = \"Age must be a number and cannot be empty.\";\n//     } else {\n//       newErrors.age = \"\";\n//     }\n\n//     if (department.trim() === \"\") {\n//       valid = false;\n//       newErrors.department = \"Department cannot be empty.\";\n//     } else {\n//       newErrors.department = \"\";\n//     }\n\n//     if (salary.trim() === \"\" || isNaN(salary)) {\n//       valid = false;\n//       newErrors.salary = \"Salary must be a number and cannot be empty.\";\n//     } else {\n//       newErrors.salary = \"\";\n//     }\n\n//     if (experience.trim() === \"\" || isNaN(experience)) {\n//       valid = false;\n//       newErrors.experience = \"Experience must be a number and cannot be empty.\";\n//     } else {\n//       newErrors.experience = \"\";\n//     }\n\n//     if (!selectedRule) {\n//       valid = false;\n//       newErrors.selectedRule = \"Please select a rule.\";\n//     } else {\n//       newErrors.selectedRule = \"\";\n//     }\n\n//     setErrors(newErrors);\n\n//     if (valid) {\n//       submitEvaluation();\n//     }\n//   };\n\n//   const submitEvaluation = () => {\n//     const url = \"http://localhost:5556/Rules\";\n// const evaluationData = {\n//   age,\n//   department,\n//   salary,\n//   experience,\n//   rule: selectedRule,\n// };\n\n//     const postdata = {\n//       headers: { \"Content-type\": \"application/json\" },\n//       method: \"POST\",\n//       body: JSON.stringify(evaluationData),\n//     };\n\n//     fetch(url, postdata)\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw new Error(`HTTP error! Status: ${response.status}`);\n//         }\n//         return response.json();\n//       })\n//       .then((data) => {\n//         const ast = data.ruleAST; // Modify according to your actual server response\n//         const result = evaluateAST(ast, evaluationData);\n//         alert(`Evaluation Result: ${result ? \"True\" : \"False\"}`);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error evaluating rule:\", error.message);\n//         alert(`An error occurred: ${error.message}`);\n//       });\n//   };\n\n//   return (\n//     <section>\n//       <div className=\"container\">\n//         <div className=\"row mt-5\">\n//           <div className=\"col-lg-12 text-center fs-1 fw-bold text-dark\">\n//             Rules & Eligibility\n//           </div>\n//         </div>\n//         <div className=\"row\">\n//           <div className=\"col-lg-12 p-5 text-center\">\n//             <div className=\"btn-group\">\n//               <button\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"create\" ? \"active\" : \"\"}`}\n//                 onClick={() => setActiveTab(\"create\")}\n//               >\n//                 Create Rule\n//               </button>\n//               <button\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"combine\" ? \"active\" : \"\"}`}\n//                 onClick={() => {\n//                   setActiveTab(\"combine\");\n//                   fetchRules();\n//                 }}\n//               >\n//                 Combine Rules\n//               </button>\n//               <button\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"evaluate\" ? \"active\" : \"\"}`}\n//                 onClick={() => {\n//                   setActiveTab(\"evaluate\");\n//                   fetchRules();\n//                 }}\n//               >\n//                 Evaluate Rules\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//         <div className=\"row mb-5\">\n//           <div className=\"container p-5 feedback-box\">\n//             <div className=\"row\">\n//               <h3 className=\"text-center\">\n//                 {activeTab === \"create\" && \"Create Rule\"}\n//                 {activeTab === \"combine\" && \"Combine Rules\"}\n//                 {activeTab === \"evaluate\" && \"Evaluate Rules\"}\n//               </h3>\n//             </div>\n\n//             <div className=\"row\">\n//               <div className=\"col-lg-3\"></div>\n//               <div className=\"col-lg-6\">\n//                 {activeTab === \"create\" && (\n//                   <form>\n//                     <textarea\n//                       className={`form-control mb-3 ${errors.rule ? \"is-invalid\" : \"\"}`}\n//                       placeholder=\"Enter Rule\"\n//                       value={rule}\n//                       onChange={(e) => setRule(e.target.value)}\n//                       rows={8}\n//                       style={{ borderColor: errors.rule ? \"red\" : \"\" }}\n//                     ></textarea>\n//                     {errors.rule && <small className=\"text-danger fst-italic\"><i>{errors.rule}</i></small>}\n//                     <div className='text-center'>\n//                       <button\n//                         type=\"button\"\n//                         className=\"btn btn-primary mt-3 bg-dark\"\n//                         onClick={validateRule}\n//                       >\n//                         Create Rule\n//                       </button>\n//                     </div>\n//                   </form>\n//                 )}\n\n//                 {activeTab === \"combine\" && (\n//                   <div>\n//                     {rules.length > 0 ? (\n//                       <form>\n//                         {rules.map((rule, index) => (\n//                           <div key={index} className=\"form-check\">\n//                             <input\n//                               className=\"form-check-input\"\n//                               type=\"checkbox\"\n//                               value={rule._id}\n//                               onChange={() => handleRuleSelection(rule.rule)}\n//                             />\n//                             <label className=\"form-check-label\">\n//                               {rule.rule}\n//                             </label>\n//                           </div>\n//                         ))}\n\n//                         <div className='text-center'>\n//                           <button\n//                             type=\"button\"\n//                             className=\"btn btn-primary mt-3 bg-dark\"\n//                             onClick={handleCombineRules}\n//                           >\n//                             Combine Selected Rules\n//                           </button>\n//                         </div>\n//                       </form>\n//                     ) : (\n//                       <p>No rules available. Click the button to fetch rules.</p>\n//                     )}\n//                   </div>\n//                 )}\n\n// {activeTab === \"evaluate\" && (\n//   <form>\n//     <div className=\"mb-3\">\n//       <label className=\"form-label\">Age</label>\n//       <input\n//         type=\"number\"\n//         className={`form-control ${errors.age ? \"is-invalid\" : \"\"}`}\n//         value={age}\n//         onChange={(e) => setAge(e.target.value)}\n//         style={{ borderColor: errors.age ? \"red\" : \"\" }}\n//       />\n//       {errors.age && <small className=\"text-danger fst-italic\"><i>{errors.age}</i></small>}\n//     </div>\n//     <div className=\"mb-3\">\n//       <label className=\"form-label\">Department</label>\n//       <input\n//         type=\"text\"\n//         className={`form-control ${errors.department ? \"is-invalid\" : \"\"}`}\n//         value={department}\n//         onChange={(e) => setDepartment(e.target.value)}\n//         style={{ borderColor: errors.department ? \"red\" : \"\" }}\n//       />\n//       {errors.department && <small className=\"text-danger fst-italic\"><i>{errors.department}</i></small>}\n//     </div>\n//     <div className=\"mb-3\">\n//       <label className=\"form-label\">Salary</label>\n//       <input\n//         type=\"number\"\n//         className={`form-control ${errors.salary ? \"is-invalid\" : \"\"}`}\n//         value={salary}\n//         onChange={(e) => setSalary(e.target.value)}\n//         style={{ borderColor: errors.salary ? \"red\" : \"\" }}\n//       />\n//       {errors.salary && <small className=\"text-danger fst-italic\"><i>{errors.salary}</i></small>}\n//     </div>\n//     <div className=\"mb-3\">\n//       <label className=\"form-label\">Experience</label>\n//       <input\n//         type=\"number\"\n//         className={`form-control ${errors.experience ? \"is-invalid\" : \"\"}`}\n//         value={experience}\n//         onChange={(e) => setExperience(e.target.value)}\n//         style={{ borderColor: errors.experience ? \"red\" : \"\" }}\n//       />\n//       {errors.experience && <small className=\"text-danger fst-italic\"><i>{errors.experience}</i></small>}\n//     </div>\n//     {rules.length > 0 && (\n//       <div>\n//         <label className=\"form-label\">Select the rule by which you want to evaluate:</label>\n//         {rules.map((rule, index) => (\n//           <div key={index} className=\"form-check\">\n//             <input\n//               className=\"form-check-input\"\n//               type=\"radio\"\n//               value={rule._id}\n//               checked={selectedRule === rule._id}\n//               onChange={() => handleRuleSelection(rule._id)}\n//             />\n//             <label className=\"form-check-label\">\n//               {rule.rule}\n//             </label>\n//           </div>\n//         ))}\n//         {errors.selectedRule && <small className=\"text-danger fst-italic\"><i>{errors.selectedRule}</i></small>}\n//       </div>\n//     )}\n//     <div className='text-center'>\n//       <button\n//         type=\"button\"\n//         className=\"btn btn-primary mt-3 bg-dark\"\n//         onClick={validateEvaluation}\n//       >\n//         Evaluate\n//       </button>\n//     </div>\n//   </form>\n// )}\n//               </div>\n//               <div className=\"col-lg-3\"></div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     </section>\n//   );\n// };\n\n// export default Dashboard;\n\nimport { useState, useEffect } from \"react\";\n\n// Define the AST evaluation functions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst evaluateAST = (ast, data) => {\n  if (ast.type === 'condition') {\n    console.log(ast.value);\n    let r = evalCondition(ast.value, data);\n    console.log(r);\n    console.log(\" \");\n    return r;\n  }\n  const left = evaluateAST(ast.left, data);\n  const right = evaluateAST(ast.right, data);\n  if (ast.type === 'AND') {\n    return left && right;\n  } else if (ast.type === 'OR') {\n    return left || right;\n  }\n  return false;\n};\nconst evalCondition = (condition, data) => {\n  // Use a regex to match the field, operator, and value\n  const match = condition.match(/^(\\w+)\\s*(==|!=|<=|>=|<|>)\\s*(.+)$/);\n  console.log(\"Condition:\", condition);\n  if (!match) {\n    throw new Error(`Invalid condition: ${condition}`);\n  }\n  const [, field, operator, value] = match;\n  console.log(\"Field:\", field, \"Operator:\", operator, \"Value:\", value);\n\n  // Determine whether the value is numeric or a string and evaluate it accordingly\n  let formattedValue = value.trim();\n  if (isNaN(formattedValue)) {\n    let originalString = formattedValue;\n    formattedValue = `\"${originalString.replace(/'/g, \"\")}\"`;\n  }\n\n  // Convert the data field to a string if it's not a number, and compare it correctly\n  const dataValue = isNaN(data[field]) ? JSON.stringify(data[field]) : data[field];\n\n  // Log for debugging\n\n  console.log(\"Data Field Value:\", dataValue, \"Formatted Value:\", formattedValue);\n  return eval(`${dataValue} ${operator} ${formattedValue}`);\n};\nconst Dashboard = () => {\n  _s();\n  const [activeTab, setActiveTab] = useState(\"create\");\n  const [rules, setRules] = useState([]);\n  const [rulegroup, group] = useState(\"\");\n  //  const [selectedRules, setSelectedRules] = useState([]);\n  const [selectedRuleIndex, setSelectedRuleIndex] = useState(null);\n  // const [rule, setRule] = useState(\"\");\n  const [age, setAge] = useState(\"\");\n  const [department, setDepartment] = useState(\"\");\n  const [salary, setSalary] = useState(\"\");\n  const [experience, setExperience] = useState(\"\");\n  const [errors, setErrors] = useState({\n    rule: \"\",\n    age: \"\",\n    department: \"\",\n    salary: \"\",\n    experience: \"\",\n    selectedRule: \"\"\n  });\n  const [grouperrors, setgroupErrors] = useState(\"\");\n  //const [selectedRule, setSelectedRule] = useState(\"\");\n\n  useEffect(() => {\n    if (activeTab === \"evaluate\") {\n      fetchRules();\n    }\n  }, [activeTab]);\n  const fetchRules = () => {\n    fetch(\"http://localhost:5556/rules\").then(response => response.json()).then(rulesArray => {\n      setRules(rulesArray);\n    }).catch(error => {\n      console.error(\"Error fetching rules:\", error);\n    });\n  };\n\n  // combine rule section\n  const validate_combine_Rules = () => {\n    let valid = true;\n    let newErrors = \"\";\n    if (rulegroup.trim() === \"\") {\n      valid = false;\n      newErrors = \"Rule cannot be empty.\";\n    } else if (rulegroup.length < 50) {\n      valid = false;\n      newErrors = \"Rule must be at least 50 characters long.\";\n    } else if (!/AND|OR/.test(rulegroup)) {\n      valid = false;\n      newErrors = \"Rule must contain at least one 'AND' or 'OR' operator.\";\n    } else {\n      newErrors = \"\";\n    }\n    setgroupErrors(newErrors);\n    if (valid) {\n      if (rulegroup.trim() === \"\") {\n        setgroupErrors({\n          rule: \"Please enter at least one rule.\"\n        });\n        return;\n      }\n\n      // Split the rules by commas and trim spaces\n      const rulesArray = rulegroup.split(\",\").map(r => r.trim());\n\n      // Update the selectedRules state with the trimmed rules\n      // console.log(rulesArray[0]);\n      //   console.log(rulesArray[1]);\n      //  setSelectedRules(rulesArray);\n      console.log(rulesArray);\n      submitRules(rulesArray);\n    }\n  };\n\n  // const validateRule = () => {\n  //   let valid = true;\n  //   let newErrors = { ...errors };\n\n  //   if (rulegroup.trim() === \"\") {\n  //     valid = false;\n  //     newErrors.rule = \"Rule cannot be empty.\";\n  //   } else if (rulegroup.length < 50) {\n  //     valid = false;\n  //     newErrors.rule = \"Rule must be at least 50 characters long.\";\n  //   } else if (!/AND|OR/.test(rulegroup)) {\n  //     valid = false;\n  //     newErrors.rule = \"Rule must contain at least one 'AND' or 'OR' operator.\";\n  //   } else {\n  //     newErrors.rule = \"\";\n  //   }\n\n  //   setErrors(newErrors);\n\n  //   if (valid) {\n  //     // Replace previous rules with the new rulegroup\n\n  //     let temp = [rulegroup];\n  //     console.log(selectedRules);\n  //     setSelectedRules(temp);\n\n  //     console.log(selectedRules);\n  //     submitRules(); // Call submitRules function to send the new rulegroup\n  //   }\n  // };\n\n  const validateRule = () => {\n    let valid = true;\n    let newErrors = {\n      ...errors\n    };\n    if (rulegroup.trim() === \"\") {\n      valid = false;\n      newErrors.rule = \"Rule cannot be empty.\";\n    } else if (rulegroup.length < 50) {\n      valid = false;\n      newErrors.rule = \"Rule must be at least 50 characters long.\";\n    } else if (!/AND|OR/.test(rulegroup)) {\n      valid = false;\n      newErrors.rule = \"Rule must contain at least one 'AND' or 'OR' operator.\";\n    } else {\n      newErrors.rule = \"\";\n    }\n    setErrors(newErrors);\n    if (valid) {\n      // Replace previous rules with the new rulegroup\n      // setSelectedRules(() => [rulegroup]);\n\n      // Using the updated state value for submission\n      // No need to log selectedRules here as it will not reflect the updated state immediately\n      submitRules(); // Call submitRules function to send the new rulegroup\n    }\n  };\n\n  const submitRules = () => {\n    const url = \"http://localhost:5556/rules\";\n    //console.log(selectedRules);\n    const newRule = {\n      rule: selectedRules\n    };\n    const postdata = {\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      method: \"POST\",\n      body: JSON.stringify(newRule)\n    };\n    fetch(url, postdata).then(response => response.json()).then(data => {\n      alert(\"Rule Added Successfully!\");\n      setSelectedRules([]);\n    }).catch(error => {\n      console.error(\"Error submitting rule:\", error);\n    });\n  };\n  const handleRuleSelection = index => {\n    setSelectedRuleIndex(index);\n  };\n\n  // evalution section \n\n  const validateEvaluation = () => {\n    let valid = true;\n    let newErrors = {\n      ...errors\n    };\n    if (age.trim() === \"\" || isNaN(age)) {\n      valid = false;\n      newErrors.age = \"Age must be a number and cannot be empty.\";\n    } else {\n      newErrors.age = \"\";\n    }\n    if (department.trim() === \"\") {\n      valid = false;\n      newErrors.department = \"Department cannot be empty.\";\n    } else {\n      newErrors.department = \"\";\n    }\n    if (salary.trim() === \"\" || isNaN(salary)) {\n      valid = false;\n      newErrors.salary = \"Salary must be a number and cannot be empty.\";\n    } else {\n      newErrors.salary = \"\";\n    }\n    if (experience.trim() === \"\" || isNaN(experience)) {\n      valid = false;\n      newErrors.experience = \"Experience must be a number and cannot be empty.\";\n    } else {\n      newErrors.experience = \"\";\n    }\n    if (selectedRuleIndex == null) {\n      valid = false;\n      newErrors.selectedRule = \"Please select a rule.\";\n    } else {\n      newErrors.selectedRule = \"\";\n    }\n    setErrors(newErrors);\n    if (valid) {\n      getAST();\n    }\n  };\n  const getAST = () => {\n    // Ensure a rule is selected\n    if (selectedRuleIndex === null) {\n      alert(\"Please select a rule.\");\n      return;\n    }\n\n    // Retrieve the selected rule from the rules array using the index\n    const selectedRule = rules[selectedRuleIndex];\n\n    // Extract the AST directly from the selected rule\n    const ast = selectedRule.ast;\n\n    // Prepare the evaluation data\n    const evaluationData = {\n      age,\n      department,\n      salary,\n      experience\n    };\n\n    // Call the evaluateAST function with the AST and evaluation data\n    const result = evaluateAST(ast, evaluationData);\n\n    // Handle the evaluation result (e.g., display a message or update the UI)\n    alert(`Evaluation Result: ${result ? \"True\" : \"False\"}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row mt-5\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-lg-12 text-center fs-1 fw-bold text-dark\",\n          children: \"Rules & Eligibility\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1086,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1085,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-lg-12 p-5 text-center\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"btn-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: `btn btn-outline-dark fw-bold ${activeTab === \"create\" ? \"active\" : \"\"}`,\n              onClick: () => setActiveTab(\"create\"),\n              children: \"Create Rule\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1093,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `btn btn-outline-dark fw-bold ${activeTab === \"combine\" ? \"active\" : \"\"}`,\n              onClick: () => {\n                setActiveTab(\"combine\");\n                fetchRules();\n              },\n              children: \"Combine Rules\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1099,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `btn btn-outline-dark fw-bold ${activeTab === \"evaluate\" ? \"active\" : \"\"}`,\n              onClick: () => {\n                setActiveTab(\"evaluate\");\n                fetchRules();\n              },\n              children: \"Evaluate Rules\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1108,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1092,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1091,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1090,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row mb-5\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container p-5 feedback-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"text-center\",\n              children: [activeTab === \"create\" && \"Create Rule\", activeTab === \"combine\" && \"Combine Rules\", activeTab === \"evaluate\" && \"Evaluate Rules\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1123,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1122,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-lg-3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1131,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-lg-6\",\n              children: [activeTab === \"create\" && /*#__PURE__*/_jsxDEV(\"form\", {\n                children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n                  className: `form-control mb-3 ${errors.rule ? \"is-invalid\" : \"\"}`,\n                  placeholder: \"Enter Rule\",\n                  value: rulegroup,\n                  onChange: e => group(e.target.value),\n                  rows: 8,\n                  style: {\n                    borderColor: errors.rule ? \"red\" : \"\"\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1135,\n                  columnNumber: 21\n                }, this), errors.rule && /*#__PURE__*/_jsxDEV(\"small\", {\n                  className: \"text-danger fst-italic\",\n                  children: /*#__PURE__*/_jsxDEV(\"i\", {\n                    children: errors.rule\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1143,\n                    columnNumber: 79\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1143,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text-center\",\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    className: \"btn btn-primary mt-3\",\n                    onClick: validateRule,\n                    children: \"Submit\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1145,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1144,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1134,\n                columnNumber: 19\n              }, this), activeTab === \"combine\" && /*#__PURE__*/_jsxDEV(\"form\", {\n                children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                  children: \"Write rules and separate them by commas\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1158,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n                  className: `form-control mb-3 ${errors.rule ? \"is-invalid\" : \"\"}`,\n                  placeholder: \"Enter rules separated by commas\",\n                  value: rulegroup,\n                  onChange: e => group(e.target.value),\n                  rows: 8,\n                  style: {\n                    borderColor: errors.rule ? \"red\" : \"\"\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1159,\n                  columnNumber: 21\n                }, this), grouperrors && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text-danger\",\n                  children: grouperrors\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1167,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text-center\",\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    className: \"btn btn-primary mt-3\",\n                    onClick: validate_combine_Rules,\n                    children: \"Combine\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1169,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1168,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1157,\n                columnNumber: 18\n              }, this), activeTab === \"evaluate\" && /*#__PURE__*/_jsxDEV(\"form\", {\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mb-3\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"form-label\",\n                    children: \"Age\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1183,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"number\",\n                    className: `form-control ${errors.age ? \"is-invalid\" : \"\"}`,\n                    value: age,\n                    onChange: e => setAge(e.target.value),\n                    style: {\n                      borderColor: errors.age ? \"red\" : \"\"\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1184,\n                    columnNumber: 23\n                  }, this), errors.age && /*#__PURE__*/_jsxDEV(\"small\", {\n                    className: \"text-danger fst-italic\",\n                    children: /*#__PURE__*/_jsxDEV(\"i\", {\n                      children: errors.age\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1191,\n                      columnNumber: 80\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1191,\n                    columnNumber: 38\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1182,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mb-3\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"form-label\",\n                    children: \"Department\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1194,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"text\",\n                    className: `form-control ${errors.department ? \"is-invalid\" : \"\"}`,\n                    value: department,\n                    onChange: e => setDepartment(e.target.value),\n                    style: {\n                      borderColor: errors.department ? \"red\" : \"\"\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1195,\n                    columnNumber: 23\n                  }, this), errors.department && /*#__PURE__*/_jsxDEV(\"small\", {\n                    className: \"text-danger fst-italic\",\n                    children: /*#__PURE__*/_jsxDEV(\"i\", {\n                      children: errors.department\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1202,\n                      columnNumber: 87\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1202,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1193,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mb-3\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"form-label\",\n                    children: \"Salary\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1205,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"number\",\n                    className: `form-control ${errors.salary ? \"is-invalid\" : \"\"}`,\n                    value: salary,\n                    onChange: e => setSalary(e.target.value),\n                    style: {\n                      borderColor: errors.salary ? \"red\" : \"\"\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1206,\n                    columnNumber: 23\n                  }, this), errors.salary && /*#__PURE__*/_jsxDEV(\"small\", {\n                    className: \"text-danger fst-italic\",\n                    children: /*#__PURE__*/_jsxDEV(\"i\", {\n                      children: errors.salary\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1213,\n                      columnNumber: 83\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1213,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1204,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mb-3\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"form-label\",\n                    children: \"Experience\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1216,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"number\",\n                    className: `form-control ${errors.experience ? \"is-invalid\" : \"\"}`,\n                    value: experience,\n                    onChange: e => setExperience(e.target.value),\n                    style: {\n                      borderColor: errors.experience ? \"red\" : \"\"\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1217,\n                    columnNumber: 23\n                  }, this), errors.experience && /*#__PURE__*/_jsxDEV(\"small\", {\n                    className: \"text-danger fst-italic\",\n                    children: /*#__PURE__*/_jsxDEV(\"i\", {\n                      children: errors.experience\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1224,\n                      columnNumber: 87\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1224,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1215,\n                  columnNumber: 21\n                }, this), rules.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"form-label\",\n                    children: \"Select the rule by which you want to evaluate:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1229,\n                    columnNumber: 25\n                  }, this), rules.map((rule, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"form-check\",\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      className: \"form-check-input\",\n                      type: \"radio\",\n                      value: index,\n                      checked: selectedRuleIndex === index,\n                      onChange: () => handleRuleSelection(index)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1232,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"form-check-label\",\n                      children: rule.rule\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1239,\n                      columnNumber: 27\n                    }, this)]\n                  }, index, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1231,\n                    columnNumber: 25\n                  }, this)), errors.selectedRule && /*#__PURE__*/_jsxDEV(\"small\", {\n                    className: \"text-danger fst-italic\",\n                    children: /*#__PURE__*/_jsxDEV(\"i\", {\n                      children: errors.selectedRule\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1245,\n                      columnNumber: 91\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1245,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1228,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text-center\",\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    className: \"btn btn-primary mt-3 bg-dark\",\n                    onClick: validateEvaluation,\n                    children: \"Evaluate\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1249,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1248,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1181,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1132,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-lg-3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1260,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1130,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1121,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1120,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1084,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1083,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"9gI+PRaJYvOr6ECuXrIq2qlOvPo=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","evaluateAST","ast","data","type","console","log","value","r","evalCondition","left","right","condition","match","Error","field","operator","formattedValue","trim","isNaN","originalString","replace","dataValue","JSON","stringify","eval","Dashboard","_s","activeTab","setActiveTab","rules","setRules","rulegroup","group","selectedRuleIndex","setSelectedRuleIndex","age","setAge","department","setDepartment","salary","setSalary","experience","setExperience","errors","setErrors","rule","selectedRule","grouperrors","setgroupErrors","fetchRules","fetch","then","response","json","rulesArray","catch","error","validate_combine_Rules","valid","newErrors","length","test","split","map","submitRules","validateRule","url","newRule","selectedRules","postdata","headers","method","body","alert","setSelectedRules","handleRuleSelection","index","validateEvaluation","getAST","evaluationData","result","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","placeholder","onChange","e","target","rows","style","borderColor","checked","_c","$RefreshReg$"],"sources":["C:/Users/ashut/Desktop/feedback_portal - Copy/reactapp/src/Dashboard.js"],"sourcesContent":["\r\n\r\n\r\n// import { useState, useEffect } from \"react\";\r\n\r\n// const Dashboard = () => {\r\n//   const [activeTab, setActiveTab] = useState(\"create\");\r\n//   const [rules, setRules] = useState([]);\r\n//   const [selectedRules, setSelectedRules] = useState([]);\r\n//   const [rule, setRule] = useState(\"\");\r\n//   const [age, setAge] = useState(\"\");\r\n//   const [department, setDepartment] = useState(\"\");\r\n//   const [salary, setSalary] = useState(\"\");\r\n//   const [experience, setExperience] = useState(\"\");\r\n//   const [errors, setErrors] = useState({\r\n//     rule: \"\",\r\n//     age: \"\",\r\n//     department: \"\",\r\n//     salary: \"\",\r\n//     experience: \"\",\r\n//     selectedRule: \"\",\r\n//   });\r\n//   const [selectedRule, setSelectedRule] = useState(\"\");\r\n\r\n//   useEffect(() => {\r\n//     if (activeTab === \"evaluate\") {\r\n//       fetchRules();\r\n//     }\r\n//   }, [activeTab]);\r\n\r\n//   const fetchRules = () => {\r\n//     fetch(\"http://localhost:5556/rules\")\r\n//       .then((response) => response.json())\r\n//       .then((rulesArray) => {\r\n//         setRules(rulesArray);\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(\"Error fetching rules:\", error);\r\n//       });\r\n//   };\r\n\r\n//   const handleRuleSelection = (rule) => {\r\n//     setSelectedRule(rule);\r\n//   };\r\n\r\n//   const handleCombineRules = () => {\r\n//     console.log(\"Combining rules:\", selectedRules);\r\n//     alert(\"Rules combined successfully!\");\r\n//   };\r\n\r\n//   const validateRule = () => {\r\n//     let valid = true;\r\n//     let newErrors = { ...errors };\r\n\r\n//     if (rule.trim() === \"\") {\r\n//       valid = false;\r\n//       newErrors.rule = \"Rule cannot be empty.\";\r\n//     } else if (rule.length < 50) {\r\n//       valid = false;\r\n//       newErrors.rule = \"Rule must be at least 50 characters long.\";\r\n//     } else if (!/AND|OR/.test(rule)) {\r\n//       valid = false;\r\n//       newErrors.rule = \"Rule must contain at least one 'AND' or 'OR' operator.\";\r\n//     } else {\r\n//       newErrors.rule = \"\";\r\n//     }\r\n\r\n//     setErrors(newErrors);\r\n\r\n//     if (valid) {\r\n//       submitRule();\r\n//     }\r\n//   };\r\n\r\n//   const submitRule = () => {\r\n//     const url = \"http://localhost:5556/rules\";\r\n//     const newRule = {\r\n//       rule: rule,\r\n//     };\r\n\r\n//     const postdata = {\r\n//       headers: { \"Content-type\": \"application/json\" },\r\n//       method: \"POST\",\r\n//       body: JSON.stringify(newRule),\r\n//     };\r\n\r\n//     fetch(url, postdata)\r\n//       .then((response) => response.json())\r\n//       .then((data) => {\r\n//         alert(\"Rule Added Successfully!\");\r\n//         setRule(\"\");\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(\"Error submitting rule:\", error);\r\n//       });\r\n//   };\r\n\r\n//   const validateEvaluation = () => {\r\n//     let valid = true;\r\n//     let newErrors = { ...errors };\r\n\r\n//     if (age.trim() === \"\" || isNaN(age)) {\r\n//       valid = false;\r\n//       newErrors.age = \"Age must be a number and cannot be empty.\";\r\n//     } else {\r\n//       newErrors.age = \"\";\r\n//     }\r\n\r\n//     if (department.trim() === \"\") {\r\n//       valid = false;\r\n//       newErrors.department = \"Department cannot be empty.\";\r\n//     } else {\r\n//       newErrors.department = \"\";\r\n//     }\r\n\r\n//     if (salary.trim() === \"\" || isNaN(salary)) {\r\n//       valid = false;\r\n//       newErrors.salary = \"Salary must be a number and cannot be empty.\";\r\n//     } else {\r\n//       newErrors.salary = \"\";\r\n//     }\r\n\r\n//     if (experience.trim() === \"\" || isNaN(experience)) {\r\n//       valid = false;\r\n//       newErrors.experience = \"Experience must be a number and cannot be empty.\";\r\n//     } else {\r\n//       newErrors.experience = \"\";\r\n//     }\r\n\r\n//     if (!selectedRule) {\r\n//       valid = false;\r\n//       newErrors.selectedRule = \"Please select a rule.\";\r\n//     } else {\r\n//       newErrors.selectedRule = \"\";\r\n//     }\r\n\r\n//     setErrors(newErrors);\r\n\r\n//     if (valid) {\r\n//       submitEvaluation();\r\n//     }\r\n//   };\r\n\r\n//   const submitEvaluation = () => {\r\n//     const url = \"http://localhost:5556/evaluateRule\";\r\n//     const evaluationData = {\r\n//       age,\r\n//       department,\r\n//       salary,\r\n//       experience,\r\n//       rule: selectedRule,\r\n//     };\r\n\r\n//     const postdata = {\r\n//       headers: { \"Content-type\": \"application/json\" },\r\n//       method: \"POST\",\r\n//       body: JSON.stringify(evaluationData),\r\n//     };\r\n\r\n//     fetch(url, postdata)\r\n//       .then((response) => response.json())\r\n//       .then((data) => {\r\n//         alert(`Evaluation Result: ${data.result ? \"True\" : \"False\"}`);\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(\"Error evaluating rule:\", error);\r\n//       });\r\n//   };\r\n\r\n//   return (\r\n//     <section>\r\n//       <div className=\"container\">\r\n//         <div className=\"row mt-5\">\r\n//           <div className=\"col-lg-12 text-center fs-1 fw-bold text-dark\">\r\n//             Rules & Eligibility\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"row\">\r\n//           <div className=\"col-lg-12 p-5 text-center\">\r\n//             <div className=\"btn-group\">\r\n//               <button\r\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"create\" ? \"active\" : \"\"}`}\r\n//                 onClick={() => setActiveTab(\"create\")}\r\n//               >\r\n//                 Create Rule\r\n//               </button>\r\n//               <button\r\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"combine\" ? \"active\" : \"\"}`}\r\n//                 onClick={() => {\r\n//                   setActiveTab(\"combine\");\r\n//                   fetchRules();\r\n//                 }}\r\n//               >\r\n//                 Combine Rules\r\n//               </button>\r\n//               <button\r\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"evaluate\" ? \"active\" : \"\"}`}\r\n//                 onClick={() => {\r\n//                   setActiveTab(\"evaluate\");\r\n//                   fetchRules();\r\n//                 }}\r\n//               >\r\n//                 Evaluate Rules\r\n//               </button>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"row mb-5\">\r\n//           <div className=\"container p-5 feedback-box\">\r\n//             <div className=\"row\">\r\n//               <h3 className=\"text-center\">\r\n//                 {activeTab === \"create\" && \"Create Rule\"}\r\n//                 {activeTab === \"combine\" && \"Combine Rules\"}\r\n//                 {activeTab === \"evaluate\" && \"Evaluate Rules\"}\r\n//               </h3>\r\n//             </div>\r\n\r\n//             <div className=\"row\">\r\n//               <div className=\"col-lg-3\"></div>\r\n//               <div className=\"col-lg-6\">\r\n//                 {activeTab === \"create\" && (\r\n//                   <form>\r\n//                     <textarea\r\n//                       className={`form-control mb-3 ${errors.rule ? \"is-invalid\" : \"\"}`}\r\n//                       placeholder=\"Enter Rule\"\r\n//                       value={rule}\r\n//                       onChange={(e) => setRule(e.target.value)}\r\n//                       rows={8}\r\n//                       style={{ borderColor: errors.rule ? \"red\" : \"\" }}\r\n//                     ></textarea>\r\n//                     {errors.rule && <small className=\"text-danger fst-italic\"><i>{errors.rule}</i></small>}\r\n//                     <div className='text-center'>\r\n//                       <button\r\n//                         type=\"button\"\r\n//                         className=\"btn btn-primary mt-3 bg-dark\"\r\n//                         onClick={validateRule}\r\n//                       >\r\n//                         Create Rule\r\n//                       </button>\r\n//                     </div>\r\n//                   </form>\r\n//                 )}\r\n\r\n//                 {activeTab === \"combine\" && (\r\n//                   <div>\r\n//                     {rules.length > 0 ? (\r\n//                       <form>\r\n//                         {rules.map((rule, index) => (\r\n//                         <div key={index} className=\"form-check\">\r\n//                           <input\r\n//                             className=\"form-check-input\"\r\n//                             type=\"checkbox\"\r\n//                             value={rule._id}\r\n//                             onChange={() => handleRuleSelection(rule.rule)}\r\n//                           />\r\n//                           <label className=\"form-check-label\">\r\n//                             {rule.rule}\r\n//                           </label>\r\n//                         </div>\r\n//                       ))}\r\n\r\n//                        <div className='text-center'>\r\n//                         <button\r\n//                           type=\"button\"\r\n//                           className=\"btn btn-primary mt-3 bg-dark\"\r\n//                           onClick={handleCombineRules}\r\n//                         >\r\n//                           Combine Selected Rules\r\n//                         </button>\r\n//                         </div>\r\n//                       </form>\r\n//                     ) : (\r\n//                       <p>No rules available. Click the button to fetch rules.</p>\r\n//                     )}\r\n//                   </div>\r\n//                 )}\r\n\r\n//                 {activeTab === \"evaluate\" && (\r\n//                   <form>\r\n//                     <div className=\"mb-3\">\r\n//                       <label className=\"form-label\">Age</label>\r\n//                       <input\r\n//                         type=\"number\"\r\n//                         className={`form-control ${errors.age ? \"is-invalid\" : \"\"}`}\r\n//                         value={age}\r\n//                         onChange={(e) => setAge(e.target.value)}\r\n//                         style={{ borderColor: errors.age ? \"red\" : \"\" }}\r\n//                       />\r\n//                       {errors.age && <small className=\"text-danger fst-italic\"><i>{errors.age}</i></small>}\r\n//                     </div>\r\n//                     <div className=\"mb-3\">\r\n//                       <label className=\"form-label\">Department</label>\r\n//                       <input\r\n//                         type=\"text\"\r\n//                         className={`form-control ${errors.department ? \"is-invalid\" : \"\"}`}\r\n//                         value={department}\r\n//                         onChange={(e) => setDepartment(e.target.value)}\r\n//                         style={{ borderColor: errors.department ? \"red\" : \"\" }}\r\n//                       />\r\n//                       {errors.department && <small className=\"text-danger fst-italic\"><i>{errors.department}</i></small>}\r\n//                     </div>\r\n//                     <div className=\"mb-3\">\r\n//                       <label className=\"form-label\">Salary</label>\r\n//                       <input\r\n//                         type=\"number\"\r\n//                         className={`form-control ${errors.salary ? \"is-invalid\" : \"\"}`}\r\n//                         value={salary}\r\n//                         onChange={(e) => setSalary(e.target.value)}\r\n//                         style={{ borderColor: errors.salary ? \"red\" : \"\" }}\r\n//                       />\r\n//                       {errors.salary && <small className=\"text-danger fst-italic\"><i>{errors.salary}</i></small>}\r\n//                     </div>\r\n//                     <div className=\"mb-3\">\r\n//                       <label className=\"form-label\">Experience</label>\r\n//                       <input\r\n//                         type=\"number\"\r\n//                         className={`form-control ${errors.experience ? \"is-invalid\" : \"\"}`}\r\n//                         value={experience}\r\n//                         onChange={(e) => setExperience(e.target.value)}\r\n//                         style={{ borderColor: errors.experience ? \"red\" : \"\" }}\r\n//                       />\r\n//                       {errors.experience && <small className=\"text-danger fst-italic\"><i>{errors.experience}</i></small>}\r\n//                     </div>\r\n//                     {rules.length > 0 && (\r\n//                       <div>\r\n//                          <label className=\"form-label\">Select the rule by which you want to evaluate : </label>\r\n//                         {rules.map((rule, index) => (\r\n//                           <div key={index} className=\"form-check\">\r\n//                             <input\r\n//                               className=\"form-check-input\"\r\n//                               type=\"radio\"\r\n//                               value={rule._id}\r\n//                               checked={selectedRule === rule._id}\r\n//                               onChange={() => handleRuleSelection(rule._id)}\r\n//                             />\r\n//                             <label className=\"form-check-label\">\r\n//                               {rule.rule}\r\n//                             </label>\r\n//                           </div>\r\n//                         ))}\r\n//                         {errors.selectedRule && <small className=\"text-danger fst-italic\"><i>{errors.selectedRule}</i></small>}\r\n//                       </div>\r\n//                     )}\r\n//                     <div className='text-center'>\r\n//                       <button\r\n//                         type=\"button\"\r\n//                         className=\"btn btn-primary mt-3 bg-dark\"\r\n//                         onClick={validateEvaluation}\r\n//                       >\r\n//                         Evaluate\r\n//                       </button>\r\n//                     </div>\r\n//                   </form>\r\n//                 )}\r\n\r\n//               </div>\r\n//               <div className=\"col-lg-3\"></div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </section>\r\n//   );\r\n// };\r\n\r\n// export default Dashboard;\r\n\r\n// import { useState, useEffect } from \"react\";\r\n\r\n// // Define the AST evaluation functions\r\n// const evaluateAST = (ast, data) => {\r\n//   if (ast.type === 'condition') {\r\n//     return evalCondition(ast.value, data);\r\n//   }\r\n\r\n//   const left = evaluateAST(ast.left, data);\r\n//   const right = evaluateAST(ast.right, data);\r\n\r\n//   if (ast.type === 'AND') {\r\n//     return left && right;\r\n//   } else if (ast.type === 'OR') {\r\n//     return left || right;\r\n//   }\r\n\r\n//   return false;\r\n// };\r\n\r\n// const evalCondition = (condition, data) => {\r\n//   const [field, operator, value] = condition.split(/(?<=[<>=!]=?)\\s?/);\r\n//   if (isNaN(value)) {\r\n//     return eval(`${JSON.stringify(data[field])} ${operator} ${value}`);\r\n//   }\r\n//   return eval(`${data[field]} ${operator} ${value}`);\r\n// };\r\n\r\n// const Dashboard = () => {\r\n//   const [activeTab, setActiveTab] = useState(\"create\");\r\n//   const [rules, setRules] = useState([]);\r\n//   const [selectedRules, setSelectedRules] = useState([]);\r\n//   const [rule, setRule] = useState(\"\");\r\n//   const [age, setAge] = useState(\"\");\r\n//   const [department, setDepartment] = useState(\"\");\r\n//   const [salary, setSalary] = useState(\"\");\r\n//   const [experience, setExperience] = useState(\"\");\r\n//   const [errors, setErrors] = useState({\r\n//     rule: \"\",\r\n//     age: \"\",\r\n//     department: \"\",\r\n//     salary: \"\",\r\n//     experience: \"\",\r\n//     selectedRule: \"\",\r\n//   });\r\n//   const [selectedRule, setSelectedRule] = useState(\"\");\r\n\r\n//   useEffect(() => {\r\n//     if (activeTab === \"evaluate\") {\r\n//       fetchRules();\r\n//     }\r\n//   }, [activeTab]);\r\n\r\n//   const fetchRules = () => {\r\n//     fetch(\"http://localhost:5556/rules\")\r\n//       .then((response) => response.json())\r\n//       .then((rulesArray) => {\r\n//         setRules(rulesArray);\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(\"Error fetching rules:\", error);\r\n//       });\r\n//   };\r\n\r\n//   const handleRuleSelection = (rule) => {\r\n//     setSelectedRule(rule);\r\n//   };\r\n\r\n//   const handleCombineRules = () => {\r\n//     console.log(\"Combining rules:\", selectedRules);\r\n//     alert(\"Rules combined successfully!\");\r\n//   };\r\n\r\n//   const validateRule = () => {\r\n//     let valid = true;\r\n//     let newErrors = { ...errors };\r\n\r\n//     if (rule.trim() === \"\") {\r\n//       valid = false;\r\n//       newErrors.rule = \"Rule cannot be empty.\";\r\n//     } else if (rule.length < 50) {\r\n//       valid = false;\r\n//       newErrors.rule = \"Rule must be at least 50 characters long.\";\r\n//     } else if (!/AND|OR/.test(rule)) {\r\n//       valid = false;\r\n//       newErrors.rule = \"Rule must contain at least one 'AND' or 'OR' operator.\";\r\n//     } else {\r\n//       newErrors.rule = \"\";\r\n//     }\r\n\r\n//     setErrors(newErrors);\r\n\r\n//     if (valid) {\r\n//       submitRule();\r\n//     }\r\n//   };\r\n\r\n//   const submitRule = () => {\r\n//     const url = \"http://localhost:5556/rules\";\r\n//     const newRule = {\r\n//       rule: rule,\r\n//     };\r\n\r\n//     const postdata = {\r\n//       headers: { \"Content-type\": \"application/json\" },\r\n//       method: \"POST\",\r\n//       body: JSON.stringify(newRule),\r\n//     };\r\n\r\n//     fetch(url, postdata)\r\n//       .then((response) => response.json())\r\n//       .then((data) => {\r\n//         alert(\"Rule Added Successfully!\");\r\n//         setRule(\"\");\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(\"Error submitting rule:\", error);\r\n//       });\r\n//   };\r\n\r\n//   const validateEvaluation = () => {\r\n//     let valid = true;\r\n//     let newErrors = { ...errors };\r\n\r\n//     if (age.trim() === \"\" || isNaN(age)) {\r\n//       valid = false;\r\n//       newErrors.age = \"Age must be a number and cannot be empty.\";\r\n//     } else {\r\n//       newErrors.age = \"\";\r\n//     }\r\n\r\n//     if (department.trim() === \"\") {\r\n//       valid = false;\r\n//       newErrors.department = \"Department cannot be empty.\";\r\n//     } else {\r\n//       newErrors.department = \"\";\r\n//     }\r\n\r\n//     if (salary.trim() === \"\" || isNaN(salary)) {\r\n//       valid = false;\r\n//       newErrors.salary = \"Salary must be a number and cannot be empty.\";\r\n//     } else {\r\n//       newErrors.salary = \"\";\r\n//     }\r\n\r\n//     if (experience.trim() === \"\" || isNaN(experience)) {\r\n//       valid = false;\r\n//       newErrors.experience = \"Experience must be a number and cannot be empty.\";\r\n//     } else {\r\n//       newErrors.experience = \"\";\r\n//     }\r\n\r\n//     if (!selectedRule) {\r\n//       valid = false;\r\n//       newErrors.selectedRule = \"Please select a rule.\";\r\n//     } else {\r\n//       newErrors.selectedRule = \"\";\r\n//     }\r\n\r\n//     setErrors(newErrors);\r\n\r\n//     if (valid) {\r\n//       submitEvaluation();\r\n//     }\r\n//   };\r\n\r\n//   const submitEvaluation = () => {\r\n//     const url = \"http://localhost:5556/Rules\";\r\n    // const evaluationData = {\r\n    //   age,\r\n    //   department,\r\n    //   salary,\r\n    //   experience,\r\n    //   rule: selectedRule,\r\n    // };\r\n  \r\n//     const postdata = {\r\n//       headers: { \"Content-type\": \"application/json\" },\r\n//       method: \"POST\",\r\n//       body: JSON.stringify(evaluationData),\r\n//     };\r\n  \r\n//     fetch(url, postdata)\r\n//       .then((response) => {\r\n//         if (!response.ok) {\r\n//           throw new Error(`HTTP error! Status: ${response.status}`);\r\n//         }\r\n//         return response.json();\r\n//       })\r\n//       .then((data) => {\r\n//         const ast = data.ruleAST; // Modify according to your actual server response\r\n//         const result = evaluateAST(ast, evaluationData);\r\n//         alert(`Evaluation Result: ${result ? \"True\" : \"False\"}`);\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(\"Error evaluating rule:\", error.message);\r\n//         alert(`An error occurred: ${error.message}`);\r\n//       });\r\n//   };\r\n  \r\n\r\n//   return (\r\n//     <section>\r\n//       <div className=\"container\">\r\n//         <div className=\"row mt-5\">\r\n//           <div className=\"col-lg-12 text-center fs-1 fw-bold text-dark\">\r\n//             Rules & Eligibility\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"row\">\r\n//           <div className=\"col-lg-12 p-5 text-center\">\r\n//             <div className=\"btn-group\">\r\n//               <button\r\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"create\" ? \"active\" : \"\"}`}\r\n//                 onClick={() => setActiveTab(\"create\")}\r\n//               >\r\n//                 Create Rule\r\n//               </button>\r\n//               <button\r\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"combine\" ? \"active\" : \"\"}`}\r\n//                 onClick={() => {\r\n//                   setActiveTab(\"combine\");\r\n//                   fetchRules();\r\n//                 }}\r\n//               >\r\n//                 Combine Rules\r\n//               </button>\r\n//               <button\r\n//                 className={`btn btn-outline-dark fw-bold ${activeTab === \"evaluate\" ? \"active\" : \"\"}`}\r\n//                 onClick={() => {\r\n//                   setActiveTab(\"evaluate\");\r\n//                   fetchRules();\r\n//                 }}\r\n//               >\r\n//                 Evaluate Rules\r\n//               </button>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"row mb-5\">\r\n//           <div className=\"container p-5 feedback-box\">\r\n//             <div className=\"row\">\r\n//               <h3 className=\"text-center\">\r\n//                 {activeTab === \"create\" && \"Create Rule\"}\r\n//                 {activeTab === \"combine\" && \"Combine Rules\"}\r\n//                 {activeTab === \"evaluate\" && \"Evaluate Rules\"}\r\n//               </h3>\r\n//             </div>\r\n\r\n//             <div className=\"row\">\r\n//               <div className=\"col-lg-3\"></div>\r\n//               <div className=\"col-lg-6\">\r\n//                 {activeTab === \"create\" && (\r\n//                   <form>\r\n//                     <textarea\r\n//                       className={`form-control mb-3 ${errors.rule ? \"is-invalid\" : \"\"}`}\r\n//                       placeholder=\"Enter Rule\"\r\n//                       value={rule}\r\n//                       onChange={(e) => setRule(e.target.value)}\r\n//                       rows={8}\r\n//                       style={{ borderColor: errors.rule ? \"red\" : \"\" }}\r\n//                     ></textarea>\r\n//                     {errors.rule && <small className=\"text-danger fst-italic\"><i>{errors.rule}</i></small>}\r\n//                     <div className='text-center'>\r\n//                       <button\r\n//                         type=\"button\"\r\n//                         className=\"btn btn-primary mt-3 bg-dark\"\r\n//                         onClick={validateRule}\r\n//                       >\r\n//                         Create Rule\r\n//                       </button>\r\n//                     </div>\r\n//                   </form>\r\n//                 )}\r\n\r\n//                 {activeTab === \"combine\" && (\r\n//                   <div>\r\n//                     {rules.length > 0 ? (\r\n//                       <form>\r\n//                         {rules.map((rule, index) => (\r\n//                           <div key={index} className=\"form-check\">\r\n//                             <input\r\n//                               className=\"form-check-input\"\r\n//                               type=\"checkbox\"\r\n//                               value={rule._id}\r\n//                               onChange={() => handleRuleSelection(rule.rule)}\r\n//                             />\r\n//                             <label className=\"form-check-label\">\r\n//                               {rule.rule}\r\n//                             </label>\r\n//                           </div>\r\n//                         ))}\r\n\r\n//                         <div className='text-center'>\r\n//                           <button\r\n//                             type=\"button\"\r\n//                             className=\"btn btn-primary mt-3 bg-dark\"\r\n//                             onClick={handleCombineRules}\r\n//                           >\r\n//                             Combine Selected Rules\r\n//                           </button>\r\n//                         </div>\r\n//                       </form>\r\n//                     ) : (\r\n//                       <p>No rules available. Click the button to fetch rules.</p>\r\n//                     )}\r\n//                   </div>\r\n//                 )}\r\n\r\n                // {activeTab === \"evaluate\" && (\r\n                //   <form>\r\n                //     <div className=\"mb-3\">\r\n                //       <label className=\"form-label\">Age</label>\r\n                //       <input\r\n                //         type=\"number\"\r\n                //         className={`form-control ${errors.age ? \"is-invalid\" : \"\"}`}\r\n                //         value={age}\r\n                //         onChange={(e) => setAge(e.target.value)}\r\n                //         style={{ borderColor: errors.age ? \"red\" : \"\" }}\r\n                //       />\r\n                //       {errors.age && <small className=\"text-danger fst-italic\"><i>{errors.age}</i></small>}\r\n                //     </div>\r\n                //     <div className=\"mb-3\">\r\n                //       <label className=\"form-label\">Department</label>\r\n                //       <input\r\n                //         type=\"text\"\r\n                //         className={`form-control ${errors.department ? \"is-invalid\" : \"\"}`}\r\n                //         value={department}\r\n                //         onChange={(e) => setDepartment(e.target.value)}\r\n                //         style={{ borderColor: errors.department ? \"red\" : \"\" }}\r\n                //       />\r\n                //       {errors.department && <small className=\"text-danger fst-italic\"><i>{errors.department}</i></small>}\r\n                //     </div>\r\n                //     <div className=\"mb-3\">\r\n                //       <label className=\"form-label\">Salary</label>\r\n                //       <input\r\n                //         type=\"number\"\r\n                //         className={`form-control ${errors.salary ? \"is-invalid\" : \"\"}`}\r\n                //         value={salary}\r\n                //         onChange={(e) => setSalary(e.target.value)}\r\n                //         style={{ borderColor: errors.salary ? \"red\" : \"\" }}\r\n                //       />\r\n                //       {errors.salary && <small className=\"text-danger fst-italic\"><i>{errors.salary}</i></small>}\r\n                //     </div>\r\n                //     <div className=\"mb-3\">\r\n                //       <label className=\"form-label\">Experience</label>\r\n                //       <input\r\n                //         type=\"number\"\r\n                //         className={`form-control ${errors.experience ? \"is-invalid\" : \"\"}`}\r\n                //         value={experience}\r\n                //         onChange={(e) => setExperience(e.target.value)}\r\n                //         style={{ borderColor: errors.experience ? \"red\" : \"\" }}\r\n                //       />\r\n                //       {errors.experience && <small className=\"text-danger fst-italic\"><i>{errors.experience}</i></small>}\r\n                //     </div>\r\n                //     {rules.length > 0 && (\r\n                //       <div>\r\n                //         <label className=\"form-label\">Select the rule by which you want to evaluate:</label>\r\n                //         {rules.map((rule, index) => (\r\n                //           <div key={index} className=\"form-check\">\r\n                //             <input\r\n                //               className=\"form-check-input\"\r\n                //               type=\"radio\"\r\n                //               value={rule._id}\r\n                //               checked={selectedRule === rule._id}\r\n                //               onChange={() => handleRuleSelection(rule._id)}\r\n                //             />\r\n                //             <label className=\"form-check-label\">\r\n                //               {rule.rule}\r\n                //             </label>\r\n                //           </div>\r\n                //         ))}\r\n                //         {errors.selectedRule && <small className=\"text-danger fst-italic\"><i>{errors.selectedRule}</i></small>}\r\n                //       </div>\r\n                //     )}\r\n                //     <div className='text-center'>\r\n                //       <button\r\n                //         type=\"button\"\r\n                //         className=\"btn btn-primary mt-3 bg-dark\"\r\n                //         onClick={validateEvaluation}\r\n                //       >\r\n                //         Evaluate\r\n                //       </button>\r\n                //     </div>\r\n                //   </form>\r\n                // )}\r\n//               </div>\r\n//               <div className=\"col-lg-3\"></div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </section>\r\n//   );\r\n// };\r\n\r\n// export default Dashboard;\r\n\r\n\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\n// Define the AST evaluation functions\r\nconst evaluateAST = (ast, data) => {\r\n  if (ast.type === 'condition') {\r\n     console.log(ast.value );\r\n    \r\n     let r = evalCondition(ast.value, data);\r\n     console.log(r);\r\n     console.log(\" \");\r\n     return r;\r\n  }\r\n\r\n  const left = evaluateAST(ast.left, data);\r\n  const right = evaluateAST(ast.right, data);\r\n\r\n  if (ast.type === 'AND') {\r\n    return left && right;\r\n  } else if (ast.type === 'OR') {\r\n    return left || right;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nconst evalCondition = (condition, data) => {\r\n  // Use a regex to match the field, operator, and value\r\n  const match = condition.match(/^(\\w+)\\s*(==|!=|<=|>=|<|>)\\s*(.+)$/);\r\n\r\n  console.log(\"Condition:\", condition);\r\n\r\n  if (!match) {\r\n    throw new Error(`Invalid condition: ${condition}`);\r\n  }\r\n\r\n  const [, field, operator, value] = match;\r\n\r\n  console.log(\"Field:\", field, \"Operator:\", operator, \"Value:\", value);\r\n\r\n  // Determine whether the value is numeric or a string and evaluate it accordingly\r\n  let formattedValue = value.trim();\r\n  \r\n  if( isNaN(formattedValue))\r\n  {\r\n    let originalString = formattedValue;\r\n    formattedValue = `\"${originalString.replace(/'/g, \"\")}\"`;\r\n  }\r\n\r\n  // Convert the data field to a string if it's not a number, and compare it correctly\r\n  const dataValue = isNaN(data[field]) ? JSON.stringify(data[field]) : data[field];\r\n\r\n  // Log for debugging\r\n  \r\n  console.log(\"Data Field Value:\", dataValue, \"Formatted Value:\",formattedValue);\r\n   \r\n  return eval(`${dataValue} ${operator} ${formattedValue}`);\r\n};\r\n\r\n\r\n\r\n\r\nconst Dashboard = () => {\r\n  const [activeTab, setActiveTab] = useState(\"create\");\r\n  const [rules, setRules] = useState([]);\r\n  const [rulegroup, group] = useState(\"\");\r\n//  const [selectedRules, setSelectedRules] = useState([]);\r\n  const [selectedRuleIndex, setSelectedRuleIndex] = useState(null);\r\n // const [rule, setRule] = useState(\"\");\r\n  const [age, setAge] = useState(\"\");\r\n  const [department, setDepartment] = useState(\"\");\r\n  const [salary, setSalary] = useState(\"\");\r\n  const [experience, setExperience] = useState(\"\");\r\n  const [errors, setErrors] = useState({\r\n    rule: \"\",\r\n    age: \"\",\r\n    department: \"\",\r\n    salary: \"\",\r\n    experience: \"\",\r\n    selectedRule: \"\",\r\n  });\r\n \r\n  const [grouperrors, setgroupErrors] = useState(\"\");\r\n  //const [selectedRule, setSelectedRule] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (activeTab === \"evaluate\") {\r\n      fetchRules();\r\n    }\r\n  }, [activeTab]);\r\n\r\n\r\n  const fetchRules = () => {\r\n    fetch(\"http://localhost:5556/rules\")\r\n      .then((response) => response.json())\r\n      .then((rulesArray) => {\r\n        setRules(rulesArray);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching rules:\", error);\r\n      });\r\n  };\r\n\r\n\r\n\r\n// combine rule section\r\n  const validate_combine_Rules = () => {\r\n    let valid = true;\r\n    let newErrors = \"\";\r\n\r\n    if (rulegroup.trim() === \"\") {\r\n      valid = false;\r\n      newErrors = \"Rule cannot be empty.\";\r\n    } else if (rulegroup.length < 50) {\r\n      valid = false;\r\n      newErrors= \"Rule must be at least 50 characters long.\";\r\n    } else if (!/AND|OR/.test(rulegroup)) {\r\n      valid = false;\r\n      newErrors = \"Rule must contain at least one 'AND' or 'OR' operator.\";\r\n    } else {\r\n      newErrors= \"\";\r\n    }\r\n\r\n    setgroupErrors(newErrors);\r\n\r\n    if (valid) {\r\n      if (rulegroup.trim() === \"\") {\r\n        setgroupErrors({ rule: \"Please enter at least one rule.\" });\r\n        return;\r\n      }\r\n    \r\n      // Split the rules by commas and trim spaces\r\n      const rulesArray = rulegroup.split(\",\").map((r) => r.trim());\r\n  \r\n      // Update the selectedRules state with the trimmed rules\r\n      // console.log(rulesArray[0]);\r\n      //   console.log(rulesArray[1]);\r\n    //  setSelectedRules(rulesArray);\r\n      console.log(rulesArray);\r\n      submitRules(rulesArray);\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n  // const validateRule = () => {\r\n  //   let valid = true;\r\n  //   let newErrors = { ...errors };\r\n  \r\n  //   if (rulegroup.trim() === \"\") {\r\n  //     valid = false;\r\n  //     newErrors.rule = \"Rule cannot be empty.\";\r\n  //   } else if (rulegroup.length < 50) {\r\n  //     valid = false;\r\n  //     newErrors.rule = \"Rule must be at least 50 characters long.\";\r\n  //   } else if (!/AND|OR/.test(rulegroup)) {\r\n  //     valid = false;\r\n  //     newErrors.rule = \"Rule must contain at least one 'AND' or 'OR' operator.\";\r\n  //   } else {\r\n  //     newErrors.rule = \"\";\r\n  //   }\r\n  \r\n  //   setErrors(newErrors);\r\n  \r\n  //   if (valid) {\r\n  //     // Replace previous rules with the new rulegroup\r\n     \r\n  //     let temp = [rulegroup];\r\n  //     console.log(selectedRules);\r\n  //     setSelectedRules(temp);\r\n\r\n  //     console.log(selectedRules);\r\n  //     submitRules(); // Call submitRules function to send the new rulegroup\r\n  //   }\r\n  // };\r\n  \r\n\r\n  const validateRule = () => {\r\n    let valid = true;\r\n    let newErrors = { ...errors };\r\n  \r\n    if (rulegroup.trim() === \"\") {\r\n      valid = false;\r\n      newErrors.rule = \"Rule cannot be empty.\";\r\n    } else if (rulegroup.length < 50) {\r\n      valid = false;\r\n      newErrors.rule = \"Rule must be at least 50 characters long.\";\r\n    } else if (!/AND|OR/.test(rulegroup)) {\r\n      valid = false;\r\n      newErrors.rule = \"Rule must contain at least one 'AND' or 'OR' operator.\";\r\n    } else {\r\n      newErrors.rule = \"\";\r\n    }\r\n  \r\n    setErrors(newErrors);\r\n  \r\n    if (valid) {\r\n      // Replace previous rules with the new rulegroup\r\n      // setSelectedRules(() => [rulegroup]);\r\n  \r\n      // Using the updated state value for submission\r\n      // No need to log selectedRules here as it will not reflect the updated state immediately\r\n      submitRules(); // Call submitRules function to send the new rulegroup\r\n    }\r\n  };\r\n\r\n  \r\n  const submitRules = () => {\r\n    const url = \"http://localhost:5556/rules\";\r\n    //console.log(selectedRules);\r\n    const newRule = {\r\n      rule: selectedRules\r\n    };\r\n\r\n    const postdata = {\r\n      headers: { \"Content-type\": \"application/json\" },\r\n      method: \"POST\",\r\n      body: JSON.stringify(newRule),\r\n    };\r\n\r\n    fetch(url, postdata)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        alert(\"Rule Added Successfully!\");\r\n        setSelectedRules([]);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error submitting rule:\", error);\r\n      });\r\n  };\r\n\r\n  const handleRuleSelection = (index) => {\r\n    setSelectedRuleIndex(index);\r\n  };\r\n  \r\n  \r\n  // evalution section \r\n\r\n  const validateEvaluation = () => {\r\n    let valid = true;\r\n    let newErrors = { ...errors };\r\n\r\n    if (age.trim() === \"\" || isNaN(age)) {\r\n      valid = false;\r\n      newErrors.age = \"Age must be a number and cannot be empty.\";\r\n    } else {\r\n      newErrors.age = \"\";\r\n    }\r\n\r\n    if (department.trim() === \"\") {\r\n      valid = false;\r\n      newErrors.department = \"Department cannot be empty.\";\r\n    } else {\r\n      newErrors.department = \"\";\r\n    }\r\n\r\n    if (salary.trim() === \"\" || isNaN(salary)) {\r\n      valid = false;\r\n      newErrors.salary = \"Salary must be a number and cannot be empty.\";\r\n    } else {\r\n      newErrors.salary = \"\";\r\n    }\r\n\r\n    if (experience.trim() === \"\" || isNaN(experience)) {\r\n      valid = false;\r\n      newErrors.experience = \"Experience must be a number and cannot be empty.\";\r\n    } else {\r\n      newErrors.experience = \"\";\r\n    }\r\n\r\n    if (selectedRuleIndex == null) {\r\n      valid = false;\r\n      newErrors.selectedRule = \"Please select a rule.\";\r\n    } else {\r\n      newErrors.selectedRule = \"\";\r\n    }\r\n\r\n    setErrors(newErrors);\r\n\r\n    if (valid) {\r\n      getAST();\r\n    }\r\n  };\r\n\r\n  const getAST = () => {\r\n    // Ensure a rule is selected\r\n    if (selectedRuleIndex === null) {\r\n      alert(\"Please select a rule.\");\r\n      return;\r\n    }\r\n  \r\n    // Retrieve the selected rule from the rules array using the index\r\n    const selectedRule = rules[selectedRuleIndex];\r\n  \r\n    // Extract the AST directly from the selected rule\r\n    const ast = selectedRule.ast;\r\n  \r\n    // Prepare the evaluation data\r\n    const evaluationData = {\r\n      age,\r\n      department,\r\n      salary,\r\n      experience\r\n    };\r\n  \r\n    // Call the evaluateAST function with the AST and evaluation data\r\n    const result = evaluateAST(ast, evaluationData);\r\n  \r\n    // Handle the evaluation result (e.g., display a message or update the UI)\r\n    alert(`Evaluation Result: ${result ? \"True\" : \"False\"}`);\r\n  };\r\n  \r\n  \r\n\r\n  return (\r\n    <section>\r\n      <div className=\"container\">\r\n        <div className=\"row mt-5\">\r\n          <div className=\"col-lg-12 text-center fs-1 fw-bold text-dark\">\r\n            Rules & Eligibility\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col-lg-12 p-5 text-center\">\r\n            <div className=\"btn-group\">\r\n              <button\r\n                className={`btn btn-outline-dark fw-bold ${activeTab === \"create\" ? \"active\" : \"\"}`}\r\n                onClick={() => setActiveTab(\"create\")}\r\n              >\r\n                Create Rule\r\n              </button>\r\n              <button\r\n                className={`btn btn-outline-dark fw-bold ${activeTab === \"combine\" ? \"active\" : \"\"}`}\r\n                onClick={() => {\r\n                  setActiveTab(\"combine\");\r\n                  fetchRules();\r\n                }}\r\n              >\r\n                Combine Rules\r\n              </button>\r\n              <button\r\n                className={`btn btn-outline-dark fw-bold ${activeTab === \"evaluate\" ? \"active\" : \"\"}`}\r\n                onClick={() => {\r\n                  setActiveTab(\"evaluate\");\r\n                  fetchRules();\r\n                }}\r\n              >\r\n                Evaluate Rules\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"row mb-5\">\r\n          <div className=\"container p-5 feedback-box\">\r\n            <div className=\"row\">\r\n              <h3 className=\"text-center\">\r\n                {activeTab === \"create\" && \"Create Rule\"}\r\n                {activeTab === \"combine\" && \"Combine Rules\"}\r\n                {activeTab === \"evaluate\" && \"Evaluate Rules\"}\r\n              </h3>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n              <div className=\"col-lg-3\"></div>\r\n              <div className=\"col-lg-6\">\r\n                {activeTab === \"create\" && (\r\n                  <form>\r\n                    <textarea\r\n                      className={`form-control mb-3 ${errors.rule ? \"is-invalid\" : \"\"}`}\r\n                      placeholder=\"Enter Rule\"\r\n                      value={rulegroup}\r\n                      onChange={(e) => group(e.target.value)}\r\n                      rows={8}\r\n                      style={{ borderColor: errors.rule ? \"red\" : \"\" }}\r\n                    ></textarea>\r\n                    {errors.rule && <small className=\"text-danger fst-italic\"><i>{errors.rule}</i></small>}\r\n                    <div className='text-center'>\r\n                      <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-primary mt-3\"\r\n                        onClick={validateRule}\r\n                      >\r\n                        Submit\r\n                      </button>\r\n                    </div>\r\n                  </form>\r\n                )}\r\n\r\n                {activeTab === \"combine\" && (\r\n                 <form>\r\n                    <h5>Write rules and separate them by commas</h5>\r\n                    <textarea\r\n                      className={`form-control mb-3 ${errors.rule ? \"is-invalid\" : \"\"}`}\r\n                      placeholder=\"Enter rules separated by commas\"\r\n                      value={rulegroup}\r\n                      onChange={(e) => group(e.target.value)}\r\n                      rows={8}\r\n                      style={{ borderColor: errors.rule ? \"red\" : \"\" }}\r\n                    ></textarea>\r\n                    {grouperrors && <div className=\"text-danger\">{grouperrors}</div>}\r\n                    <div className=\"text-center\">\r\n                      <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-primary mt-3\"\r\n                        onClick={validate_combine_Rules}\r\n                      >\r\n                        Combine\r\n                      </button>\r\n                    </div>\r\n               </form>\r\n                )}\r\n\r\n{activeTab === \"evaluate\" && (\r\n                  <form>\r\n                    <div className=\"mb-3\">\r\n                      <label className=\"form-label\">Age</label>\r\n                      <input\r\n                        type=\"number\"\r\n                        className={`form-control ${errors.age ? \"is-invalid\" : \"\"}`}\r\n                        value={age}\r\n                        onChange={(e) => setAge(e.target.value)}\r\n                        style={{ borderColor: errors.age ? \"red\" : \"\" }}\r\n                      />\r\n                      {errors.age && <small className=\"text-danger fst-italic\"><i>{errors.age}</i></small>}\r\n                    </div>\r\n                    <div className=\"mb-3\">\r\n                      <label className=\"form-label\">Department</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className={`form-control ${errors.department ? \"is-invalid\" : \"\"}`}\r\n                        value={department}\r\n                        onChange={(e) => setDepartment(e.target.value)}\r\n                        style={{ borderColor: errors.department ? \"red\" : \"\" }}\r\n                      />\r\n                      {errors.department && <small className=\"text-danger fst-italic\"><i>{errors.department}</i></small>}\r\n                    </div>\r\n                    <div className=\"mb-3\">\r\n                      <label className=\"form-label\">Salary</label>\r\n                      <input\r\n                        type=\"number\"\r\n                        className={`form-control ${errors.salary ? \"is-invalid\" : \"\"}`}\r\n                        value={salary}\r\n                        onChange={(e) => setSalary(e.target.value)}\r\n                        style={{ borderColor: errors.salary ? \"red\" : \"\" }}\r\n                      />\r\n                      {errors.salary && <small className=\"text-danger fst-italic\"><i>{errors.salary}</i></small>}\r\n                    </div>\r\n                    <div className=\"mb-3\">\r\n                      <label className=\"form-label\">Experience</label>\r\n                      <input\r\n                        type=\"number\"\r\n                        className={`form-control ${errors.experience ? \"is-invalid\" : \"\"}`}\r\n                        value={experience}\r\n                        onChange={(e) => setExperience(e.target.value)}\r\n                        style={{ borderColor: errors.experience ? \"red\" : \"\" }}\r\n                      />\r\n                      {errors.experience && <small className=\"text-danger fst-italic\"><i>{errors.experience}</i></small>}\r\n                    </div>\r\n\r\n                    {rules.length > 0 && (\r\n                      <div>\r\n                        <label className=\"form-label\">Select the rule by which you want to evaluate:</label>\r\n                        {rules.map((rule, index) => (\r\n                        <div key={index} className=\"form-check\">\r\n                          <input\r\n                            className=\"form-check-input\"\r\n                            type=\"radio\"\r\n                            value={index}\r\n                            checked={selectedRuleIndex === index}\r\n                            onChange={() => handleRuleSelection(index)}\r\n                          />\r\n                          <label className=\"form-check-label\">\r\n                            {rule.rule}\r\n                          </label>\r\n                        </div>\r\n                      ))}\r\n\r\n                        {errors.selectedRule && <small className=\"text-danger fst-italic\"><i>{errors.selectedRule}</i></small>}\r\n                      </div>\r\n                    )}\r\n                    <div className='text-center'>\r\n                      <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-primary mt-3 bg-dark\"\r\n                        onClick={validateEvaluation}\r\n                      >\r\n                        Evaluate\r\n                      </button>\r\n                    </div>\r\n                  </form>\r\n                )}\r\n              </div>\r\n              <div className=\"col-lg-3\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappingsgB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE3C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,GAAGA,CAACC,GAAG,EAAEC,IAAI,KAAK;EACjC,IAAID,GAAG,CAACE,IAAI,KAAK,WAAW,EAAE;IAC3BC,OAAO,CAACC,GAAG,CAACJ,GAAG,CAACK,KAAM,CAAC;IAEvB,IAAIC,CAAC,GAAGC,aAAa,CAACP,GAAG,CAACK,KAAK,EAAEJ,IAAI,CAAC;IACtCE,OAAO,CAACC,GAAG,CAACE,CAAC,CAAC;IACdH,OAAO,CAACC,GAAG,CAAC,GAAG,CAAC;IAChB,OAAOE,CAAC;EACX;EAEA,MAAME,IAAI,GAAGT,WAAW,CAACC,GAAG,CAACQ,IAAI,EAAEP,IAAI,CAAC;EACxC,MAAMQ,KAAK,GAAGV,WAAW,CAACC,GAAG,CAACS,KAAK,EAAER,IAAI,CAAC;EAE1C,IAAID,GAAG,CAACE,IAAI,KAAK,KAAK,EAAE;IACtB,OAAOM,IAAI,IAAIC,KAAK;EACtB,CAAC,MAAM,IAAIT,GAAG,CAACE,IAAI,KAAK,IAAI,EAAE;IAC5B,OAAOM,IAAI,IAAIC,KAAK;EACtB;EAEA,OAAO,KAAK;AACd,CAAC;AAED,MAAMF,aAAa,GAAGA,CAACG,SAAS,EAAET,IAAI,KAAK;EACzC;EACA,MAAMU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"},"metadata":{},"sourceType":"module","externalDependencies":[]}